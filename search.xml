<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>git学习（二）</title>
      <link href="/Ryan/git%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/Ryan/git%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="十五、远程仓库Github"><a href="#十五、远程仓库Github" class="headerlink" title="十五、远程仓库Github"></a>十五、远程仓库Github</h1><p>GitHub 是基于 Git 的远程代码托管平台，可以用于<strong>存储、管理和协作开发代码</strong>。远程仓库让多个开发者可以共享和同步代码。</p><hr><h2 id="1-配置-GitHub-远程仓库"><a href="#1-配置-GitHub-远程仓库" class="headerlink" title="1. 配置 GitHub 远程仓库"></a><strong>1. 配置 GitHub 远程仓库</strong></h2><p>在使用 GitHub 之前，首先需要<strong>配置 Git 远程仓库</strong>。</p><p><strong>（1）生成 SSH 密钥（推荐）</strong></p><p>如果不想每次都输入 GitHub 密码，建议使用 SSH 连接：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure><p>然后将生成的 <strong><code>~/.ssh/id_rsa.pub</code></strong> 文件的内容添加到 <strong>GitHub 账户的 SSH Keys</strong> 中。</p><p>测试 SSH 连接：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>如果看到 <code>Hi xxx! You&#39;ve successfully authenticated</code>，表示 SSH 配置成功。</p><hr><h2 id="2-关联本地仓库和-GitHub-远程仓库"><a href="#2-关联本地仓库和-GitHub-远程仓库" class="headerlink" title="2. 关联本地仓库和 GitHub 远程仓库"></a><strong>2. 关联本地仓库和 GitHub 远程仓库</strong></h2><p>如果你已经有一个本地 Git 仓库，想把它推送到 GitHub，可以按照以下步骤操作。</p><p><strong>（1）初始化本地 Git 仓库（如果还没有）</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p><strong>（2）创建远程仓库</strong></p><ol><li><p>登录 <a href="https://github.com/">GitHub</a></p></li><li><p>点击右上角 <strong>“+” → New repository”</strong> 创建新仓库</p></li><li><p><strong>不要勾选</strong> “Initialize this repository with a README”（如果你已经有本地仓库）</p></li><li><p>复制 GitHub 提供的远程仓库地址，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git@github.com:your-username/your-repo.git  （SSH 地址）</span><br><span class="line">https://github.com/your-username/your-repo.git  （HTTPS 地址）</span><br></pre></td></tr></table></figure></li></ol><p><strong>（3）添加远程仓库</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:your-username/your-repo.git  # 使用 SSH</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者</span></span><br><span class="line">git remote add origin https://github.com/your-username/your-repo.git  # 使用 HTTPS</span><br></pre></td></tr></table></figure><p><strong>检查远程仓库是否添加成功</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><p>如果成功，会显示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">origin  git@github.com:your-username/your-repo.git (fetch)</span><br><span class="line">origin  git@github.com:your-username/your-repo.git (push)</span><br></pre></td></tr></table></figure><hr><h2 id="3-推送本地代码到-GitHub"><a href="#3-推送本地代码到-GitHub" class="headerlink" title="3. 推送本地代码到 GitHub"></a><strong>3. 推送本地代码到 GitHub</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;初始化项目&quot;</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><ul><li><code>-u</code> 选项表示<strong>将本地 <code>main</code> 分支与远程 <code>origin/main</code> 关联</strong>，之后推送代码可以直接使用 <code>git push</code>。</li></ul><p>如果远程仓库默认分支不是 <code>main</code>，可以先查看远程默认分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -r</span><br></pre></td></tr></table></figure><p>然后推送到正确的分支，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><hr><h2 id="4-从-GitHub-克隆远程仓库"><a href="#4-从-GitHub-克隆远程仓库" class="headerlink" title="4. 从 GitHub 克隆远程仓库"></a><strong>4. 从 GitHub 克隆远程仓库</strong></h2><p>如果你想在另一台设备或新的目录下获取远程仓库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:your-username/your-repo.git  # SSH</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者</span></span><br><span class="line">git clone https://github.com/your-username/your-repo.git  # HTTPS</span><br></pre></td></tr></table></figure><hr><h2 id="5-拉取远程更新"><a href="#5-拉取远程更新" class="headerlink" title="5. 拉取远程更新"></a><strong>5. 拉取远程更新</strong></h2><p>如果远程仓库有新的提交，而你本地代码不是最新的，可以执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin main</span><br></pre></td></tr></table></figure><p>如果遇到冲突（conflict），需要手动解决后再提交。</p><hr><h2 id="6-远程仓库相关操作"><a href="#6-远程仓库相关操作" class="headerlink" title="6. 远程仓库相关操作"></a><strong>6. 远程仓库相关操作</strong></h2><p><strong>（1）查看远程仓库信息</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><p><strong>（2）修改远程仓库地址</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote set-url origin git@github.com:new-username/new-repo.git</span><br></pre></td></tr></table></figure><p><strong>（3）删除远程仓库</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote remove origin</span><br></pre></td></tr></table></figure><hr><h2 id="7-分支管理"><a href="#7-分支管理" class="headerlink" title="7. 分支管理"></a><strong>7. 分支管理</strong></h2><p><strong>（1）推送新分支</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b feature-branch  # 创建并切换到新分支</span><br><span class="line">git push -u origin feature-branch  # 推送新分支到 GitHub</span><br></pre></td></tr></table></figure><p><strong>（2）拉取远程分支</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin  # 获取远程所有分支</span><br><span class="line">git checkout feature-branch  # 切换到远程分支</span><br></pre></td></tr></table></figure><p><strong>（3）合并分支</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge feature-branch</span><br></pre></td></tr></table></figure><p>然后推送更新：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin main</span><br></pre></td></tr></table></figure><hr><h2 id="8-贡献开源项目（Fork-Pull-Request）"><a href="#8-贡献开源项目（Fork-Pull-Request）" class="headerlink" title="8. 贡献开源项目（Fork &amp; Pull Request）"></a><strong>8. 贡献开源项目（Fork &amp; Pull Request）</strong></h2><p>如果你想贡献别人的 GitHub 项目，通常需要：</p><ol><li><strong>Fork</strong> 目标仓库</li><li><strong>Clone</strong> 你 Fork 的仓库到本地</li><li><strong>创建新分支</strong> 进行修改</li><li><strong>提交代码</strong> 并推送到你的 Fork 仓库</li><li>在 GitHub 提交 **Pull Request (PR)**，等待项目维护者审核合并。</li></ol><hr><h2 id="9-结论"><a href="#9-结论" class="headerlink" title="9. 结论"></a><strong>9. 结论</strong></h2><p>GitHub 远程仓库的常见操作包括：</p><table><thead><tr><th>操作</th><th>命令</th></tr></thead><tbody><tr><td><strong>初始化仓库</strong></td><td><code>git init</code></td></tr><tr><td><strong>添加远程仓库</strong></td><td><code>git remote add origin &lt;url&gt;</code></td></tr><tr><td><strong>推送代码</strong></td><td><code>git push -u origin main</code></td></tr><tr><td><strong>克隆仓库</strong></td><td><code>git clone &lt;url&gt;</code></td></tr><tr><td><strong>拉取远程更新</strong></td><td><code>git pull origin main</code></td></tr><tr><td><strong>查看远程仓库</strong></td><td><code>git remote -v</code></td></tr><tr><td><strong>删除远程仓库</strong></td><td><code>git remote remove origin</code></td></tr></tbody></table><h1 id="十六、git-push-和-git-pull"><a href="#十六、git-push-和-git-pull" class="headerlink" title="十六、git push 和 git pull"></a><strong>十六、git push 和 git pull</strong></h1><p>在 Git 版本控制系统中，<code>git push</code> 和 <code>git pull</code> 是用于本地仓库和远程仓库之间同步代码的两个核心命令。</p><hr><h2 id="1-git-push（推送）"><a href="#1-git-push（推送）" class="headerlink" title="1. git push（推送）"></a><strong>1. <code>git push</code>（推送）</strong></h2><p><code>git push</code> 用于 <strong>将本地分支的代码提交到远程仓库</strong>，让团队的其他人可以获取你的更新。</p><p><strong>基本语法</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push &lt;远程仓库名&gt; &lt;分支名&gt;</span><br></pre></td></tr></table></figure><p>常见用法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin main</span><br></pre></td></tr></table></figure><p><strong>含义</strong>：</p><ul><li><code>origin</code>：远程仓库的默认名称</li><li><code>main</code>：要推送的分支名称</li></ul><p>如果已经设置了默认远程仓库和分支，可以直接执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure><p><strong>强制推送</strong></p><p>如果远程分支的提交记录比本地更新，Git 可能会拒绝推送。可以使用 <code>--force</code> 强制覆盖远程分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --force</span><br></pre></td></tr></table></figure><p>⚠ <strong>注意</strong>：强制推送可能会覆盖远程仓库的更改，慎用！</p><hr><h2 id="2-git-pull（拉取）"><a href="#2-git-pull（拉取）" class="headerlink" title="2. git pull（拉取）"></a><strong>2. <code>git pull</code>（拉取）</strong></h2><p><code>git pull</code> 用于 <strong>从远程仓库获取最新代码，并合并到当前分支</strong>。它实际上是 <code>git fetch</code> + <code>git merge</code> 的简写。</p><p><strong>基本语法</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull &lt;远程仓库名&gt; &lt;分支名&gt;</span><br></pre></td></tr></table></figure><p>常见用法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin main</span><br></pre></td></tr></table></figure><p><strong>含义</strong>：</p><ul><li><code>origin</code>：远程仓库的默认名称</li><li><code>main</code>：要拉取的分支名称</li></ul><p>如果已经设置了默认远程仓库和分支，可以直接执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure><p><strong>处理合并冲突</strong></p><p>如果本地代码和远程代码有冲突，Git 会提示你手动解决：</p><ol><li><p>编辑冲突文件，保留需要的代码。</p></li><li><p>使用 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add</span><br></pre></td></tr></table></figure><p> 标记已解决的文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;文件名&gt;</span><br></pre></td></tr></table></figure></li><li><p>提交更改：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;解决合并冲突&quot;</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="3-git-push-和-git-pull-的区别"><a href="#3-git-push-和-git-pull-的区别" class="headerlink" title="3. git push 和 git pull 的区别"></a><strong>3. <code>git push</code> 和 <code>git pull</code> 的区别</strong></h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><code>git push</code></td><td>将本地分支的代码推送到远程仓库</td></tr><tr><td><code>git pull</code></td><td>从远程仓库拉取最新代码并合并到本地</td></tr></tbody></table><hr><h2 id="4-常见错误及解决方法"><a href="#4-常见错误及解决方法" class="headerlink" title="4. 常见错误及解决方法"></a><strong>4. 常见错误及解决方法</strong></h2><p><strong>（1）推送时报错：<code>failed to push some refs to ...</code></strong></p><p><strong>原因</strong>：本地代码落后于远程仓库，需要先同步。<br><strong>解决方法</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git pull --rebase origin main  # 先拉取最新代码</span><br><span class="line">git push origin main  # 再推送</span><br></pre></td></tr></table></figure><p><strong>（2）拉取时报错：合并冲突（Merge Conflict）</strong></p><p><strong>解决方法</strong>：</p><ol><li><p>打开冲突文件，手动修改冲突部分。</p></li><li><p><code>git add</code>解决的文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;文件名&gt;</span><br></pre></td></tr></table></figure></li><li><p>重新提交：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;解决合并冲突&quot;</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a><strong>5. 总结</strong></h2><ul><li>**<code>git push</code>**：把本地代码推送到远程仓库，让别人可以看到你的改动。</li><li>**<code>git pull</code>**：从远程仓库拉取最新代码，保持本地代码的更新。</li><li>**先 <code>git pull</code> 再 <code>git push</code>**，可以避免推送失败。</li></ul><p>这样，团队协作时就能保证代码同步，不会相互覆盖。</p><h1 id="十七、分支branch"><a href="#十七、分支branch" class="headerlink" title="十七、分支branch"></a>十七、分支branch</h1><p>Git 分支（Branch）是 Git 版本控制中的一项核心功能，它允许你在同一个仓库中并行开发，而不会影响主分支（<code>main</code> 或 <code>master</code>）。</p><hr><h2 id="1-什么是分支？"><a href="#1-什么是分支？" class="headerlink" title="1. 什么是分支？"></a><strong>1. 什么是分支？</strong></h2><ul><li><strong>分支是 Git 维护的多个代码版本线</strong>，它们可以相互独立开发，并在需要时合并。</li><li><strong>默认分支</strong> 通常是 <code>main</code>（或 <code>master</code>）。</li><li>分支的作用：<ul><li>并行开发新功能（feature）</li><li>修复 bug 而不影响主分支</li><li>进行实验性开发</li></ul></li></ul><hr><h2 id="2-常用-Git-分支命令"><a href="#2-常用-Git-分支命令" class="headerlink" title="2. 常用 Git 分支命令"></a><strong>2. 常用 Git 分支命令</strong></h2><p><strong>（1）查看当前分支</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><p>示例输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* main</span><br><span class="line">  dev</span><br><span class="line">  feature-1</span><br></pre></td></tr></table></figure><p><code>*</code> 号表示当前所在的分支。</p><p><strong>（2）创建新分支</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch 分支名</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch feature-1</span><br></pre></td></tr></table></figure><p>但这样只是<strong>创建分支</strong>，并未切换到该分支。</p><p><strong>（3）切换到新分支</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout 分支名</span><br></pre></td></tr></table></figure><p>或（推荐用法）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git switch 分支名</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git switch feature-1</span><br></pre></td></tr></table></figure><p><strong>（4）创建并切换到新分支（推荐）</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b 分支名</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git switch -c 分支名</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git switch -c feature-1</span><br></pre></td></tr></table></figure><p>这样会<strong>同时创建分支并切换到它</strong>。</p><p><strong>（5）删除本地分支</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch -d 分支名  # 正常删除</span><br><span class="line">git branch -D 分支名  # 强制删除（未合并的分支）</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d feature-1</span><br></pre></td></tr></table></figure><p><strong>（6）删除远程分支</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin --delete 远程分支名</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin --delete feature-1</span><br></pre></td></tr></table></figure><p><strong>（7）合并分支</strong><code>git merge 分支名</code></p><p>当你完成新分支的开发后，可以把它合并到 <code>main</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout main</span><br><span class="line">git merge feature-1</span><br></pre></td></tr></table></figure><p>或（推荐）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git switch main</span><br><span class="line">git merge feature-1</span><br></pre></td></tr></table></figure><hr><h2 id="3-远程分支"><a href="#3-远程分支" class="headerlink" title="3. 远程分支"></a><strong>3. 远程分支</strong></h2><p><strong>（1）查看远程分支</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -r</span><br></pre></td></tr></table></figure><p>示例输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">origin/main</span><br><span class="line">origin/dev</span><br></pre></td></tr></table></figure><p> <strong>（2）推送本地分支到远程</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin 分支名</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin feature-1</span><br></pre></td></tr></table></figure><p><strong>（3）拉取远程分支</strong></p><p>如果远程有 <code>dev</code> 分支，你想要在本地使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b dev origin/dev</span><br></pre></td></tr></table></figure><p>或（Git 2.23+ 推荐）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git switch --track origin/dev</span><br></pre></td></tr></table></figure><hr><h2 id="4-处理分支冲突"><a href="#4-处理分支冲突" class="headerlink" title="4. 处理分支冲突"></a><strong>4. 处理分支冲突</strong></h2><p>当合并分支时，Git 可能会提示冲突。解决方法：</p><ol><li><p><strong>Git 会提示冲突的文件</strong>，你需要手动修改它们。即重新编辑冲突的文件中的内容，自行决定保留什么，删除什么。</p></li><li><p>使用 <code>git add</code> 标记已解决的文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add 冲突文件</span><br></pre></td></tr></table></figure></li><li><p>提交更改：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;解决合并冲突&quot;</span><br></pre></td></tr></table></figure></li><li><p>终止合并：当不行继续执行合并操作时可以使用下面的命令来终止合并过程：</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge --abort</span><br></pre></td></tr></table></figure><h2 id="5-总结-1"><a href="#5-总结-1" class="headerlink" title="5. 总结"></a><strong>5. 总结</strong></h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><code>git branch</code></td><td>查看本地分支</td></tr><tr><td><code>git branch 分支名</code></td><td>创建新分支</td></tr><tr><td><code>git switch 分支名</code></td><td>切换到已有分支（推荐）</td></tr><tr><td><code>git switch -c 分支名</code></td><td>创建并切换到新分支（推荐）</td></tr><tr><td><code>git merge 分支名</code></td><td>合并分支</td></tr><tr><td><code>git branch -d 分支名</code></td><td>删除本地分支</td></tr><tr><td><code>git push origin --delete 分支名</code></td><td>删除远程分支</td></tr><tr><td><code>git push origin 分支名</code></td><td>推送本地分支到远程</td></tr><tr><td><code>git pull origin 分支名</code></td><td>拉取远程分支</td></tr></tbody></table><h1 id="十八、git-checkout命令"><a href="#十八、git-checkout命令" class="headerlink" title="十八、git checkout命令"></a>十八、<code>git checkout</code>命令</h1><p><code>git checkout</code> 主要用于 <strong>切换分支</strong> 或 <strong>恢复文件</strong>，但在 Git 2.23 之后，官方推荐使用 <strong><code>git switch</code> 和 <code>git restore</code></strong> 来替代 <code>checkout</code> 的部分功能。</p><hr><h2 id="1-git-checkout-的主要功能"><a href="#1-git-checkout-的主要功能" class="headerlink" title="1. git checkout 的主要功能"></a><strong>1. <code>git checkout</code> 的主要功能</strong></h2><p><code>git checkout</code> 主要有两个用途：</p><ol><li><strong>切换分支</strong></li><li><strong>恢复文件</strong></li></ol><hr><h2 id="2-git-checkout-切换分支"><a href="#2-git-checkout-切换分支" class="headerlink" title="2. git checkout 切换分支"></a><strong>2. <code>git checkout</code> 切换分支</strong></h2><p><strong>（1）切换到已有分支</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout 分支名</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout dev</span><br></pre></td></tr></table></figure><blockquote><p><strong>推荐使用 <code>git switch dev</code>（Git 2.23+）</strong>。</p></blockquote><p><strong>（2）创建并切换到新分支</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b 分支名</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b feature-1</span><br></pre></td></tr></table></figure><blockquote><p>推荐使用 <code>git switch -c feature-1</code>。</p></blockquote><hr><h2 id="3-git-checkout-恢复文件"><a href="#3-git-checkout-恢复文件" class="headerlink" title="3. git checkout 恢复文件"></a><strong>3. <code>git checkout</code> 恢复文件</strong></h2><p><strong>（1）撤销工作区的修改</strong></p><p>如果你修改了 <code>file.txt</code>，但还没有 <code>git add</code>，想要撤销修改：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- file.txt</span><br></pre></td></tr></table></figure><blockquote><p><strong>推荐使用 <code>git restore file.txt</code>（Git 2.23+）</strong>。</p></blockquote><p><strong>（2）恢复某个文件到指定分支的版本</strong></p><p>从 <code>main</code> 分支恢复 <code>file.txt</code> 到当前分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout main -- file.txt</span><br></pre></td></tr></table></figure><hr><h2 id="4-git-checkout-检出某个提交"><a href="#4-git-checkout-检出某个提交" class="headerlink" title="4. git checkout 检出某个提交"></a><strong>4. <code>git checkout</code> 检出某个提交</strong></h2><p><strong>（1）切换到某个提交</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout 提交哈希值</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout a1b2c3d</span><br></pre></td></tr></table></figure><p><strong>⚠️ 注意：</strong><br>这样会进入 <strong>分离 HEAD 状态</strong>，此时你不在任何分支上，Git 仅指向该提交。</p><p><strong>（2）从某个提交创建新分支</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b new-branch a1b2c3d</span><br></pre></td></tr></table></figure><hr><h2 id="5-git-checkout-的推荐替代命令"><a href="#5-git-checkout-的推荐替代命令" class="headerlink" title="5. git checkout 的推荐替代命令"></a><strong>5. <code>git checkout</code> 的推荐替代命令</strong></h2><p>Git 2.23+ 之后，推荐使用以下命令替代 <code>checkout</code>：</p><table><thead><tr><th>功能</th><th>旧 <code>git checkout</code> 命令</th><th>推荐新命令</th></tr></thead><tbody><tr><td>切换分支</td><td><code>git checkout 分支名</code></td><td><code>git switch 分支名</code></td></tr><tr><td>创建并切换新分支</td><td><code>git checkout -b 分支名</code></td><td><code>git switch -c 分支名</code></td></tr><tr><td>撤销文件修改</td><td><code>git checkout -- 文件名</code></td><td><code>git restore 文件名</code></td></tr></tbody></table><hr><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a><strong>6. 总结</strong></h2><table><thead><tr><th><code>git checkout</code> 用法</th><th>作用</th></tr></thead><tbody><tr><td><code>git checkout 分支名</code></td><td>切换到已有分支（推荐用 <code>git switch</code>）</td></tr><tr><td><code>git checkout -b 分支名</code></td><td>创建并切换到新分支（推荐用 <code>git switch -c</code>）</td></tr><tr><td><code>git checkout -- 文件名</code></td><td>撤销未提交的修改（推荐用 <code>git restore</code>）</td></tr><tr><td><code>git checkout 提交哈希值</code></td><td>切换到指定提交（进入分离 HEAD 状态）</td></tr><tr><td><code>git checkout main -- 文件名</code></td><td>从 <code>main</code> 分支恢复某个文件</td></tr></tbody></table><h1 id="十九、git-rebase命令"><a href="#十九、git-rebase命令" class="headerlink" title="十九、git rebase命令"></a>十九、<code>git rebase</code>命令</h1><p><code>git rebase</code>（变基）用于 <strong>将一个分支的提交应用到另一个分支的最新状态</strong>，它通常用于让分支历史保持线性，避免过多的合并提交（<code>merge commit</code>）。</p><h2 id="Git-rebase（变基）详解"><a href="#Git-rebase（变基）详解" class="headerlink" title="Git rebase（变基）详解"></a><strong>Git <code>rebase</code>（变基）详解</strong></h2><p><code>git rebase</code>（变基）用于 <strong>将一个分支的提交应用到另一个分支的最新状态</strong>，它通常用于让分支历史保持线性，避免过多的合并提交（<code>merge commit</code>）。</p><hr><h2 id="1-git-rebase-的作用"><a href="#1-git-rebase-的作用" class="headerlink" title="1. git rebase 的作用"></a><strong>1. <code>git rebase</code> 的作用</strong></h2><ul><li>让分支历史更干净，减少不必要的合并提交。</li><li>在多人协作时，让本地分支跟上远程主分支的最新变化。</li><li>将某个功能分支（feature 分支）基于最新的 <code>main</code> 分支重新排列提交。</li></ul><hr><h2 id="2-git-rebase-的基本用法"><a href="#2-git-rebase-的基本用法" class="headerlink" title="2. git rebase 的基本用法"></a><strong>2. <code>git rebase</code> 的基本用法</strong></h2><p><strong>（1）基础用法</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout feature</span><br><span class="line">git rebase main</span><br></pre></td></tr></table></figure><p>或：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git switch feature</span><br><span class="line">git rebase main</span><br></pre></td></tr></table></figure><p><strong>作用：</strong></p><ul><li><code>feature</code> 分支会被“重新放置”到 <code>main</code> 分支的最新提交之后。</li><li>Git 会<strong>逐个</strong>将 <code>feature</code> 分支的提交应用到 <code>main</code> 的最新状态。</li></ul><hr><h2 id="3-git-merge-vs-git-rebase"><a href="#3-git-merge-vs-git-rebase" class="headerlink" title="3. git merge vs git rebase"></a><strong>3. <code>git merge</code> vs <code>git rebase</code></strong></h2><p>两者的区别可以用下面的场景说明：</p><p><strong>（1）使用 <code>git merge</code></strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout feature</span><br><span class="line">git merge main</span><br></pre></td></tr></table></figure><p><strong>结果：</strong></p><ul><li><code>feature</code> 分支保留原来的提交历史。</li><li>产生一个新的合并提交（<code>merge commit</code>）。</li></ul><p><strong>优点：</strong>不会破坏原分支的提交历史，方便回溯和查看。</p><p><strong>缺点：</strong>会产生额外的提交节点，分支图比较复杂。</p><p>示例：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A<span class="comment">---B---C (main)</span></span><br><span class="line">     \</span><br><span class="line">      D<span class="comment">---E---F (feature)</span></span><br><span class="line">       \</span><br><span class="line">        M (merge commit)</span><br></pre></td></tr></table></figure><p><strong>（2）使用 <code>git rebase</code></strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout feature</span><br><span class="line">git rebase main</span><br></pre></td></tr></table></figure><p><strong>结果：</strong></p><ul><li><code>feature</code> 分支的提交会被重新应用到 <code>main</code> 之后。</li><li><strong>不会</strong> 产生 <code>merge commit</code>，历史记录会更线性。</li></ul><p><strong>优点：</strong>不会新增额外的提交记录，形成线性历史，比较直观和干净。</p><p><strong>缺点：</strong>会改变提交历史，改变了当前分支branch out的节点。<strong>要避免在共享分支中使用。</strong></p><p>示例：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A<span class="comment">---B---C (main)</span></span><br><span class="line">         \</span><br><span class="line">          D<span class="string">&#x27;---E&#x27;</span><span class="comment">---F&#x27; (feature, rebased)</span></span><br></pre></td></tr></table></figure><p>其中 <code>D&#39;</code>, <code>E&#39;</code>, <code>F&#39;</code> 是 <code>D</code>, <code>E</code>, <code>F</code> 的重新应用版本。</p><p><strong>总结：</strong></p><table><thead><tr><th>方法</th><th>结果</th><th>适用场景</th></tr></thead><tbody><tr><td><code>merge</code></td><td>生成一个 <code>merge commit</code>，保留完整的历史</td><td>适用于合并分支，保持历史完整</td></tr><tr><td><code>rebase</code></td><td>让分支历史线性化，提交“重新排列”</td><td>适用于清理提交历史，保持干净的提交树</td></tr></tbody></table><hr><h2 id="4-git-rebase-解决冲突"><a href="#4-git-rebase-解决冲突" class="headerlink" title="4. git rebase 解决冲突"></a><strong>4. <code>git rebase</code> 解决冲突</strong></h2><p>如果 <code>rebase</code> 过程中发生冲突，Git 会暂停 <code>rebase</code> 并提示你手动解决冲突：</p><ol><li><p>按 Git 提示<strong>手动修改冲突文件</strong>。</p></li><li><p>使用 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add</span><br></pre></td></tr></table></figure><p> 标记已解决的文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add 冲突文件</span><br></pre></td></tr></table></figure></li><li><p>继续 <code>rebase</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase --continue</span><br></pre></td></tr></table></figure></li><li><p>如果想取消 <code>rebase</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase --abort</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="5-交互式-git-rebase-i"><a href="#5-交互式-git-rebase-i" class="headerlink" title="5. 交互式 git rebase -i"></a><strong>5. 交互式 <code>git rebase -i</code></strong></h2><p>如果你想<strong>修改提交历史</strong>，可以使用 **交互式 <code>rebase</code>**：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i HEAD~3</span><br></pre></td></tr></table></figure><p>这表示对最近 3 次提交进行修改，Git 会打开一个编辑器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pick a1b2c3d 修复了一个 bug</span><br><span class="line">pick d4e5f6g 增加了新功能</span><br><span class="line">pick 7h8i9j0 修改了 README</span><br></pre></td></tr></table></figure><p>你可以：</p><ul><li><strong>修改提交消息</strong>（用 <code>reword</code> 代替 <code>pick</code>）。</li><li><strong>合并提交</strong>（用 <code>squash</code> 代替 <code>pick</code>）。</li><li><strong>删除提交</strong>（直接删除行）。</li></ul><hr><h2 id="6-远程分支-git-rebase-注意事项"><a href="#6-远程分支-git-rebase-注意事项" class="headerlink" title="6. 远程分支 git rebase 注意事项"></a><strong>6. 远程分支 <code>git rebase</code> 注意事项</strong></h2><p>如果你已经 <code>push</code> 了提交到远程仓库，<strong>不要直接 <code>git rebase</code> 并强推</strong>，否则可能会影响他人代码。<br>如果你已经 <code>rebase</code> 了远程分支，可以用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --force-with-lease</span><br></pre></td></tr></table></figure><p>这样会尽量避免破坏别人的提交。</p><hr><h2 id="7-结论"><a href="#7-结论" class="headerlink" title="7. 结论"></a><strong>7. 结论</strong></h2><table><thead><tr><th>操作</th><th>作用</th></tr></thead><tbody><tr><td><code>git rebase main</code></td><td>让当前分支基于 <code>main</code> 的最新状态</td></tr><tr><td><code>git rebase --continue</code></td><td>继续 <code>rebase</code>（解决冲突后执行）</td></tr><tr><td><code>git rebase --abort</code></td><td>取消 <code>rebase</code></td></tr><tr><td><code>git rebase -i HEAD~N</code></td><td>交互式修改最近 N 次提交</td></tr><tr><td><code>git push --force-with-lease</code></td><td>在远程 <code>rebase</code> 后安全推送</td></tr></tbody></table><h1 id="二十、Git-分支管理与工作流模型"><a href="#二十、Git-分支管理与工作流模型" class="headerlink" title="二十、Git 分支管理与工作流模型"></a>二十、<strong>Git 分支管理与工作流模型</strong></h1><p>Git 的分支管理与工作流模型是软件开发中非常重要的部分，合理的分支管理能提高团队协作效率，保证代码质量。常见的工作流模型包括 <strong>Git Flow</strong>、<strong>GitHub Flow</strong> 和 <strong>GitLab Flow</strong>，它们适用于不同的开发模式。</p><hr><h2 id="1-Git-分支管理基础"><a href="#1-Git-分支管理基础" class="headerlink" title="1. Git 分支管理基础"></a><strong>1. Git 分支管理基础</strong></h2><h3 id="（1）常见分支类型"><a href="#（1）常见分支类型" class="headerlink" title="（1）常见分支类型"></a><strong>（1）常见分支类型</strong></h3><table><thead><tr><th>分支类型</th><th>作用</th></tr></thead><tbody><tr><td><code>main</code>（或 <code>master</code>）</td><td>主分支，存放稳定可发布的代码</td></tr><tr><td><code>develop</code></td><td>开发分支，存放最新的开发代码</td></tr><tr><td><code>feature</code></td><td>功能分支，每个新功能一个独立分支</td></tr><tr><td><code>release</code></td><td>预发布分支，主要用于测试和修复 bug</td></tr><tr><td><code>hotfix</code></td><td>线上紧急修复分支，直接从 <code>main</code> 创建</td></tr></tbody></table><hr><h2 id="2-Git-工作流模型"><a href="#2-Git-工作流模型" class="headerlink" title="2. Git 工作流模型"></a><strong>2. Git 工作流模型</strong></h2><p>不同的 Git 工作流适用于不同的团队开发方式，以下是三种常见的工作流：</p><h3 id="（1）Git-Flow（适用于大型团队和长周期开发）"><a href="#（1）Git-Flow（适用于大型团队和长周期开发）" class="headerlink" title="（1）Git Flow（适用于大型团队和长周期开发）"></a><strong>（1）Git Flow（适用于大型团队和长周期开发）</strong></h3><p><strong>适用场景：</strong></p><ul><li>适用于 <strong>团队协作</strong> 和 <strong>复杂项目</strong>，如 Web 应用、企业级系统。</li><li>需要 <strong>多个并行开发</strong>，如新功能开发、发布版本管理、紧急修复等。</li></ul><p><strong>分支管理规则：</strong></p><ul><li><code>main</code> 分支：始终保持稳定，仅存放正式发布的代码。</li><li><code>develop</code> 分支：用于日常开发，合并所有 <code>feature</code> 分支。</li><li><code>feature</code> 分支：基于 <code>develop</code> 创建，每个功能一个 <code>feature</code> 分支，开发完成后合并回 <code>develop</code>。</li><li><code>release</code> 分支：从 <code>develop</code> 创建，用于测试和最终修复 bug，确保版本稳定后合并到 <code>main</code> 和 <code>develop</code>。</li><li><code>hotfix</code> 分支：直接从 <code>main</code> 创建，用于紧急修复线上 bug，修复后合并回 <code>main</code> 和 <code>develop</code>。</li></ul><h3 id="（2）GitHub-Flow（适用于短周期敏捷开发）"><a href="#（2）GitHub-Flow（适用于短周期敏捷开发）" class="headerlink" title="（2）GitHub Flow（适用于短周期敏捷开发）"></a><strong>（2）GitHub Flow（适用于短周期敏捷开发）</strong></h3><p><strong>适用场景：</strong></p><ul><li>适用于 <strong>敏捷开发</strong>，比如 <strong>小型团队</strong>、<strong>开源项目</strong>。</li><li>只维护 <code>main</code> 分支，开发分支是短期 <code>feature</code> 分支。</li></ul><p><strong>分支管理规则：</strong></p><ol><li><code>main</code> 分支是唯一的长期存在分支，保持可随时部署的状态。</li><li><strong>所有新功能都基于 <code>main</code> 创建 <code>feature</code> 分支</strong>。</li><li><code>feature</code> 开发完成后，<strong>创建 Pull Request（PR）</strong>，经过代码审核后合并到 <code>main</code>。</li><li><code>main</code> 经过 CI&#x2F;CD 测试后自动部署。</li></ol><h3 id="（3）GitLab-Flow（适用于持续集成-CI-CD）"><a href="#（3）GitLab-Flow（适用于持续集成-CI-CD）" class="headerlink" title="（3）GitLab Flow（适用于持续集成 CI&#x2F;CD）"></a><strong>（3）GitLab Flow（适用于持续集成 CI&#x2F;CD）</strong></h3><p><strong>适用场景：</strong></p><ul><li>适用于 <strong>企业级项目</strong>，结合 CI&#x2F;CD <strong>自动化部署</strong>。</li><li>在 <code>main</code> 之外，还维护 <strong>预发布分支（staging）</strong> 和 <strong>生产分支（production）</strong>。</li></ul><p><strong>分支管理规则：</strong></p><ol><li><code>main</code> 仍然是开发分支，不直接用于生产。</li><li><code>feature</code> 分支基于 <code>main</code> 创建，开发完成后合并回 <code>main</code>。</li><li><code>main</code> 合并后，代码自动部署到 <code>staging</code> 进行测试。</li><li>通过 <code>git tag</code> 标记版本，然后部署到 <code>production</code>。</li></ol><h2 id="3-如何选择合适的工作流？"><a href="#3-如何选择合适的工作流？" class="headerlink" title="3. 如何选择合适的工作流？"></a><strong>3. 如何选择合适的工作流？</strong></h2><table><thead><tr><th><strong>工作流</strong></th><th><strong>适用场景</strong></th><th><strong>优点</strong></th><th><strong>缺点</strong></th></tr></thead><tbody><tr><td><strong>Git Flow</strong></td><td>适用于大型团队和长周期开发</td><td>结构清晰，适合复杂项目</td><td>分支较多，管理成本较高</td></tr><tr><td><strong>GitHub Flow</strong></td><td>适用于小型团队和开源项目</td><td>简单直接，适合短周期开发</td><td>需要高质量的代码评审</td></tr><tr><td><strong>GitLab Flow</strong></td><td>适用于企业 CI&#x2F;CD 自动化</td><td>适配 DevOps，可快速部署</td><td>需要良好的 CI&#x2F;CD 流程支持</td></tr></tbody></table><h2 id="4-分支命名"><a href="#4-分支命名" class="headerlink" title="4. 分支命名"></a>4. <strong>分支命名</strong></h2><p><strong>推荐使用带有意义的描述性名称来命名分支。</strong></p><ol><li>版本发布分支&#x2F;Tag示例： v1.0.0</li><li>功能分支示例：feature-login-page</li><li>修复分支示例：hotfix-#issueid-desc</li></ol><h2 id="5-分支管理"><a href="#5-分支管理" class="headerlink" title="5.分支管理"></a>5.<strong>分支管理</strong></h2><ol><li>定期合并已经成功验证的分支，及时删除已经合并的分支</li><li>保持合适的分支数量</li><li>为分支设置合适的管理权限</li></ol><h1 id="二十一、README-文件介绍"><a href="#二十一、README-文件介绍" class="headerlink" title="二十一、README 文件介绍"></a>二十一、<strong>README 文件介绍</strong></h1><p><code>README</code> 文件是项目的 <strong>说明文档</strong>，通常用于介绍项目的 <strong>用途、安装方式、使用方法</strong> 等。它通常放在 <strong>项目的根目录</strong>，并且 GitHub、GitLab 等代码托管平台会自动识别和显示它的内容。</p><hr><h2 id="1-README-文件的格式"><a href="#1-README-文件的格式" class="headerlink" title="1. README 文件的格式"></a><strong>1. README 文件的格式</strong></h2><p>README 文件通常使用 <strong>Markdown（.md）</strong> 或 <strong>纯文本（.txt）</strong> 格式。<br>常见的文件名：</p><ul><li><code>README.md</code>（推荐，使用 Markdown 语法，适用于 GitHub 等）</li><li><code>README.txt</code>（纯文本格式）</li><li><code>README.rst</code>（reStructuredText 格式，常用于 Python 项目）</li></ul><hr><h2 id="2-README-md-文件的基本结构"><a href="#2-README-md-文件的基本结构" class="headerlink" title="2. README.md 文件的基本结构"></a><strong>2. README.md 文件的基本结构</strong></h2><p>Markdown 版本的 <code>README.md</code> 一般包含以下内容：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 项目名称</span></span><br><span class="line">一个简短的项目介绍。</span><br><span class="line"></span><br><span class="line"><span class="section">## 功能</span></span><br><span class="line"><span class="bullet">-</span> 功能 1</span><br><span class="line"><span class="bullet">-</span> 功能 2</span><br><span class="line"><span class="bullet">-</span> 功能 3</span><br><span class="line"></span><br><span class="line"><span class="section">## 安装方法</span></span><br><span class="line"><span class="bullet">1.</span> 克隆项目：</span><br><span class="line">   <span class="code">```bash</span></span><br><span class="line"><span class="code">   git clone https://github.com/yourname/yourproject.git</span></span><br></pre></td></tr></table></figure><ol><li><p>进入项目目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> yourproject</span><br></pre></td></tr></table></figure></li><li><p>安装依赖（示例，具体根据项目而定）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></li></ol><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>运行项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure><h2 id="贡献"><a href="#贡献" class="headerlink" title="贡献"></a>贡献</h2><p>欢迎提交 issue 和 pull request！请阅读 <a href="CONTRIBUTING.md">贡献指南</a>。</p><h2 id="许可证"><a href="#许可证" class="headerlink" title="许可证"></a>许可证</h2><p>本项目遵循 MIT 许可证 - 详情请查看 <code>LICENSE</code> 文件。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 3. 在 Git 仓库中添加 README 文件</span></span><br><span class="line"><span class="comment">### （1）创建 README 文件</span></span><br><span class="line"><span class="string">在终端执行：</span></span><br><span class="line"><span class="string">```bash</span></span><br><span class="line"><span class="string">echo</span> <span class="string">&quot;# 项目名称&quot;</span> <span class="string">&gt;</span> <span class="string">README.md</span></span><br></pre></td></tr></table></figure><p>或者手动创建 <code>README.md</code>，然后编辑内容。</p><h3 id="（2）提交-README-文件到-Git-仓库"><a href="#（2）提交-README-文件到-Git-仓库" class="headerlink" title="（2）提交 README 文件到 Git 仓库"></a><strong>（2）提交 README 文件到 Git 仓库</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add README.md</span><br><span class="line">git commit -m &quot;添加 README 文件&quot;</span><br><span class="line">git push origin main</span><br></pre></td></tr></table></figure><hr><h2 id="4-在-GitHub-创建-README"><a href="#4-在-GitHub-创建-README" class="headerlink" title="4. 在 GitHub 创建 README"></a><strong>4. 在 GitHub 创建 README</strong></h2><p>如果你的 GitHub 仓库还没有 <code>README.md</code>，可以：</p><ol><li>进入 GitHub 仓库页面</li><li>点击 <strong>“Add a README”</strong></li><li>编辑内容并点击 <strong>“Commit new file”</strong></li></ol><hr><h2 id="5-总结-2"><a href="#5-总结-2" class="headerlink" title="5. 总结"></a><strong>5. 总结</strong></h2><ul><li><code>README.md</code> 是项目的重要文档，通常用于介绍项目用途、安装方法和使用方式。</li><li>采用 <strong>Markdown</strong> 格式可以让 README 在 GitHub 显示得更美观。</li><li>在 Git 仓库中，可以手动创建 README，并通过 <code>git add</code>、<code>git commit</code> 提交到远程仓库。</li></ul><p>这样，项目的用户和贡献者可以更方便地了解和使用你的项目！</p><h1 id="二十二git-fetch命令"><a href="#二十二git-fetch命令" class="headerlink" title="二十二git fetch命令"></a>二十二<code>git fetch</code>命令</h1><p><code>git fetch</code> 是一个 <strong>从远程仓库获取最新更改但不合并到本地</strong> 的 Git 命令。它让你在不改变本地代码的情况下，先查看远程仓库的最新状态。</p><hr><h2 id="git-fetch-作用"><a href="#git-fetch-作用" class="headerlink" title="git fetch 作用"></a><code>git fetch</code> 作用</h2><ul><li>获取远程仓库的最新提交信息 <strong>（不会修改本地代码）</strong>。</li><li>允许你检查远程分支是否有更新，但不会自动合并。</li><li>可以在 <code>git log</code> 或 <code>git diff</code> 中对比本地与远程的差异。</li></ul><hr><h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a><strong>使用示例</strong></h2><p><strong>基本用法</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch</span><br></pre></td></tr></table></figure><ul><li>拉取 <strong>所有远程分支</strong> 的最新信息，但不会自动合并。</li><li>你的本地代码不会受到影响，只是更新了远程分支的状态。</li></ul><p><strong>拉取指定远程仓库</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin</span><br></pre></td></tr></table></figure><ul><li>只从 <code>origin</code> 远程仓库拉取最新信息。</li></ul><p><strong>拉取指定分支</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin main</span><br></pre></td></tr></table></figure><ul><li>仅获取 <code>origin/main</code> 分支的最新信息。</li></ul><p><strong>查看本地与远程的差异</strong></p><p>在 <code>git fetch</code> 之后，可以用以下命令检查变更：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log HEAD..origin/main --oneline</span><br></pre></td></tr></table></figure><ul><li>显示本地 <code>HEAD</code> 与远程 <code>main</code> 分支的差异（哪些提交是新的）。</li></ul><p>或者：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff HEAD origin/main</span><br></pre></td></tr></table></figure><ul><li>显示代码的具体变更。</li></ul><p><strong>查看远程分支状态</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote show origin</span><br></pre></td></tr></table></figure><ul><li><p>查看远程仓库的状态，特别是 </p><p>本地分支是否落后于远程分支：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Local branch &#x27;main&#x27; is behind &#x27;origin/main&#x27; by 3 commits.</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git学习（一）</title>
      <link href="/Ryan/git%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/Ryan/git%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="一、git概述"><a href="#一、git概述" class="headerlink" title="一、git概述"></a>一、git概述</h1><p>Git 是一种 <strong>分布式版本控制系统</strong>，最初由 <strong>Linus Torvalds</strong> 开发，用于管理 Linux 内核代码。如今，它被广泛用于各种软件开发项目，以帮助开发者跟踪代码的变更、协作开发，并管理不同版本的代码。</p><h1 id="二、git-的特点"><a href="#二、git-的特点" class="headerlink" title="二、git 的特点"></a>二、<strong>git 的特点</strong></h1><ul><li><strong>分布式</strong>：每个开发者的本地仓库都包含整个项目的完整历史，不依赖于中央服务器。</li><li><strong>高效</strong>：采用快照存储（Snapshot）方式，存储文件的差异，而不是完整的文件副本。</li><li><strong>分支管理</strong>：支持轻量级的分支（Branch），便于团队并行开发和代码合并。</li><li><strong>数据安全</strong>：采用 SHA-1 哈希算法，确保代码的完整性和安全性。</li><li><strong>适应性强</strong>：适用于各种规模的项目，尤其适合开源和团队协作开发。</li></ul><h1 id="三、git-基本概念"><a href="#三、git-基本概念" class="headerlink" title="三、git 基本概念"></a>三、<strong>git 基本概念</strong></h1><table><thead><tr><th>概念</th><th>说明</th></tr></thead><tbody><tr><td>仓库（Repository）</td><td>存储项目文件和历史  版本的地方，可以是本地仓库，也可以是远程仓库（如 GitHub、Gitee）。</td></tr><tr><td>提交（Commit）</td><td>记录项目的一个历史版本，每次提交都会生成一个唯一的哈希值。</td></tr><tr><td>分支（Branch）</td><td>用于并行开发的独立代码线，默认主分支为 <code>main</code> 或 <code>master</code>。</td></tr><tr><td>合并（Merge）</td><td>将不同分支的代码合并到一起。</td></tr><tr><td>暂存区（Staging Area）</td><td>用于存放即将提交的文件，是 Git 的缓冲区域。</td></tr><tr><td>远程仓库（Remote Repository）</td><td>托管在远程服务器上的仓库，如 GitHub、GitLab、Gitee。</td></tr><tr><td>克隆（Clone）</td><td>复制远程仓库到本地。</td></tr><tr><td>拉取（Pull）</td><td>从远程仓库获取最新代码并合并到本地分支。</td></tr><tr><td>推送（Push）</td><td>将本地的提交更新到远程仓库。</td></tr></tbody></table><p>​</p><h1 id="四、git的三种使用"><a href="#四、git的三种使用" class="headerlink" title="四、git的三种使用"></a>四、git的三种使用</h1><p>Git 主要有 <strong>三种使用方式</strong>：<strong>命令行（CLI）、图形化界面（GUI）和 IDE 插件</strong>。不同方式适用于不同用户需求，下面分别介绍它们的特点和使用方法。</p><hr><h2 id="1-命令行（Command-Line-Interface，CLI）"><a href="#1-命令行（Command-Line-Interface，CLI）" class="headerlink" title="1. 命令行（Command Line Interface，CLI）"></a><strong>1. 命令行（Command Line Interface，CLI）</strong></h2><p><strong>适用于：</strong> 熟悉 Git 的开发者、高级用户、服务器环境。<br><strong>特点：</strong></p><ul><li><strong>功能最全</strong>，所有 Git 操作都可以执行。</li><li><strong>高效</strong>，适合习惯使用终端的开发者。</li><li><strong>跨平台</strong>，Windows（Git Bash）、Linux 和 macOS 终端都可以使用。</li></ul><blockquote><p><strong>推荐工具</strong>：Git Bash（Windows）、Linux&#x2F;macOS 终端、PowerShell（Windows）</p></blockquote><h2 id="2-图形化界面（GUI）"><a href="#2-图形化界面（GUI）" class="headerlink" title="2. 图形化界面（GUI）"></a><strong>2. 图形化界面（GUI）</strong></h2><p><strong>适用于：</strong> 初学者、习惯可视化操作的用户。<br><strong>特点：</strong></p><ul><li><strong>更直观</strong>，通过界面查看代码变更、分支管理等。</li><li><strong>适合初学者</strong>，避免记忆大量命令。</li><li><strong>易于管理分支和冲突</strong>，可视化展示合并状态。</li></ul><h3 id="常见的-Git-GUI-客户端"><a href="#常见的-Git-GUI-客户端" class="headerlink" title="常见的 Git GUI 客户端"></a><strong>常见的 Git GUI 客户端</strong></h3><table><thead><tr><th>工具</th><th>适用平台</th><th>特点</th></tr></thead><tbody><tr><td><strong>GitHub Desktop</strong></td><td>Windows&#x2F;macOS</td><td>官方出品，适用于 GitHub 用户</td></tr><tr><td><strong>Sourcetree</strong></td><td>Windows&#x2F;macOS</td><td>适合团队开发，支持 Git 和 Mercurial</td></tr><tr><td><strong>GitKraken</strong></td><td>Windows&#x2F;macOS&#x2F;Linux</td><td>界面友好，支持团队协作</td></tr><tr><td><strong>TortoiseGit</strong></td><td>Windows</td><td>集成到资源管理器，适合 Windows 用户</td></tr></tbody></table><blockquote><p><strong>示例：</strong> 在 GitHub Desktop 中：</p><ol><li><strong>Clone Repository</strong>：克隆远程仓库到本地。</li><li><strong>Commit &amp; Push</strong>：修改代码后，提交并推送到远程仓库。</li><li><strong>Manage Branches</strong>：创建、切换、合并分支。</li></ol></blockquote><h2 id="3-IDE-插件"><a href="#3-IDE-插件" class="headerlink" title="3. IDE 插件"></a><strong>3. IDE 插件</strong></h2><p><strong>适用于：</strong> 开发者，习惯在 IDE 中完成所有工作的人。<br><strong>特点：</strong></p><ul><li><strong>集成度高</strong>，不需要单独打开终端或 GUI 工具。</li><li><strong>适合日常开发</strong>，可以在编码时直接使用 Git。</li><li><strong>自动完成 &amp; 代码管理</strong>，减少手动输入命令。</li></ul><h3 id="常见的-IDE-Git-插件"><a href="#常见的-IDE-Git-插件" class="headerlink" title="常见的 IDE Git 插件"></a><strong>常见的 IDE Git 插件</strong></h3><table><thead><tr><th>IDE</th><th>Git 插件</th></tr></thead><tbody><tr><td><strong>VS Code</strong></td><td>内置 Git 支持（Source Control），可安装 GitLens 增强</td></tr><tr><td><strong>IntelliJ IDEA &#x2F; PyCharm &#x2F; WebStorm</strong></td><td>自带 Git 插件，支持可视化操作</td></tr><tr><td><strong>Eclipse</strong></td><td>EGit（插件）</td></tr><tr><td><strong>Visual Studio</strong></td><td>内置 Git 支持，适用于 C# 开发者</td></tr></tbody></table><blockquote><p><strong>示例：在 VS Code 中使用 Git</strong></p><ol><li><strong>打开 Source Control（Ctrl + Shift + G）</strong></li><li><strong>点击 “+” 添加修改的文件</strong></li><li><strong>输入 Commit Message，点击 “✔” 提交</strong></li><li><strong>点击 “Push” 推送代码</strong></li></ol></blockquote><h1 id="五、git的初始化"><a href="#五、git的初始化" class="headerlink" title="五、git的初始化"></a>五、git的初始化</h1><p>Git 初始化是指在一个目录中创建 Git 仓库，以便对文件进行版本控制。Git 提供了 <code>git init</code> 命令来完成初始化操作。</p><h2 id="1-初始化-Git-仓库"><a href="#1-初始化-Git-仓库" class="headerlink" title="1. 初始化 Git 仓库"></a><strong>1. 初始化 Git 仓库</strong></h2><p>在项目目录下运行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><blockquote><p><strong>作用</strong>：在当前目录创建一个 <code>.git</code> 文件夹，表示该目录已成为 Git 仓库。</p></blockquote><h2 id="2-配置-Git-用户信息（全局-本地）"><a href="#2-配置-Git-用户信息（全局-本地）" class="headerlink" title="2. 配置 Git 用户信息（全局&#x2F;本地）"></a><strong>2. 配置 Git 用户信息（全局&#x2F;本地）</strong></h2><p>在提交代码前，需要配置 Git 用户信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;你的名字&quot;</span><br><span class="line">git config --global user.email &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure><blockquote><p>通过<code>git config</code>命令进行配置用户名和邮箱，这样在提交的时候才能够识别出是谁提交的内容。</p><p>参数：</p><ol><li>省略（local)：本地配置，只对本地仓库有效</li><li><code>--global</code>：全局配置，所有仓库生效</li><li><code>--system</code>：系统配置，对所有用户生效</li></ol><p>“你的名字”：这部分如果用户名中间存在空格，则需要用双引号（英文）括起来；如果没有则可以省略双引号。</p><p><code>git config --global user.name</code> 和 <code>git config --global user.email</code> 只需要在同一台电脑上 <strong>执行一次</strong>，以后就不需要重复执行，除非你想更改用户名或邮箱。</p><p>🔹 <strong><code>--global</code> 配置</strong>：只需执行一次，在同一台电脑的所有 Git 仓库都生效。<br>🔹 <strong><code>--local</code> 配置</strong>：只影响当前 Git 仓库，需要单独配置。<br>🔹 <strong>换电脑或要修改用户名&#x2F;邮箱时</strong>，需要重新执行命令。</p></blockquote><h2 id="3-注意事项！"><a href="#3-注意事项！" class="headerlink" title="3. 注意事项！"></a><strong>3. 注意事项！</strong></h2><p><strong>1. 用户名 (<code>user.name</code>)</strong></p><ul><li>可以是 <strong>任意字符串</strong>，不一定要和 GitHub、Gitee 账户名一致。</li><li>这个名字<strong>不会影响 Git 账户的登录</strong>，只是用于提交记录的显示。</li></ul><p><strong>2. 邮箱 (<code>user.email</code>)</strong></p><ul><li><strong>建议填写和 GitHub&#x2F;Gitee 绑定的邮箱</strong>，否则可能影响远程仓库的提交关联。</li><li>在 Git 提交记录中，邮箱用于识别提交者，并在 GitHub&#x2F;Gitee 上显示贡献（Contributions）。</li></ul><p><strong>3. 是否可以随意填写？</strong></p><p>✅ <strong>本地使用：</strong></p><ul><li><strong>可以随意填写</strong>，因为 Git 只会在提交记录中保存这些信息，并不会验证邮箱的有效性。</li></ul><p>🚨 <strong>推送到 GitHub&#x2F;Gitee 时：</strong></p><ul><li><strong>推荐使用 GitHub&#x2F;Gitee 绑定的邮箱</strong>，否则提交可能不会显示在 GitHub 个人主页的 Contributions 统计中。</li></ul><ol start="4"><li><strong>保存用户名和密码（这样就不用每次都输入了）</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure><p><strong>查看git的配置信息</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global --list</span><br></pre></td></tr></table></figure><h2 id="4-实操"><a href="#4-实操" class="headerlink" title="4. 实操"></a><strong>4. 实操</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name Ryan-Joee</span><br><span class="line">git config --global user.email 3497882088@qq.com</span><br><span class="line">git config --global credential.helper store</span><br><span class="line"></span><br><span class="line">34978@Ryan MINGW64 ~</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global --list</span></span><br><span class="line">user.name=Ryan-Joee</span><br><span class="line">user.email=3497882088@qq.com</span><br><span class="line">credential.helper=store</span><br></pre></td></tr></table></figure><h1 id="六、新建版本库"><a href="#六、新建版本库" class="headerlink" title="六、新建版本库"></a>六、新建版本库</h1><p>版本库又叫<strong>仓库（Repository，简称Repo）</strong>，我们可以将仓库理解为一个<strong>目录</strong>，这个目录里所有的文件都可以被<strong>git</strong>管理起来，每个文件的<strong>修改、删除、添加</strong>等操作，git都能够跟踪到，以便任何时候都可以跟踪历史或者还原到之前的某一个版本。</p><h2 id="1-创建仓库的两种方式"><a href="#1-创建仓库的两种方式" class="headerlink" title="1.创建仓库的两种方式"></a>1.创建仓库的两种方式</h2><p><strong>方式一：在本地新建 Git 仓库</strong>，适用于 <strong>从零开始</strong> 创建一个新的 Git 项目。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init 目录名（可选）</span><br></pre></td></tr></table></figure><p>执行 <code>git init</code> 后，Git 会在该目录下创建一个 <strong><code>.git</code> 目录</strong>，用于存储版本控制信息。</p><p><strong>方式二：从远程仓库克隆已有的 Git 仓库</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone &lt;远程仓库地址&gt;</span><br></pre></td></tr></table></figure><blockquote><p>远程仓库：GitHub、Gitee、GitLab等</p></blockquote><h2 id="2-实操"><a href="#2-实操" class="headerlink" title="2. 实操"></a>2. 实操</h2><p><strong>在本地创建一个仓库</strong></p><ol><li>找到合适的位置（文件夹）创建一个新的git仓库（之后的所有操作都是在该文件夹中执行）。</li></ol><ul><li>Windows系统操作：打开文件管理器，进入到所想要创建为仓库的文件夹中，点击鼠标右键，点击”显示更多选项”，点击”Open Git Bash here”，随后就可以在打开的终端中进行操作了(例如我进入d盘下的Repository文件夹中进行操作)。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">34978@Ryan MINGW64 /d/Repository</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git init</span></span><br><span class="line">Initialized empty Git repository in D:/Repository/.git/</span><br><span class="line"></span><br><span class="line">34978@Ryan MINGW64 /d/Repository (main)</span><br><span class="line"><span class="meta prompt_">$</span></span><br></pre></td></tr></table></figure><blockquote><p>随后可以在文件管理器中的该文件夹下查看到有一个新的隐藏文件夹<code>.git</code>（如果没有，需要打开显示隐藏文件选项）。或者直接在刚才打开的终端中输入<code>ls -al</code>命令即可显示该隐藏文件。</p><p>在命令提示符<code>$</code>前有<code>main</code>或者<code>master</code>则表示已经在仓库。</p><p>如果删除掉该隐藏的文件夹，则相当于删除该仓库。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">git init my-repo(目录名)</span><br><span class="line">34978@Ryan MINGW64 /d/Repository</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git init my-repo</span></span><br><span class="line">Initialized empty Git repository in D:/Repository/my-repo/.git/</span><br><span class="line"></span><br><span class="line">34978@Ryan MINGW64 /d/Repository</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -al</span></span><br><span class="line">total 12</span><br><span class="line">drwxr-xr-x 1 34978 197609 0  2月  1 15:07 ./</span><br><span class="line">drwxr-xr-x 1 34978 197609 0  2月  1 14:49 ../</span><br><span class="line">drwxr-xr-x 1 34978 197609 0  2月  1 15:07 my-repo/</span><br><span class="line"></span><br><span class="line">34978@Ryan MINGW64 /d/Repository</span><br><span class="line"><span class="meta prompt_">$</span></span><br></pre></td></tr></table></figure><blockquote><p>执行这条命令相当于在刚才打开的文件夹下再创建一个叫<code>my-repo</code>的文件夹，并将该文件夹初始化为一个仓库。所以<code>my-repo</code>才是实际的仓库，而不是我们上次进入的文件夹Repository。</p></blockquote><p><strong>从远程仓库克隆一个仓库到本地</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">34978@Ryan MINGW64 /d/Repository</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> https://github.com/git/git.git</span></span><br><span class="line">34978@Ryan MINGW64 /d/Repository</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -al</span></span><br><span class="line">total 204</span><br><span class="line">drwxr-xr-x 1 34978 197609 0  2月  1 15:48 ./</span><br><span class="line">drwxr-xr-x 1 34978 197609 0  2月  1 14:49 ../</span><br><span class="line">drwxr-xr-x 1 34978 197609 0  2月  1 15:49 git/</span><br><span class="line">drwxr-xr-x 1 34978 197609 0  2月  1 15:07 my-repo/</span><br><span class="line"></span><br><span class="line">34978@Ryan MINGW64 /d/Repository</span><br><span class="line"><span class="meta prompt_">$</span></span><br></pre></td></tr></table></figure><h1 id="七、Git的工作区域和文件状态"><a href="#七、Git的工作区域和文件状态" class="headerlink" title="七、Git的工作区域和文件状态"></a>七、Git的工作区域和文件状态</h1><h2 id="1-Git-的三个工作区域"><a href="#1-Git-的三个工作区域" class="headerlink" title="1. Git 的三个工作区域"></a><strong>1. Git 的三个工作区域</strong></h2><p>Git 版本控制涉及 <strong>三个不同的区域</strong>：</p><ol><li><strong>工作区（Working Directory）</strong><ul><li>你的本地目录&#x2F;工作目录，存放所有文件。我们能在文件资源管理器中看到的目录就是工作目录，工作区就是我们实际操作的目录。</li><li><strong>修改文件</strong>后，文件仍然在工作区。</li></ul></li><li><strong>暂存区（Stage&#x2F;Index）</strong><ul><li>是一种临时存储区域，用于保存即将提交到Git仓库的修改内容。通过 <code>git add</code> 命令把修改的文件添加到 <strong>暂存区</strong>。</li><li>Git 记录哪些文件将进入下次提交。</li></ul></li><li><strong>本地仓库（Local Repository）</strong><ul><li>实际上就是通过<code>git init</code>命令来创建的仓库。它包含了完整的项目历史和元数据，是Git存储代码和版本信息的主要位置。通过 <code>git commit</code> 提交文件后，文件被存入 <strong>本地仓库</strong>（<code>.git</code> 目录）。</li><li>本地仓库存储所有历史版本，并形成版本快照。</li></ul></li><li><strong>（可选）远程仓库（Remote Repository）</strong><ul><li>通过 <code>git push</code>，可以将本地提交的内容推送到 <strong>远程仓库</strong>（如 GitHub、Gitee）。</li><li>远程仓库一般用于团队协作或备份。</li></ul></li></ol><p><strong>示意图：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">编辑工作区  →  暂存区  →  本地仓库  →  远程仓库</span><br><span class="line">（修改）   （git add）  （git commit）  （git push）</span><br></pre></td></tr></table></figure><blockquote><p>我们可以先将需要提交的文件暂存到暂存区中，最后一次性将所有文件提交到本地仓库。</p></blockquote><h2 id="2-Git-的四种文件状态"><a href="#2-Git-的四种文件状态" class="headerlink" title="2. Git 的四种文件状态"></a><strong>2. Git 的四种文件状态</strong></h2><p>Git 中的文件通常处于以下 <strong>四种状态</strong>：</p><table><thead><tr><th><strong>文件状态</strong></th><th><strong>描述</strong></th><th><strong>命令</strong></th></tr></thead><tbody><tr><td><strong>未跟踪（Untracked）</strong></td><td>文件新建但未添加到 Git 版本控制</td><td><code>git add</code></td></tr><tr><td><strong>已暂存（Staged）</strong></td><td>通过 <code>git add</code> 添加到暂存区，等待提交</td><td><code>git commit</code></td></tr><tr><td><strong>已提交（Committed）</strong></td><td>通过 <code>git commit</code> 提交到本地仓库</td><td><code>git push</code></td></tr><tr><td><strong>已修改（Modified）</strong></td><td>文件被修改但未 <code>git add</code></td><td><code>git add</code> 或 <code>git checkout -- &lt;file&gt;</code></td></tr></tbody></table><p><strong>文件状态流转示意图：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">未跟踪（Untracked） → 已暂存（Staged） → 已提交（Committed）</span><br><span class="line">  ↑（git add）           ↑（git commit）  </span><br><span class="line">  ↓（修改文件）          ↓（修改文件）</span><br><span class="line">已修改（Modified）     （再次进入 Modified 状态）</span><br></pre></td></tr></table></figure><h1 id="八、添加和提交文件"><a href="#八、添加和提交文件" class="headerlink" title="八、添加和提交文件"></a>八、添加和提交文件</h1><h2 id="1-git-status查看仓库的状态"><a href="#1-git-status查看仓库的状态" class="headerlink" title="1. git status查看仓库的状态"></a>1. <code>git status</code>查看仓库的状态</h2><p><code>git status</code> 命令用于查看 <strong>当前 Git 仓库的状态</strong>，包括：</p><ul><li><strong>文件的跟踪状态</strong>（已提交、已修改、已暂存、未跟踪等）。</li><li><strong>当前分支信息</strong>（是否有未提交的更改、是否与远程分支同步）。</li><li><strong>是否有需要提交的变更</strong>。</li></ul><h2 id="2-git-add（添加到暂存区）"><a href="#2-git-add（添加到暂存区）" class="headerlink" title="2. git add（添加到暂存区）"></a>2. <code>git add</code>（添加到暂存区）</h2><p><code>git add</code> 命令用于 <strong>将修改的文件添加到暂存区（Staging Area）</strong>，准备提交。它不会立即创建提交记录，而是让 Git 记录哪些更改需要被提交。</p><p><strong>常见用法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;文件名&gt;   # 添加单个文件到暂存区</span><br><span class="line">git add .          # 添加当前目录下的所有文件到暂存区</span><br><span class="line">git add -A         # 添加所有修改（包括删除、新增、修改）</span><br><span class="line">git add &quot;*.txt&quot;    # 添加所有 .txt 文件</span><br></pre></td></tr></table></figure><h3 id="git-add使用通配符来添加文件到暂存区"><a href="#git-add使用通配符来添加文件到暂存区" class="headerlink" title="git add使用通配符来添加文件到暂存区"></a><code>git add</code>使用通配符来添加文件到暂存区</h3><p><strong>1. 常见通配符用法</strong></p><table><thead><tr><th><strong>通配符</strong></th><th><strong>作用</strong></th><th><strong>示例</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><code>*</code></td><td>匹配<strong>任意数量的字符</strong>（包括空字符）</td><td><code>git add *.txt</code></td><td>添加当前目录下所有 <code>.txt</code> 文件</td></tr><tr><td><code>?</code></td><td>匹配<strong>任意单个字符</strong></td><td><code>git add file?.txt</code></td><td>添加 <code>file1.txt</code>、<code>fileA.txt</code> 等</td></tr><tr><td><code>[abc]</code></td><td>匹配<strong>括号内的任意一个字符</strong></td><td><code>git add file[12].txt</code></td><td>添加 <code>file1.txt</code>、<code>file2.txt</code>，但不包括 <code>file3.txt</code></td></tr><tr><td><code>[a-z]</code></td><td>匹配<strong>指定范围内的字符</strong></td><td><code>git add file[a-z].txt</code></td><td>添加 <code>filea.txt</code> 到 <code>filez.txt</code></td></tr><tr><td><code>**</code></td><td>递归匹配<strong>所有子目录</strong>（Git 2.0+）</td><td><code>git add **/*.txt</code></td><td>添加所有子目录中的 <code>.txt</code> 文件</td></tr></tbody></table><h2 id="3-git-commit（提交到本地仓库）"><a href="#3-git-commit（提交到本地仓库）" class="headerlink" title="3.  git commit（提交到本地仓库）"></a>3.  <code>git commit</code>（提交到本地仓库）</h2><p><code>git commit</code> 命令用于 <strong>将暂存区的内容提交到本地仓库</strong>，并生成新的提交记录。提交时，通常需要添加一条描述本次提交的 <strong>提交信息（commit message）</strong>，以便回溯。</p><p><strong>常见用法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git commit # 通过这个命令提交文件，则会默认进入一个交互界面，通常默认是vim。然后通过vim操作在交互界面第一行写下描述信息。</span><br><span class="line">git commit -m &quot;提交信息&quot;  # 提交暂存区的文件，并添加描述信息</span><br><span class="line">git commit -a -m &quot;提交信息&quot;  # 跳过 add，直接提交已修改的文件（但不包括新建文件）</span><br><span class="line">git commit --amend -m &quot;修改提交信息&quot;  # 修改最近一次提交的信息</span><br></pre></td></tr></table></figure><h2 id="4-git-log查看提交记录"><a href="#4-git-log查看提交记录" class="headerlink" title="4. git log查看提交记录"></a>4. <code>git log</code>查看提交记录</h2><p><code>git log</code> 是 Git 中用于查看<strong>提交历史记录</strong>的命令。它可以显示每次提交的 <strong>提交哈希值（commit ID）</strong>、<strong>作者信息</strong>、<strong>提交时间</strong> 和 <strong>提交信息</strong>，帮助开发者追踪代码的变更历史。</p><h3 id="1-退出-git-log"><a href="#1-退出-git-log" class="headerlink" title="1. 退出 git log"></a><strong>1. 退出 <code>git log</code></strong></h3><p>当 <code>git log</code> 显示内容太多时，会进入 <strong>分页模式</strong>（类似 <code>less</code> 命令），你可以：</p><ul><li><strong>按 <code>q</code> 退出</strong> 查看历史模式</li><li><strong>按 <code>↑</code> 或 <code>↓</code></strong> 翻页</li><li><strong>按 <code>space</code></strong> 向下翻页</li></ul><h3 id="2-常见选项"><a href="#2-常见选项" class="headerlink" title="2. 常见选项"></a><strong>2. 常见选项</strong></h3><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td><code>--oneline</code></td><td>以<strong>单行</strong>显示每个提交记录（简洁模式）</td></tr><tr><td><code>--graph</code></td><td>以<strong>图形化方式</strong>展示分支合并情况</td></tr><tr><td><code>--all</code></td><td>显示所有分支的提交记录</td></tr><tr><td><code>--author=&quot;用户名&quot;</code></td><td>仅显示某个作者的提交记录</td></tr><tr><td><code>--since=&quot;3 days ago&quot;</code></td><td>仅显示最近 3 天的提交</td></tr><tr><td><code>--until=&quot;2025-01-01&quot;</code></td><td>仅显示 2025 年 1 月 1 日前的提交</td></tr><tr><td><code>--grep=&quot;关键字&quot;</code></td><td>仅显示<strong>提交信息</strong>包含指定关键字的提交</td></tr><tr><td><code>-p</code></td><td>显示每次提交的详细修改内容</td></tr><tr><td><code>-n &lt;数量&gt;</code></td><td>仅显示最近的 <code>n</code> 条提交记录</td></tr></tbody></table><h2 id="5-实操"><a href="#5-实操" class="headerlink" title="5. 实操"></a>5. 实操</h2><p>（1）在没创建任何文件时使用<code>git status</code>命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">34978@Ryan MINGW64 /d/Repository/my-repo (main)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status</span></span><br><span class="line">On branch main</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">nothing to commit (create/copy files and use &quot;git add&quot; to track)</span><br><span class="line"></span><br><span class="line">34978@Ryan MINGW64 /d/Repository/my-repo (main)</span><br><span class="line"><span class="meta prompt_">$</span></span><br></pre></td></tr></table></figure><p>（2）按照你喜欢的方式在该仓库下创建一个新的文件，随后查看git仓库状态。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">34978@Ryan MINGW64 /d/Repository/my-repo (main)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vim file1.txt</span></span><br><span class="line">34978@Ryan MINGW64 /d/Repository/my-repo (main)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status</span></span><br><span class="line">On branch main</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line">        file1.txt</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use &quot;git add&quot; to track)</span><br><span class="line"></span><br><span class="line">34978@Ryan MINGW64 /d/Repository/my-repo (main)</span><br><span class="line"><span class="meta prompt_">$</span></span><br></pre></td></tr></table></figure><blockquote><p>可以在显示信息中发现多了一个Untracked files未被跟踪的文件file1.txt。</p></blockquote><p>（3）使用<code>git add</code>命令将未被跟踪的文件添加到暂存区，随后查看git仓库状态。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">34978@Ryan MINGW64 /d/Repository/my-repo (main)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add file1.txt</span></span><br><span class="line"></span><br><span class="line">34978@Ryan MINGW64 /d/Repository/my-repo (main)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status</span></span><br><span class="line">On branch main</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage)</span><br><span class="line">        new file:   file1.txt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">34978@Ryan MINGW64 /d/Repository/my-repo (main)</span><br><span class="line"><span class="meta prompt_">$</span></span><br></pre></td></tr></table></figure><blockquote><p>仓库状态显示<code>Changes to be committed:</code>表示暂存区有文件已经修改了，但是没有提交，等待被提交。</p><p>同时提示：<code>use &quot;git rm --cached &lt;file&gt;...&quot; to unstage</code>，表示可以使用这个命令来将把添加到暂存区的文件再取消暂存。</p></blockquote><p>（4）使用<code>git commit -m &quot;提交文件描述信息&quot;</code>命令来将暂存区的文件提交到仓库中，随后查看git仓库状态。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">34978@Ryan MINGW64 /d/Repository/my-repo (main)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -m <span class="string">&quot;第一次提交&quot;</span></span></span><br><span class="line">[main (root-commit) 67c8758] 第一次提交</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 file1.txt</span><br><span class="line"></span><br><span class="line">34978@Ryan MINGW64 /d/Repository/my-repo (main)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status</span></span><br><span class="line">On branch main</span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line"></span><br><span class="line">34978@Ryan MINGW64 /d/Repository/my-repo (main)</span><br><span class="line"><span class="meta prompt_">$</span></span><br></pre></td></tr></table></figure><blockquote><p><code>git commit</code>命令只会将<strong>暂存区中的文件</strong>提交到仓库中。</p></blockquote><p>（5）在仓库下多创建几个文件，然后通过使用通配符的方式来添加文件到暂存区。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">34978@Ryan MINGW64 /d/Repository/my-repo (main)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status</span></span><br><span class="line">On branch main</span><br><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line">        file2.txt</span><br><span class="line">        file3.txt</span><br><span class="line">        file4.txt</span><br><span class="line">        file5.java</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use &quot;git add&quot; to track)</span><br><span class="line"></span><br><span class="line">34978@Ryan MINGW64 /d/Repository/my-repo (main)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add *.txt</span></span><br><span class="line"></span><br><span class="line">34978@Ryan MINGW64 /d/Repository/my-repo (main)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status</span></span><br><span class="line">On branch main</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)</span><br><span class="line">        new file:   file2.txt</span><br><span class="line">        new file:   file3.txt</span><br><span class="line">        new file:   file4.txt</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line">        file5.java</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">34978@Ryan MINGW64 /d/Repository/my-repo (main)</span><br><span class="line"><span class="meta prompt_">$</span></span><br></pre></td></tr></table></figure><blockquote><p>可以看到通过执行<code>git add *.txt</code>指令，所有以<code>.txt</code>结尾的文件都有添加到暂存区，而以<code>.java</code>结尾的文件则没有。</p></blockquote><p>（5）通过<code>git add .</code>指令将当前目录下的所有文件添加到暂存区。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">34978@Ryan MINGW64 /d/Repository/my-repo (main)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add .</span></span><br><span class="line"></span><br><span class="line">34978@Ryan MINGW64 /d/Repository/my-repo (main)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status</span></span><br><span class="line">On branch main</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)</span><br><span class="line">        new file:   file2.txt</span><br><span class="line">        new file:   file3.txt</span><br><span class="line">        new file:   file4.txt</span><br><span class="line">        new file:   file5.java</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">34978@Ryan MINGW64 /d/Repository/my-repo (main)</span><br><span class="line"><span class="meta prompt_">$</span></span><br></pre></td></tr></table></figure><p>（6）通过<code>git commit</code>指令提交暂存区的文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">34978@Ryan MINGW64 /d/Repository/my-repo (main)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit</span></span><br><span class="line">[main 060e8d1] 第二次提交</span><br><span class="line"> 4 files changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 file2.txt</span><br><span class="line"> create mode 100644 file3.txt</span><br><span class="line"> create mode 100644 file4.txt</span><br><span class="line"> create mode 100644 file5.java</span><br><span class="line"></span><br><span class="line">34978@Ryan MINGW64 /d/Repository/my-repo (main)</span><br><span class="line"><span class="meta prompt_">$</span></span><br></pre></td></tr></table></figure><p>（7）使用<code>git log</code>查看提交记录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">34978@Ryan MINGW64 /d/Repository/my-repo (main)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span></span></span><br><span class="line">commit 060e8d127592127f32c759acc7f7b178503d486a (HEAD -&gt; main)</span><br><span class="line">Author: Ryan-Joee &lt;3497882088@qq.com&gt;</span><br><span class="line">Date:   Sat Feb 1 16:56:55 2025 +0800</span><br><span class="line"></span><br><span class="line">    第二次提交</span><br><span class="line"></span><br><span class="line">commit 67c8758d088254c83884364450879f27812b9e36</span><br><span class="line">Author: Ryan-Joee &lt;3497882088@qq.com&gt;</span><br><span class="line">Date:   Sat Feb 1 16:41:46 2025 +0800</span><br><span class="line"></span><br><span class="line">    第一次提交</span><br><span class="line"></span><br><span class="line">34978@Ryan MINGW64 /d/Repository/my-repo (main)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span> -1</span></span><br><span class="line">commit 060e8d127592127f32c759acc7f7b178503d486a (HEAD -&gt; main)</span><br><span class="line">Author: Ryan-Joee &lt;3497882088@qq.com&gt;</span><br><span class="line">Date:   Sat Feb 1 16:56:55 2025 +0800</span><br><span class="line"></span><br><span class="line">    第二次提交</span><br><span class="line"></span><br><span class="line">34978@Ryan MINGW64 /d/Repository/my-repo (main)</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"></span></span><br></pre></td></tr></table></figure><h1 id="九、git-reset回退版本"><a href="#九、git-reset回退版本" class="headerlink" title="九、git reset回退版本"></a>九、<code>git reset</code>回退版本</h1><p><code>git reset</code> 是 Git 中用于 <strong>回退提交或撤销修改</strong> 的命令，常用于：</p><ul><li>取消已经提交的更改</li><li>将提交回退到某个历史版本</li><li>取消 <code>git add</code> 但不影响工作区文件</li></ul><h2 id="1-git-reset-的三种模式"><a href="#1-git-reset-的三种模式" class="headerlink" title="1. git reset 的三种模式"></a><strong>1. <code>git reset</code> 的三种模式</strong></h2><p><code>git reset</code> 主要有 <strong>soft（软重置）、mixed（默认）、hard（硬重置）</strong> 三种模式，影响的范围不同：</p><table><thead><tr><th>模式</th><th>作用</th><th>影响 <strong>HEAD 指针</strong></th><th>影响 <strong>暂存区（index）</strong></th><th>影响 <strong>工作区（working directory）</strong></th></tr></thead><tbody><tr><td><code>--soft</code></td><td><strong>回退提交</strong>，但保留暂存区和工作区的修改</td><td>✅ 移动</td><td>❌ 不变</td><td>❌ 不变</td></tr><tr><td><code>--mixed</code>（默认）</td><td><strong>回退提交</strong>，清空暂存区，但保留工作区的修改</td><td>✅ 移动</td><td>✅ 清空</td><td>❌ 不变</td></tr><tr><td><code>--hard</code></td><td><strong>彻底回退提交</strong>，并丢弃所有修改</td><td>✅ 移动</td><td>✅ 清空</td><td>✅ 丢弃</td></tr></tbody></table><h2 id="2-常见用法"><a href="#2-常见用法" class="headerlink" title="2. 常见用法"></a><strong>2. 常见用法</strong></h2><p><strong>（1）撤销最近一次提交（保留代码）</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --soft HEAD~1</span><br></pre></td></tr></table></figure><p><strong>作用：</strong></p><ul><li>仅撤销最近的一次提交（<code>HEAD~1</code> 指的是上一个提交）</li><li>代码仍然保留在暂存区，可以重新提交</li></ul><p><strong>适用于</strong>：</p><ul><li>提交信息写错了，想重新提交</li><li>误提交但代码还需要</li></ul><p><strong>（2）撤销最近一次提交（保留代码，但取消 <code>git add</code>）</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --mixed HEAD~1</span><br></pre></td></tr></table></figure><p><strong>作用：</strong></p><ul><li>撤销最近的一次提交</li><li><strong>暂存区清空</strong>（<code>git add</code> 过的文件回到未追踪状态）</li><li><strong>工作区保留代码</strong>，可以重新 <code>git add</code> 后再提交</li></ul><p><strong>适用于</strong>：</p><ul><li>误提交，但想重新组织代码再提交</li></ul><hr><h3 id="（3）彻底回退（删除提交-代码）"><a href="#（3）彻底回退（删除提交-代码）" class="headerlink" title="（3）彻底回退（删除提交 &amp; 代码）"></a><strong>（3）彻底回退（删除提交 &amp; 代码）</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD~1</span><br></pre></td></tr></table></figure><p><strong>作用：</strong></p><ul><li><strong>撤销最近的一次提交</strong></li><li><strong>暂存区清空</strong></li><li><strong>工作区代码也恢复到上次提交的状态</strong>（所有未提交的更改都会丢失！）</li></ul><p>⚠ <strong>谨慎使用</strong>，尤其是团队协作时，<code>--hard</code> 可能导致代码丢失。</p><p><strong>适用于</strong>：</p><ul><li>彻底撤销提交，并恢复原始代码状态</li><li>想回到之前的某个稳定版本</li></ul><p><strong>（4）回退到指定提交</strong></p><p>如果想回退到某个特定提交（不是最近的提交），需要使用<strong>提交哈希值</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git reset --soft &lt;commit-id&gt;</span><br><span class="line">git reset --mixed &lt;commit-id&gt;</span><br><span class="line">git reset --hard &lt;commit-id&gt;</span><br></pre></td></tr></table></figure><blockquote><p>查看<strong>提交哈希值</strong>：<code>git log --oneline</code></p></blockquote><p><strong>示例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard e6f9b7b</span><br></pre></td></tr></table></figure><blockquote><p>这将回退到 <code>e6f9b7b</code> 这个提交，并丢弃之后的所有提交和修改。</p></blockquote><p><strong>（5）取消 <code>git add</code></strong></p><p>如果你使用 <code>git add</code> 添加了文件，但还未 <code>git commit</code>，可以用 <code>git reset</code> 取消：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset &lt;文件名&gt;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add hello.txt  # 先添加文件</span><br><span class="line">git reset hello.txt  # 取消暂存，但文件内容不变</span><br></pre></td></tr></table></figure><blockquote><p>适用于误 <code>git add</code> 某个文件，不想让它进入暂存区。</p></blockquote><p><code>HEAD~1</code> 这种表示法在 Git 中是有<strong>特定含义</strong>的，它是 Git 的<strong>提交历史引用语法（commit reference syntax）</strong>的一部分，不能随意取名。</p><h2 id="3-HEAD-1-的含义"><a href="#3-HEAD-1-的含义" class="headerlink" title="3. HEAD~1 的含义"></a><strong>3. <code>HEAD~1</code> 的含义</strong></h2><p><code>HEAD~1</code> 表示 <strong>当前提交（HEAD）之前的第 1 个提交</strong>，即上一个提交。</p><ul><li><code>HEAD</code> 指向当前分支的最新提交（当前的 <code>commit</code>）。</li><li><code>~1</code> 表示向上回退 1 个提交（等价于 <code>HEAD^</code>）。</li></ul><p><strong>示例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --soft HEAD~1</span><br></pre></td></tr></table></figure><p>相当于回到上一次提交，但<strong>保留工作区和暂存区的修改</strong>。</p><h3 id="1-HEAD-N-的用法"><a href="#1-HEAD-N-的用法" class="headerlink" title="(1) HEAD~N 的用法"></a><strong>(1) <code>HEAD~N</code> 的用法</strong></h3><table><thead><tr><th>语法</th><th>含义</th></tr></thead><tbody><tr><td><code>HEAD</code></td><td>当前分支的最新提交</td></tr><tr><td><code>HEAD~1</code></td><td>上一个提交</td></tr><tr><td><code>HEAD~2</code></td><td>上上个提交</td></tr><tr><td><code>HEAD~3</code></td><td>上上上个提交</td></tr><tr><td><code>HEAD~N</code></td><td>向上回退 <code>N</code> 个提交</td></tr></tbody></table><p><strong>示例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD~3  # 回退到 3 个提交前的状态</span><br></pre></td></tr></table></figure><blockquote><p><code>HEAD~N</code> <strong>只沿着当前分支向后回退</strong>，适用于线性提交的情况。</p></blockquote><h3 id="2-HEAD-与-HEAD-的区别"><a href="#2-HEAD-与-HEAD-的区别" class="headerlink" title="(2)HEAD^ 与 HEAD~ 的区别"></a><strong>(2)<code>HEAD^</code> 与 <code>HEAD~</code> 的区别</strong></h3><p>除了 <code>HEAD~N</code>，Git 还有 <code>HEAD^N</code> 这样的语法：</p><table><thead><tr><th>语法</th><th>含义</th></tr></thead><tbody><tr><td><code>HEAD^</code></td><td>上一个提交（等价于 <code>HEAD~1</code>）</td></tr><tr><td><code>HEAD^2</code></td><td><strong>如果是合并提交</strong>，表示第二个父提交</td></tr><tr><td><code>HEAD^N</code></td><td>合并提交的第 <code>N</code> 个父提交</td></tr><tr><td><code>HEAD~N</code></td><td><strong>沿着当前分支的主线向上回退 <code>N</code> 次</strong></td></tr></tbody></table><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^  # 回退到上一个提交（等价于 HEAD~1）</span><br><span class="line">git reset --hard HEAD^2 # 回退到合并提交的第二个父提交</span><br></pre></td></tr></table></figure><blockquote><p><code>HEAD^N</code> 主要用于<strong>合并提交</strong>的情况下，而 <code>HEAD~N</code> 适用于普通提交。</p></blockquote><h3 id="3-结论"><a href="#3-结论" class="headerlink" title="(3)结论"></a><strong>(3)结论</strong></h3><ul><li><code>HEAD~N</code> 表示回退 <code>N</code> 次提交，<strong>适用于线性提交</strong>。</li><li><code>HEAD^N</code> 适用于<strong>合并提交</strong>，可以指定第 <code>N</code> 个父提交。</li></ul><h1 id="十、git-reflog-概述"><a href="#十、git-reflog-概述" class="headerlink" title="十、git reflog 概述"></a><strong>十、<code>git reflog</code> 概述</strong></h1><p><code>git reflog</code>（Reference Log，引用日志）是 Git 提供的一个<strong>记录 HEAD 变更历史</strong>的命令，它可以用于<strong>恢复误操作</strong>（如 <code>git reset --hard</code>、<code>git checkout</code> 等），帮助找回丢失的提交。</p><hr><h2 id="1-git-reflog-作用"><a href="#1-git-reflog-作用" class="headerlink" title="1. git reflog 作用"></a><strong>1. <code>git reflog</code> 作用</strong></h2><p>当 <code>HEAD</code>（当前提交指针）发生变更时（如 <code>commit</code>、<code>reset</code>、<code>checkout</code> 等操作），Git 会自动记录这些变更历史。<br>使用 <code>git reflog</code>，可以查看 <code>HEAD</code> 过去指向过哪些提交，甚至恢复被 <code>git reset --hard</code> 删除的提交。</p><hr><h2 id="2-git-reflog-基本用法"><a href="#2-git-reflog-基本用法" class="headerlink" title="2. git reflog 基本用法"></a><strong>2. <code>git reflog</code> 基本用法</strong></h2><h3 id="（1）查看-HEAD-变更历史"><a href="#（1）查看-HEAD-变更历史" class="headerlink" title="（1）查看 HEAD 变更历史"></a><strong>（1）查看 HEAD 变更历史</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure><p><strong>示例输出：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">e6f9b7b (HEAD -&gt; main) HEAD@&#123;0&#125;: commit: 修复了登录 Bug</span><br><span class="line">5c3e2a0 HEAD@&#123;1&#125;: reset: moving to HEAD~1</span><br><span class="line">a1b2c3d HEAD@&#123;2&#125;: checkout: moving from dev to main</span><br><span class="line">9a8b7c6 HEAD@&#123;3&#125;: commit: 添加了新功能</span><br><span class="line">f4e5d6a HEAD@&#123;4&#125;: commit: 修改了 API</span><br></pre></td></tr></table></figure><p><strong>解释：</strong></p><ul><li><code>HEAD@&#123;0&#125;</code> 代表当前 HEAD 位置</li><li><code>HEAD@&#123;1&#125;</code> 是上一次 <code>HEAD</code> 变更的位置</li><li><code>HEAD@&#123;2&#125;</code> 是更早的 <code>HEAD</code> 位置</li><li>每条记录后面是 <code>commit ID</code> 和对应的操作</li></ul><hr><h2 id="3-git-reflog-结合-git-reset"><a href="#3-git-reflog-结合-git-reset" class="headerlink" title="3. git reflog 结合 git reset"></a><strong>3. <code>git reflog</code> 结合 <code>git reset</code></strong></h2><p>如果误用了 <code>git reset --hard</code>，想找回丢失的提交：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br><span class="line">git reset --hard HEAD@&#123;1&#125;  # 恢复到上一个 HEAD 位置</span><br><span class="line">git reset --hard 提交哈希值 # 恢复到指定的提交哈希值的版本</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD@&#123;4&#125;</span><br></pre></td></tr></table></figure><p>这样就可以恢复到 <code>HEAD@&#123;4&#125;</code> 记录的提交。</p><hr><h2 id="4-git-reflog-结合-git-checkout"><a href="#4-git-reflog-结合-git-checkout" class="headerlink" title="4. git reflog 结合 git checkout"></a><strong>4. <code>git reflog</code> 结合 <code>git checkout</code></strong></h2><p>如果切换了分支导致某个提交找不到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br><span class="line">git checkout &lt;commit-id&gt;</span><br></pre></td></tr></table></figure><p>可以使用 <code>commit-id</code> 切回该提交，并创建新分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch recover-branch &lt;commit-id&gt;</span><br><span class="line">git checkout recover-branch</span><br></pre></td></tr></table></figure><hr><h2 id="5-git-log-vs-git-reflog"><a href="#5-git-log-vs-git-reflog" class="headerlink" title="5. git log vs git reflog"></a><strong>5. <code>git log</code> vs <code>git reflog</code></strong></h2><table><thead><tr><th>命令</th><th>作用</th><th>记录对象</th><th>适用于恢复误删提交</th></tr></thead><tbody><tr><td><code>git log</code></td><td>查看提交历史</td><td>仅记录提交</td><td>❌ 不能恢复 <code>git reset --hard</code></td></tr><tr><td><code>git reflog</code></td><td>记录 HEAD 变更</td><td>记录所有 HEAD 变更</td><td>✅ 可以恢复 <code>git reset --hard</code></td></tr></tbody></table><hr><h2 id="6-结论"><a href="#6-结论" class="headerlink" title="6. 结论"></a><strong>6. 结论</strong></h2><ul><li><code>git reflog</code> 记录 <code>HEAD</code> 变更历史，适用于<strong>找回丢失的提交</strong>。</li><li>结合 <code>git reset --hard HEAD@&#123;N&#125;</code>，可以恢复误删的提交。</li><li><code>git reflog</code> <strong>不会被推送到远程</strong>，仅在本地有效。</li></ul><h1 id="十一、git-diff查看差异"><a href="#十一、git-diff查看差异" class="headerlink" title="十一、git diff查看差异"></a>十一、<code>git diff</code>查看差异</h1><p><code>git diff</code> 是 Git 中用于<strong>比较不同版本之间代码变更</strong>的命令，适用于<strong>查看未提交的修改、暂存区与最新提交的差异</strong>，以及<strong>不同分支或提交之间的差异</strong>。</p><ol><li>查看工作区、暂存区、本地仓库之间的差异</li><li>查看不同版本之间的差异</li><li>查看不同分支之间的差异</li></ol><h2 id="1-git-diff-基本用法"><a href="#1-git-diff-基本用法" class="headerlink" title="1. git diff 基本用法"></a><strong>1. <code>git diff</code> 基本用法</strong></h2><h3 id="（1）查看工作区未暂存的修改"><a href="#（1）查看工作区未暂存的修改" class="headerlink" title="（1）查看工作区未暂存的修改"></a><strong>（1）查看工作区未暂存的修改</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure><ul><li>比较 <strong>工作区</strong> 和 <strong>暂存区</strong> 的差异（即还未 <code>git add</code> 的修改）。</li><li><strong>适用于</strong> 查看哪些文件修改了但还未添加到暂存区。</li></ul><hr><h3 id="（2）查看暂存区和最近一次提交的差异"><a href="#（2）查看暂存区和最近一次提交的差异" class="headerlink" title="（2）查看暂存区和最近一次提交的差异"></a><strong>（2）查看暂存区和最近一次提交的差异</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff --cached</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff --staged</span><br></pre></td></tr></table></figure><ul><li><strong>比较暂存区</strong> 和 <strong>最近一次提交（HEAD）</strong> 的差异。</li><li>适用于检查 <code>git add</code> 之后但还未 <code>git commit</code> 的修改。</li></ul><hr><h3 id="（3）查看工作区和最近一次提交的所有差异"><a href="#（3）查看工作区和最近一次提交的所有差异" class="headerlink" title="（3）查看工作区和最近一次提交的所有差异"></a><strong>（3）查看工作区和最近一次提交的所有差异</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff HEAD</span><br></pre></td></tr></table></figure><ul><li>显示 <strong>工作区</strong> 和 <strong>最近一次提交（HEAD）</strong> 之间的修改（包括已 <code>git add</code> 和未 <code>git add</code> 的文件）。</li><li>适用于全面检查所有未提交的更改。</li></ul><hr><h3 id="（4）查看两个分支的差异"><a href="#（4）查看两个分支的差异" class="headerlink" title="（4）查看两个分支的差异"></a><strong>（4）查看两个分支的差异</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff main dev</span><br></pre></td></tr></table></figure><ul><li>比较 <code>main</code> 分支和 <code>dev</code> 分支的代码差异。</li><li>适用于检查不同分支之间有哪些修改。</li></ul><hr><h3 id="（5）查看两个提交的差异"><a href="#（5）查看两个提交的差异" class="headerlink" title="（5）查看两个提交的差异"></a><strong>（5）查看两个提交的差异</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff &lt;commit1&gt; &lt;commit2&gt;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff a1b2c3d e6f9b7b</span><br></pre></td></tr></table></figure><ul><li>比较 <code>a1b2c3d</code> 和 <code>e6f9b7b</code> 这两个提交之间的代码变更。</li></ul><hr><h3 id="（6）查看指定文件的差异"><a href="#（6）查看指定文件的差异" class="headerlink" title="（6）查看指定文件的差异"></a><strong>（6）查看指定文件的差异</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff &lt;文件名&gt;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff index.html</span><br></pre></td></tr></table></figure><ul><li>仅查看 <code>index.html</code> 文件的修改情况。</li></ul><hr><h3 id="（7）查看某个提交的具体改动"><a href="#（7）查看某个提交的具体改动" class="headerlink" title="（7）查看某个提交的具体改动"></a><strong>（7）查看某个提交的具体改动</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff &lt;commit-id&gt;^ &lt;commit-id&gt;</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git show &lt;commit-id&gt;</span><br></pre></td></tr></table></figure><ul><li><code>commit-id^</code> 代表 <code>commit-id</code> 的前一个提交。</li><li>适用于查看某个 <code>commit</code> 做了哪些修改。</li></ul><p><strong>示例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff e6f9b7b^ e6f9b7b</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git show e6f9b7b</span><br></pre></td></tr></table></figure><h1 id="十二、从版本库中删除文件"><a href="#十二、从版本库中删除文件" class="headerlink" title="十二、从版本库中删除文件"></a>十二、从版本库中删除文件</h1><p>在 Git 版本库中删除文件时，可以选择**仅删除 Git 追踪（保留本地文件）**或**彻底删除文件（工作区和版本库都删除）**。</p><hr><h2 id="1-删除文件但保留本地文件"><a href="#1-删除文件但保留本地文件" class="headerlink" title="1. 删除文件但保留本地文件"></a><strong>1. 删除文件但保留本地文件</strong></h2><p>如果你只想让 Git 停止追踪某个文件，但仍保留该文件在本地（不删除实际文件），可以使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached &lt;文件名&gt;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached config.json</span><br><span class="line">git commit -m &quot;从 Git 版本库中删除 config.json，但保留本地文件&quot;</span><br></pre></td></tr></table></figure><p>📌 <strong>适用于：</strong></p><ul><li>误提交了不应纳入 Git 版本控制的文件，例如 <code>*.log</code>、<code>node_modules/</code>、配置文件等。</li><li>之后可以通过 <code>.gitignore</code> 忽略该文件，防止它再次被提交。</li></ul><hr><h2 id="2-彻底删除文件"><a href="#2-彻底删除文件" class="headerlink" title="2. 彻底删除文件"></a><strong>2. 彻底删除文件</strong></h2><p>如果你希望文件<strong>从本地和 Git 版本库中都删除</strong>，使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git rm &lt;文件名&gt;</span><br><span class="line">git commit -m &quot;删除 &lt;文件名&gt;&quot;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git rm old_script.py</span><br><span class="line">git commit -m &quot;删除 old_script.py&quot;</span><br></pre></td></tr></table></figure><p>📌 <strong>适用于：</strong></p><ul><li>确定不再需要该文件。</li><li>该文件已经纳入 Git 版本管理，现在想要彻底删除。</li></ul><hr><h2 id="3-删除整个文件夹"><a href="#3-删除整个文件夹" class="headerlink" title="3. 删除整个文件夹"></a><strong>3. 删除整个文件夹</strong></h2><p>如果要删除整个文件夹及其内容，使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git rm -r &lt;目录名&gt;</span><br><span class="line">git commit -m &quot;删除 &lt;目录名&gt; 目录&quot;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git rm -r logs/</span><br><span class="line">git commit -m &quot;删除 logs 目录&quot;</span><br></pre></td></tr></table></figure><hr><h2 id="4-强制删除未暂存的修改"><a href="#4-强制删除未暂存的修改" class="headerlink" title="4. 强制删除未暂存的修改"></a><strong>4. 强制删除未暂存的修改</strong></h2><p>如果文件有未提交的更改，Git 默认不会允许删除。如果要强制删除：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm -f &lt;文件名&gt;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git rm -f debug.log</span><br><span class="line">git commit -m &quot;强制删除 debug.log&quot;</span><br></pre></td></tr></table></figure><p>📌 <strong>警告：</strong></p><ul><li><code>-f</code>（<code>--force</code>）会<strong>直接删除文件</strong>，无法恢复，请谨慎使用。</li></ul><hr><h2 id="5-撤销-git-rm-操作"><a href="#5-撤销-git-rm-操作" class="headerlink" title="5. 撤销 git rm 操作"></a><strong>5. 撤销 <code>git rm</code> 操作</strong></h2><p>如果不小心删除了文件，还没有 <code>commit</code>，可以用 <code>git checkout</code> 恢复：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- &lt;文件名&gt;</span><br></pre></td></tr></table></figure><p>或者，如果已经提交了删除操作，可以使用 <code>git reset</code> 找回：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD~1  # 撤销上一次提交</span><br><span class="line">git checkout -- &lt;文件名&gt;  # 恢复删除的文件</span><br></pre></td></tr></table></figure><hr><h2 id="6-提交更改并推送"><a href="#6-提交更改并推送" class="headerlink" title="6. 提交更改并推送"></a><strong>6. 提交更改并推送</strong></h2><p>删除文件后，记得提交并推送更改：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;删除了不需要的文件&quot;</span><br><span class="line">git push origin main</span><br></pre></td></tr></table></figure><hr><h2 id="7-结论"><a href="#7-结论" class="headerlink" title="7. 结论"></a><strong>7. 结论</strong></h2><table><thead><tr><th>命令</th><th>作用</th><th>适用场景</th></tr></thead><tbody><tr><td><code>git rm --cached &lt;文件&gt;</code></td><td>仅从 Git 删除，保留本地文件</td><td>误提交了配置文件等，需要 Git 忽略</td></tr><tr><td><code>git rm &lt;文件&gt;</code></td><td>删除文件，并提交更改</td><td>不再需要该文件</td></tr><tr><td><code>git rm -r &lt;目录&gt;</code></td><td>删除整个目录</td><td>删除文件夹及其内容</td></tr><tr><td><code>git rm -f &lt;文件&gt;</code></td><td>强制删除文件</td><td>文件有未提交的修改，但仍需删除</td></tr></tbody></table><p>📌 <strong>删除文件后，一定要 <code>git commit</code>，否则不会真正影响版本库！</strong> 🚀</p><h1 id="十三、git-ls-files列出-Git-版本库中已追踪的文件"><a href="#十三、git-ls-files列出-Git-版本库中已追踪的文件" class="headerlink" title="十三、git ls-files列出 Git 版本库中已追踪的文件"></a>十三、<code>git ls-files</code>列出 Git 版本库中已追踪的文件</h1><p><code>git ls-files</code> 用于<strong>列出 Git 版本库中已追踪的文件</strong>，可以帮助你快速查看哪些文件被 Git 管理，以及排除 <code>.gitignore</code> 影响的文件。</p><hr><h2 id="1-git-ls-files-的基本用法"><a href="#1-git-ls-files-的基本用法" class="headerlink" title="1. git ls-files 的基本用法"></a><strong>1. <code>git ls-files</code> 的基本用法</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git ls-files</span><br></pre></td></tr></table></figure><ul><li>列出<strong>当前 Git 仓库中所有被追踪的文件</strong>（即 Git 版本库中的文件）。</li><li><strong>不会显示</strong> 未被 Git 追踪的文件（如 <code>.gitignore</code> 忽略的文件或新创建但未 <code>git add</code> 的文件）。</li></ul><hr><h2 id="2-git-ls-files-常用选项"><a href="#2-git-ls-files-常用选项" class="headerlink" title="2. git ls-files 常用选项"></a><strong>2. <code>git ls-files</code> 常用选项</strong></h2><h3 id="（1）查看被忽略的文件"><a href="#（1）查看被忽略的文件" class="headerlink" title="（1）查看被忽略的文件"></a><strong>（1）查看被忽略的文件</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git ls-files --ignored --others --exclude-standard</span><br></pre></td></tr></table></figure><p>📌 <strong>解析：</strong></p><ul><li><code>--ignored</code>：显示 <code>.gitignore</code> 中被忽略的文件。</li><li><code>--others</code>：显示 Git <strong>未追踪</strong> 的文件（未 <code>git add</code>）。</li><li><code>--exclude-standard</code>：遵循 <code>.gitignore</code> 规则。</li></ul><hr><h3 id="（2）查看已暂存但未提交的文件"><a href="#（2）查看已暂存但未提交的文件" class="headerlink" title="（2）查看已暂存但未提交的文件"></a><strong>（2）查看已暂存但未提交的文件</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git ls-files --stage</span><br></pre></td></tr></table></figure><p>📌 <strong>作用：</strong></p><ul><li>显示<strong>暂存区</strong>的文件，并附带文件的哈希值、权限信息、文件路径等。</li></ul><hr><h3 id="（3）查看已修改但未暂存的文件"><a href="#（3）查看已修改但未暂存的文件" class="headerlink" title="（3）查看已修改但未暂存的文件"></a><strong>（3）查看已修改但未暂存的文件</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git ls-files --modified</span><br></pre></td></tr></table></figure><p>📌 <strong>作用：</strong></p><ul><li>仅显示已被 Git 追踪但<strong>发生了修改</strong>，且<strong>未 <code>git add</code></strong> 的文件。</li></ul><hr><h3 id="（4）查看已删除但未提交的文件"><a href="#（4）查看已删除但未提交的文件" class="headerlink" title="（4）查看已删除但未提交的文件"></a><strong>（4）查看已删除但未提交的文件</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git ls-files --deleted</span><br></pre></td></tr></table></figure><p>📌 <strong>作用：</strong></p><ul><li>列出被 Git 追踪但<strong>已在工作区中删除</strong>的文件（尚未 <code>git commit</code>）。</li></ul><hr><h3 id="（5）查看未被-Git-追踪的文件"><a href="#（5）查看未被-Git-追踪的文件" class="headerlink" title="（5）查看未被 Git 追踪的文件"></a><strong>（5）查看未被 Git 追踪的文件</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git ls-files --others</span><br></pre></td></tr></table></figure><p>📌 <strong>作用：</strong></p><ul><li>显示 Git <strong>未追踪的文件</strong>（未 <code>git add</code>）。</li></ul><hr><h3 id="（6）仅显示已暂存的文件"><a href="#（6）仅显示已暂存的文件" class="headerlink" title="（6）仅显示已暂存的文件"></a><strong>（6）仅显示已暂存的文件</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git ls-files --cached</span><br></pre></td></tr></table></figure><p>📌 <strong>作用：</strong></p><ul><li>显示<strong>已添加到暂存区但未提交</strong>的文件。</li></ul><hr><h3 id="（7）查看已忽略的文件"><a href="#（7）查看已忽略的文件" class="headerlink" title="（7）查看已忽略的文件"></a><strong>（7）查看已忽略的文件</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git ls-files --others --ignored --exclude-standard</span><br><span class="line">git ls-files --ignored --others --exclude-standard</span><br></pre></td></tr></table></figure><p>📌 <strong>作用：</strong></p><ul><li>仅列出 <code>.gitignore</code> 规则下<strong>被忽略的文件</strong>。</li></ul><hr><h2 id="3-git-ls-files-结合其他命令"><a href="#3-git-ls-files-结合其他命令" class="headerlink" title="3. git ls-files 结合其他命令"></a><strong>3. <code>git ls-files</code> 结合其他命令</strong></h2><h3 id="（1）结合-grep-过滤文件"><a href="#（1）结合-grep-过滤文件" class="headerlink" title="（1）结合 grep 过滤文件"></a><strong>（1）结合 <code>grep</code> 过滤文件</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git ls-files | grep &quot;config&quot;</span><br></pre></td></tr></table></figure><p>📌 <strong>作用：</strong></p><ul><li>仅显示文件名包含 <code>&quot;config&quot;</code> 的文件。</li></ul><h3 id="（2）结合-xargs-进行批量操作"><a href="#（2）结合-xargs-进行批量操作" class="headerlink" title="（2）结合 xargs 进行批量操作"></a><strong>（2）结合 <code>xargs</code> 进行批量操作</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git ls-files &#x27;*.log&#x27; | xargs rm</span><br></pre></td></tr></table></figure><p>📌 <strong>作用：</strong></p><ul><li>删除 Git 版本库中所有 <code>.log</code> 文件。</li></ul><h1 id="十四、-gitignore文件"><a href="#十四、-gitignore文件" class="headerlink" title="十四、.gitignore文件"></a>十四、<code>.gitignore</code>文件</h1><p><code>.gitignore</code> 文件用于<strong>告诉 Git 忽略特定文件或文件夹</strong>，这些被忽略的文件不会被 Git 追踪、提交或推送。</p><blockquote><p><code>.gitignore</code>文件生效的前提：该文件不能是已经添加到版本库中的文件</p></blockquote><h2 id="1-gitignore-作用"><a href="#1-gitignore-作用" class="headerlink" title="1. .gitignore 作用"></a><strong>1. <code>.gitignore</code> 作用</strong></h2><ul><li>避免将<strong>敏感文件</strong>（如密码配置、API 密钥）提交到 Git。</li><li>忽略<strong>自动生成的文件</strong>（如编译文件、日志、临时文件）。</li><li>保持代码仓库<strong>整洁</strong>，避免不必要的文件污染版本库。</li></ul><h2 id="2-应该忽略的文件"><a href="#2-应该忽略的文件" class="headerlink" title="2. 应该忽略的文件"></a>2. 应该忽略的文件</h2><p>（1）系统或者软件自动生成的文件</p><p>（2）编译产生的中间文件和结果文件</p><p>（3）运行时生成的日志文件、缓存文件、临时文件</p><p>（4）涉及身份、密码、口令、密钥等敏感信息文件</p><h2 id="3-创建-gitignore-文件"><a href="#3-创建-gitignore-文件" class="headerlink" title="3. 创建 .gitignore 文件"></a><strong>3. 创建 <code>.gitignore</code> 文件</strong></h2><p>在 Git 仓库的根目录创建 <code>.gitignore</code> 文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch .gitignore</span><br></pre></td></tr></table></figure><p>然后在 <code>.gitignore</code> 文件中写入要忽略的文件或目录。</p><hr><h2 id="4-gitignore-语法规则"><a href="#4-gitignore-语法规则" class="headerlink" title="4. .gitignore 语法规则"></a><strong>4. <code>.gitignore</code> 语法规则</strong></h2><ul><li><p><strong>忽略指定文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">debug.log</span><br></pre></td></tr></table></figure><p>忽略 <code>debug.log</code> 文件。</p></li><li><p><strong>忽略整个文件夹</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/logs/</span><br></pre></td></tr></table></figure><p>忽略 <code>logs</code> 目录及其所有内容。</p></li><li><p><strong>忽略特定类型的文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*.log</span><br></pre></td></tr></table></figure><p>忽略所有 <code>.log</code> 结尾的文件。</p></li><li><p><strong>忽略某个文件，但保留特定文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*.txt</span><br><span class="line">!README.txt</span><br></pre></td></tr></table></figure><p>忽略所有 <code>.txt</code> 文件，但**保留 <code>README.txt</code>**。</p></li><li><p><strong>忽略某个目录下的所有内容，但保留特定文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/config/*</span><br><span class="line">!/config/settings.json</span><br></pre></td></tr></table></figure><p>忽略 <code>config</code> 目录下的所有文件，但**保留 <code>settings.json</code>**。</p></li><li><p><strong>使用 <code>#</code> 添加注释</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">忽略所有的 .<span class="built_in">log</span> 文件</span></span><br><span class="line">*.log</span><br></pre></td></tr></table></figure></li><li><p>忽略某个目录下的所有子目录</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">忽略 doc/ 目录及其所有子目录下的 .pdf文件</span></span><br><span class="line">doc/**/*.pdf</span><br></pre></td></tr></table></figure><p>总结上面的，最终在.gitignore文件中包括以下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">debug.log</span><br><span class="line">/logs/</span><br><span class="line">*.log</span><br><span class="line">*.txt</span><br><span class="line">!README.txt</span><br><span class="line">/config/*</span><br><span class="line">!/config/settings.json</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">忽略所有的.<span class="built_in">log</span>文件</span></span><br><span class="line">*.log </span><br></pre></td></tr></table></figure><h2 id="5-gitignore文件匹配规则"><a href="#5-gitignore文件匹配规则" class="headerlink" title="5. .gitignore文件匹配规则"></a>5. <code>.gitignore</code>文件匹配规则</h2><p>（1）<code>.gitignore</code>文件是从上到下逐行匹配的，每一行表示一个忽略模式。</p><p>（2）空行或者以<code>#</code>开头的行会被git忽略。一般空行用于可读性的分隔，<code>#</code>一般用作注释</p><p>（3）使用标准的<code>Blob</code>模式匹配，例如</p><p>​（1 星号<code>*</code>通配任意个字母</p><p>​（2 问号<code>?</code>匹配单个字符</p><p>​（3 中括号<code>[] </code>表示匹配列表中的单个字符，比如：[abc] 表示a&#x2F;b&#x2F;c</p><p>（4）两个星号<code>**</code>表示匹配任意的中间目录</p><p>（5）中括号可以使用短中线连接，比如：</p><p>​[0-9]：表示任意一位数字，[a-z]：表示任意一位小写字母</p><p>（6）感叹号<code>!</code>表示取反</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习（三）</title>
      <link href="/Ryan/Linux%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/Ryan/Linux%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux组管理和权限管理"><a href="#Linux组管理和权限管理" class="headerlink" title="Linux组管理和权限管理"></a>Linux组管理和权限管理</h1><p>在Linux 中每个用户必须属于一个组，不能独立于组外。在Linux中每个文件有所有者、所在组、其他组的概念。在 <strong>Linux</strong> 系统中，<strong>组（Group）</strong> 是用户管理的重要部分，主要用于 <strong>权限控制</strong>，方便多个用户共享或限制对文件、目录的访问。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习（二）</title>
      <link href="/Ryan/Linux%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/Ryan/Linux%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="十七、日期时间类"><a href="#十七、日期时间类" class="headerlink" title="十七、日期时间类"></a>十七、日期时间类</h1><h2 id="date指令"><a href="#date指令" class="headerlink" title="date指令"></a><strong>date指令</strong></h2><ol><li>功能：用于 <strong>显示当前系统时间</strong>，也可以用来 <strong>格式化日期</strong> 或 <strong>修改系统时间</strong>（需要 <code>sudo</code> 权限）。</li><li>语法</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">date</span></span><br></pre></td></tr></table></figure><ol start="3"><li>格式化时间</li></ol><p>可以使用 <code>+</code> 后跟格式字符串来自定义日期格式。</p><p><strong>常用格式</strong></p><table><thead><tr><th>格式</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td><code>%Y</code></td><td>年</td><td><code>2025</code></td></tr><tr><td><code>%m</code></td><td>月（01-12）</td><td><code>01</code></td></tr><tr><td><code>%d</code></td><td>日（01-31）</td><td><code>31</code></td></tr><tr><td><code>%H</code></td><td>小时（00-23）</td><td><code>14</code></td></tr><tr><td><code>%M</code></td><td>分钟（00-59）</td><td><code>30</code></td></tr><tr><td><code>%S</code></td><td>秒（00-59）</td><td><code>45</code></td></tr><tr><td><code>%A</code></td><td>星期名称</td><td><code>Thursday</code></td></tr><tr><td><code>%a</code></td><td>星期缩写</td><td><code>Thu</code></td></tr><tr><td><code>%B</code></td><td>月份名称</td><td><code>January</code></td></tr><tr><td><code>%b</code></td><td>月份缩写</td><td><code>Jan</code></td></tr><tr><td><code>%p</code></td><td>AM&#x2F;PM</td><td><code>PM</code></td></tr><tr><td><code>%Z</code></td><td>时区</td><td><code>CST</code></td></tr></tbody></table><ol start="4"><li>应用案例</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[ryan@ryan ~]$ <span class="built_in">date</span> <span class="string">&quot;+%Y-%m-%d %H:%M:%S&quot;</span></span><br><span class="line">2025-01-31 05:33:04</span><br><span class="line">[ryan@ryan ~]$ </span><br><span class="line">[ryan@ryan ~]$ <span class="built_in">date</span> <span class="string">&quot;+Today is %A, %B %d, %Y&quot;</span></span><br><span class="line">Today is Friday, January 31, 2025</span><br><span class="line">[ryan@ryan ~]$ </span><br><span class="line">[ryan@ryan ~]$ <span class="built_in">date</span> +%Y</span><br><span class="line">2025</span><br><span class="line">[ryan@ryan ~]$ </span><br></pre></td></tr></table></figure><h3 id="date指令-设置日期"><a href="#date指令-设置日期" class="headerlink" title="date指令 - 设置日期"></a><strong>date指令 - 设置日期</strong></h3><p><strong>修改系统时间需要 <code>root</code> 权限</strong>，普通用户无法直接修改</p><ol><li>语法</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">date</span> -s 字符串时间</span><br></pre></td></tr></table></figure><ol start="2"><li>应用案例</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@ryan ~]# <span class="built_in">sudo</span> <span class="built_in">date</span> -s <span class="string">&quot;2025-1-31 19:00&quot;</span></span><br><span class="line">Fri Jan 31 19:00:00 EST 2025</span><br><span class="line">[root@ryan ~]# </span><br></pre></td></tr></table></figure><h2 id="cal指令"><a href="#cal指令" class="headerlink" title="cal指令"></a><strong>cal指令</strong></h2><ol><li>功能：查看日历</li><li>语法</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cal [选项] （功能描述：不加选项，显示本月日历）</span><br><span class="line">cal 年份</span><br></pre></td></tr></table></figure><ol start="3"><li>应用案例</li></ol><p>（1）显示当前月份日历</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[ryan@ryan ~]$ cal</span><br><span class="line">    January 2025    </span><br><span class="line">Su Mo Tu We Th Fr Sa</span><br><span class="line">          1  2  3  4</span><br><span class="line"> 5  6  7  8  9 10 11</span><br><span class="line">12 13 14 15 16 17 18</span><br><span class="line">19 20 21 22 23 24 25</span><br><span class="line">26 27 28 29 30 31</span><br><span class="line"></span><br><span class="line">[ryan@ryan ~]$ </span><br></pre></td></tr></table></figure><p>（2）显示指定年份的日历</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ryan@ryan ~]$ cal 2025</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h1 id="十八、搜索查找类"><a href="#十八、搜索查找类" class="headerlink" title="十八、搜索查找类"></a>十八、搜索查找类</h1><h2 id="find指令"><a href="#find指令" class="headerlink" title="find指令"></a><strong>find指令</strong></h2><ol><li>功能：用于在 <strong>目录及其子目录中搜索文件</strong>，支持按 <strong>文件名、类型、大小、时间</strong> 等多种方式查找。</li><li>语法</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find [搜索范围] [选项]</span><br></pre></td></tr></table></figure><ol start="3"><li>选项</li></ol><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td><code>-type f</code></td><td>查找普通文件</td></tr><tr><td><code>-type d</code></td><td>查找目录</td></tr><tr><td><code>-type l</code></td><td>查找符号链接</td></tr><tr><td><code>-size +100M</code></td><td>查找大于 100MB 的文件</td></tr><tr><td><code>-size -10M</code></td><td>查找小于 10MB 的文件</td></tr><tr><td>-size 500k</td><td>查找正好 500KB 的文件</td></tr><tr><td>-mtime +7</td><td>查找 7 天前修改的文件</td></tr><tr><td>-mtime -3</td><td>查找 3 天内修改的文件</td></tr><tr><td>-mtime 0</td><td>查找今天修改的文件</td></tr><tr><td>-name &lt;查询方式&gt;</td><td>按指定的文件名查找模式查找文件</td></tr><tr><td>-user &lt;用户名&gt;</td><td>查找属于指定用户名所有文件</td></tr><tr><td>-size &lt;文件大小&gt;</td><td>按照指定的文件大小查找文件</td></tr></tbody></table><ol start="4"><li>应用案例</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[ryan@ryan ~]$ find /home/ryan/ -name test1.txt</span><br><span class="line">/home/ryan/Documents/test1.txt</span><br><span class="line">[ryan@ryan ~]$ </span><br></pre></td></tr></table></figure><h2 id="locate指令"><a href="#locate指令" class="headerlink" title="locate指令"></a><strong>locate指令</strong></h2><ol><li>功能：用于 <strong>快速查找文件</strong> 的命令，比 <code>find</code> 更快，因为它依赖于 <strong>预先建立的数据库</strong>（<code>mlocate.db</code>）。</li><li>语法</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">locate 文件名</span><br></pre></td></tr></table></figure><blockquote><p>由于<code>locate</code>指令基于数据库进行查询，所以第一次运行前，必须使用<code>updatedb</code>指令创建locate数据库</p></blockquote><ol start="3"><li>应用案例</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@ryan ~]# <span class="built_in">sudo</span> updatedb</span><br><span class="line">[root@ryan ~]# locate test1.txt</span><br><span class="line">/home/ryan/Documents/test1.txt</span><br><span class="line">[root@ryan ~]#</span><br></pre></td></tr></table></figure><h2 id="which指令"><a href="#which指令" class="headerlink" title="which指令"></a><strong>which指令</strong></h2><ol><li>功能：用于 <strong>查找可执行文件</strong> 的 <strong>完整路径</strong>，常用于确认某个命令是否可用，以及它的存放位置。</li><li>语法</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">which</span> <span class="built_in">command</span></span><br></pre></td></tr></table></figure><ol start="3"><li>应用案例</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[ryan@ryan ~]$ <span class="built_in">which</span> <span class="built_in">ls</span></span><br><span class="line"><span class="built_in">alias</span> <span class="built_in">ls</span>=<span class="string">&#x27;ls --color=auto&#x27;</span></span><br><span class="line">/usr/bin/ls</span><br><span class="line">[ryan@ryan ~]$</span><br></pre></td></tr></table></figure><h2 id="grep指令和-管道符号"><a href="#grep指令和-管道符号" class="headerlink" title="**grep指令和|**管道符号"></a>**grep指令和<code>|</code>**管道符号</h2><ol><li>功能：<code>grep</code> 是 Linux 中用于 <strong>文本搜索</strong> 的命令，而 <code>|</code>（管道符）用于 <strong>将一个命令的输出作为另一个命令的输入</strong>，两者经常结合使用。</li></ol><p><code>grep</code>过滤查找，管道符<code>|</code>，表示将前一个命令的处理结果输出传递给后面的命令处理。</p><ol start="2"><li>语法</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep [选项] 查找内容 源文件</span><br></pre></td></tr></table></figure><ol start="3"><li>常用选项</li></ol><p>-n : 显示匹配行及行号</p><p>-i : 忽略字母大小写</p><ol start="4"><li>应用案例</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[ryan@ryan Documents]$ grep <span class="string">&quot;asd&quot;</span> test1.txt </span><br><span class="line">asd</span><br><span class="line">asdf</span><br><span class="line">asd</span><br><span class="line">fasd</span><br><span class="line">asdf</span><br><span class="line">asd</span><br><span class="line">asd</span><br><span class="line">asd</span><br><span class="line">[ryan@ryan Documents]$ </span><br></pre></td></tr></table></figure><h3 id="grep-管道符"><a href="#grep-管道符" class="headerlink" title="grep + 管道符 |"></a><strong><code>grep</code> + 管道符 <code>|</code></strong></h3><p>管道符 <code>|</code> <strong>连接两个命令</strong>，让 <code>grep</code> 处理前一个命令的输出。</p><p><strong>过滤 <code>ls</code> 结果</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -l | grep <span class="string">&quot;.txt&quot;</span></span><br></pre></td></tr></table></figure><p>📌 仅显示 <code>.txt</code> 文件。</p><p><strong>过滤 <code>ps</code> 进程</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep <span class="string">&quot;nginx&quot;</span></span><br></pre></td></tr></table></figure><p>📌 查找正在运行的 <code>nginx</code> 进程。</p><p><strong>查找 <code>ifconfig</code> 中的 IP</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig | grep <span class="string">&quot;inet&quot;</span></span><br></pre></td></tr></table></figure><p>📌 仅显示包含 <code>&quot;inet&quot;</code> 的行（IP 地址）。</p><p><strong>显示 <code>history</code> 中的 <code>git</code> 命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">history</span> | grep <span class="string">&quot;git&quot;</span></span><br></pre></td></tr></table></figure><h3 id="grep-结合多个管道"><a href="#grep-结合多个管道" class="headerlink" title="grep 结合多个管道"></a><strong><code>grep</code> 结合多个管道</strong></h3><p>🔹 <strong>查找日志中的 <code>&quot;error&quot;</code> 并显示前 5 行</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> log.txt | grep <span class="string">&quot;error&quot;</span> | <span class="built_in">head</span> -n 5</span><br></pre></td></tr></table></figure><p>🔹 <strong>查找进程中包含 <code>&quot;python&quot;</code> 但不包含 <code>&quot;root&quot;</code></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep <span class="string">&quot;python&quot;</span> | grep -v <span class="string">&quot;root&quot;</span></span><br></pre></td></tr></table></figure><h1 id="十九、压缩和解压类"><a href="#十九、压缩和解压类" class="headerlink" title="十九、压缩和解压类"></a>十九、压缩和解压类</h1><p>Linux 提供多种压缩与解压命令，常见的有 <code>tar</code>、<code>zip/unzip</code>、<code>gzip/gunzip</code>、<code>bzip2/bunzip2</code> 等。</p><hr><h2 id="1-tar（打包-压缩）"><a href="#1-tar（打包-压缩）" class="headerlink" title="1. tar（打包 &amp; 压缩）"></a><strong>1. <code>tar</code>（打包 &amp; 压缩）</strong></h2><p><code>tar</code> 主要用于 <strong>打包</strong> 多个文件，并支持 <strong>gzip（.tar.gz）</strong> 和 <strong>bzip2（.tar.bz2）</strong> 压缩。</p><p><strong>打包但不压缩</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -cvf archive.tar 文件/目录</span><br></pre></td></tr></table></figure><p>📌 <strong>示例</strong>：打包 <code>mydir</code> 目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -cvf mydir.tar mydir</span><br></pre></td></tr></table></figure><p><strong>打包并压缩（gzip 压缩 <code>.tar.gz</code>）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -czvf archive.tar.gz 文件/目录</span><br></pre></td></tr></table></figure><p>📌 <strong>示例</strong>：打包并 gzip 压缩 <code>mydir</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -czvf mydir.tar.gz mydir</span><br></pre></td></tr></table></figure><p><strong>仅压缩，不打包</strong></p><p>🔹 <strong>压缩单个文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gzip file.txt</span><br></pre></td></tr></table></figure><p>🔹 <strong>压缩整个目录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -czvf mydir.tar.gz mydir</span><br></pre></td></tr></table></figure><hr><h2 id="2-tar-解压"><a href="#2-tar-解压" class="headerlink" title="2. tar 解压"></a><strong>2. <code>tar</code> 解压</strong></h2><p><strong>解压 <code>.tar</code>（仅解包）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf archive.tar</span><br></pre></td></tr></table></figure><p><strong>解压 <code>.tar.gz</code>（解包+解压）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf archive.tar.gz</span><br></pre></td></tr></table></figure><p><strong>解压 <code>.tar.bz2</code></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xjvf archive.tar.bz2</span><br></pre></td></tr></table></figure><p><strong>指定解压路径</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf archive.tar.gz -C /target/directory</span><br></pre></td></tr></table></figure><hr><h2 id="3-zip-unzip（常用于-Windows-兼容）"><a href="#3-zip-unzip（常用于-Windows-兼容）" class="headerlink" title="3. zip/unzip（常用于 Windows 兼容）"></a><strong>3. <code>zip/unzip</code>（常用于 Windows 兼容）</strong></h2><p>🔹<strong>压缩</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip archive.zip 文件/目录</span><br></pre></td></tr></table></figure><p>📌 <strong>示例</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip -r mydir.zip mydir</span><br></pre></td></tr></table></figure><p>🔹 <strong>解压</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip archive.zip</span><br></pre></td></tr></table></figure><hr><h2 id="4-gzip-gunzip（单文件压缩）"><a href="#4-gzip-gunzip（单文件压缩）" class="headerlink" title="4. gzip/gunzip（单文件压缩）"></a><strong>4. <code>gzip/gunzip</code>（单文件压缩）</strong></h2><p>🔹 <strong>压缩</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gzip file.txt</span><br></pre></td></tr></table></figure><p>📌 生成 <code>file.txt.gz</code></p><p>🔹 <strong>解压</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gunzip file.txt.gz</span><br></pre></td></tr></table></figure><hr><h2 id="5-bzip2-bunzip2（更高压缩率）"><a href="#5-bzip2-bunzip2（更高压缩率）" class="headerlink" title="5. bzip2/bunzip2（更高压缩率）"></a><strong>5. <code>bzip2/bunzip2</code>（更高压缩率）</strong></h2><p>🔹 <strong>压缩</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bzip2 file.txt</span><br></pre></td></tr></table></figure><p>📌 生成 <code>file.txt.bz2</code></p><p>🔹 <strong>解压</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bunzip2 file.txt.bz2</span><br></pre></td></tr></table></figure><hr><h2 id="🚀-总结"><a href="#🚀-总结" class="headerlink" title="🚀 总结"></a><strong>🚀 总结</strong></h2><table><thead><tr><th>任务</th><th>指令</th><th>说明</th></tr></thead><tbody><tr><td><strong>打包（不压缩）</strong></td><td><code>tar -cvf archive.tar mydir</code></td><td>仅打包 <code>mydir</code> 目录</td></tr><tr><td><strong>打包+gzip压缩</strong></td><td><code>tar -czvf archive.tar.gz mydir</code></td><td><code>gzip</code> 压缩 <code>.tar.gz</code></td></tr><tr><td><strong>解压 <code>.tar.gz</code></strong></td><td><code>tar -xzvf archive.tar.gz</code></td><td>解压 <code>.tar.gz</code></td></tr><tr><td><strong>zip 压缩</strong></td><td><code>zip -r archive.zip mydir</code></td><td>适用于 Windows 兼容</td></tr><tr><td><strong>zip 解压</strong></td><td><code>unzip archive.zip</code></td><td>解压 <code>.zip</code></td></tr><tr><td><strong>gzip 压缩单个文件</strong></td><td><code>gzip file.txt</code></td><td>生成 <code>file.txt.gz</code></td></tr><tr><td><strong>gzip 解压</strong></td><td><code>gunzip file.txt.gz</code></td><td>还原 <code>file.txt</code></td></tr><tr><td><strong>bzip2 压缩</strong></td><td><code>bzip2 file.txt</code></td><td>生成 <code>file.txt.bz2</code></td></tr><tr><td><strong>bzip2 解压</strong></td><td><code>bunzip2 file.txt.bz2</code></td><td>还原 <code>file.txt</code></td></tr></tbody></table><p>🔥 <code>tar</code> 适合 <strong>打包+压缩</strong>，<code>zip/unzip</code> 适合 <strong>Windows 兼容</strong>，<code>gzip/bzip2</code> 适合 <strong>单文件压缩</strong>！🚀</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMware Workstation Pro安装CentOS 7教程</title>
      <link href="/Ryan/VMware%20Workstation%20Pro%E5%AE%89%E8%A3%85CentOS%207%E6%95%99%E7%A8%8B/"/>
      <url>/Ryan/VMware%20Workstation%20Pro%E5%AE%89%E8%A3%85CentOS%207%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="安装VMware-Workstation-Pro"><a href="#安装VMware-Workstation-Pro" class="headerlink" title="安装VMware Workstation Pro"></a>安装VMware Workstation Pro</h1><p>具体操作步骤可以去B站上搜索</p><h1 id="下载CentOS镜像源"><a href="#下载CentOS镜像源" class="headerlink" title="下载CentOS镜像源"></a>下载CentOS镜像源</h1><ul><li>网上提供了很多镜像源</li><li>也可以选择从阿里云镜像源进行下载<a href="https://mirrors.aliyun.com/centos/?spm=a2c6h.13651104.d-2001.1.4508320c5W1Fjl">阿里云镜像源CentOS</a></li></ul><h1 id="打开VMwareWorkstation-Pro"><a href="#打开VMwareWorkstation-Pro" class="headerlink" title="打开VMwareWorkstation Pro"></a>打开VMwareWorkstation Pro</h1><ol><li>点击新建虚拟机，选择自定义（高级），点击下一步</li></ol><img src="https://i.postimg.cc/W3XC6TdR/Pasted-image-20250116182554.png" alt="图" style="zoom: 50%;" /><ol start="2"><li>继续点击下一步</li></ol><img src="https://s2.loli.net/2025/01/17/xim69RqAalNsQB1.png" alt="img1" style="zoom:50%;" /><ol start="3"><li>这里选择“稍后安装操作系统”，点击下一步</li></ol><img src="https://s2.loli.net/2025/01/16/6DxeHGFdgjoTSsz.png" alt="img1.png" style="zoom:50%;" /><ol start="4"><li>客户机操作系统选择“Linux”，版本选择“CentOS 7 64位”，点击下一步</li></ol><img src="https://i.postimg.cc/HnYPPxJW/Pasted-image-20250116183551.png" alt="img" style="zoom:50%;" /><ol start="5"><li>设置虚拟机名称，位置选择存储空间大的盘，点击下一步</li></ol><img src="https://s2.loli.net/2025/01/17/qXCFSvrxjznZKQt.png" alt="img" style="zoom:50%;" /><ol start="6"><li>处理器数量和内核数量可以根据自己的电脑实际情况给定，一般处理器数量2个，内核数量2个足够用了。点击下一步。</li></ol><img src="https://s2.loli.net/2025/01/17/zEOc6wude8PVTNo.png" alt="img2" style="zoom:50%;" /><ol start="7"><li>虚拟机内存给2GB（想给多点或少点也没问题，一般2GB足够了），点击下一步。</li></ol><img src="https://s2.loli.net/2025/01/17/xNzBwZQoL6EvDU8.png" alt="img3" style="zoom:50%;" /><ol start="8"><li>网络连接点击“使用网络地址转换(NAT)，点击下一步。</li></ol><img src="https://s2.loli.net/2025/01/17/hbp97WLzyf4rnem.png" alt="img3" style="zoom:50%;" /><ol start="9"><li>继续点击下一步</li></ol><img src="https://s2.loli.net/2025/01/17/29GmFnMsEVoNqKP.png" alt="img" style="zoom:50%;" /><ol start="10"><li>继续点击下一步</li></ol><img src="https://s2.loli.net/2025/01/17/vJmUkIjbO4ZBLtD.png" alt="img" style="zoom:50%;" /><ol start="11"><li>磁盘选择”创建新虚拟磁盘“，点击下一步</li></ol><img src="https://s2.loli.net/2025/01/17/dNy2BzefVTXnoGq.png" alt="img4" style="zoom:50%;" /><ol start="12"><li>最大磁盘大小给20.0GB，选择”将虚拟磁盘拆分成多个文件“（如果磁盘空间足够，也可以选择”立即分配所有磁盘空间“），点击下一步。</li></ol><img src="https://s2.loli.net/2025/01/17/7l2UL5cqAI4eB1G.png" alt="img5" style="zoom:50%;" /><ol start="13"><li>继续点击下一步</li></ol><img src="https://s2.loli.net/2025/01/17/SRWoT1IYgBLQcDt.png" alt="img" style="zoom:50%;" /><ol start="13"><li>点击”自定义硬件“</li></ol><img src="https://s2.loli.net/2025/01/17/6tg9AXjvU1KukcY.png" alt="img6" style="zoom:50%;" /><ol start="14"><li>点击”新CD&#x2F;DVD(IDE)”，在“连接”选项中选择“使用ISO映像文件”，点击“浏览”，选择下载好的CentOS 镜像(以.iso结尾的)。</li></ol><img src="https://s2.loli.net/2025/01/17/w7tcqHWOh5NYpIM.png" alt="img" style="zoom: 33%;" /><ol start="15"><li>点击“网络适配器”，在“网络连接”选项中选择“NAT模式”。然后点击关闭。</li></ol><img src="https://s2.loli.net/2025/01/17/2iHpqguaNMXd8ER.png" alt="img" style="zoom:33%;" /><ol start="16"><li>点击完成。</li></ol><img src="https://s2.loli.net/2025/01/17/2qkYVQ3h5mcJMBz.png" alt="img" style="zoom:50%;" /><ol start="17"><li>选择刚才创建好的虚拟机，点击“开启此虚拟机”。</li></ol><img src="https://s2.loli.net/2025/01/17/2nfYFdiUhOkA5es.png" alt="img" style="zoom: 33%;" /><ol start="18"><li>通过键盘上下方向键控制光标，选中”Install CentOS 7”(这步操作无法使用鼠标实现，只能通过键盘方向键)，然后点击回车。</li></ol><img src="https://s2.loli.net/2025/01/17/F5bGHI1JlEftmd3.png" alt="img" style="zoom: 33%;" /><ol start="19"><li>经过短时间等待后，进入一下界面，选择语言。(一般建议选English，作为程序员总是要习惯英文环境的。当然选择中文也可以)。选择好后点击continue。</li></ol><img src="https://s2.loli.net/2025/01/17/6yDtuPQp7FMbUGB.png" alt="img" style="zoom: 33%;" /><ol start="20"><li>点击“DATE&amp;TIME”可以更改时区。（因为我们只是学习Linux的基本操作，所以时区改不改都可以）。</li></ol><img src="https://s2.loli.net/2025/01/17/TZC4bNxUJMc2nSA.png" alt="img" style="zoom:33%;" /><ol start="21"><li>点击“SOFTWARE SELECTION”。</li></ol><img src="https://s2.loli.net/2025/01/17/4jSPNadrJXQYbG9.png" alt="img" style="zoom:33%;" /><ol start="22"><li>默认是”Minimal Install“，最小化安装的，比较节省资源。即：只有命令行界面CLI，没有图形界面GUI，所有操作都是键盘完成，还有一些基本的开发工具，如gcc、jdk、mysql等等也是没有的。一般实际开发中可以选择最小化安装。学习使用的话，可以选择GUI(这里选择Gnome Desktop)，然后选择兼容性程序库Compatibility Libraries和开发工具Development Tools。然后点击左上角的Done</li></ol><img src="https://s2.loli.net/2025/01/17/ISxlQEpmDaYrZ8h.png" alt="img" style="zoom:33%;" /><ol start="23"><li>然后出现以下的情况，是检查软件依赖关系，我们只需要等待即可。</li></ol><img src="https://s2.loli.net/2025/01/17/MBXGKeg3zjnhxWN.png" alt="img" style="zoom:33%;" /><ol start="24"><li>检查完后，点击安装位置INSTALLATION DESTINATION。(默认是自动分区的，但是作为程序员，我们要学习自己分区)。</li></ol><img src="https://s2.loli.net/2025/01/17/aYCHGu59EIo64vU.png" alt="img" style="zoom:33%;" /><p>25.点击”I will configure partitioning”，选择自己分区。然后点击Done。</p><img src="https://s2.loli.net/2025/01/17/Nprbh8te42wy7iv.png" alt="img" style="zoom:33%;" /><ol start="26"><li>点击”+“加号，开始配置分区。</li></ol><img src="https://s2.loli.net/2025/01/17/WaxekSEl5BMZ2TA.png" alt="img" style="zoom:33%;" /><blockquote><p>虚拟机安装分区解析：</p><p>一般分为三个区: 1.boot分区（引导分区，一般分配1Gb）2.swap（交换分区，一般和最开始设置的内存大小一致）3.root分区（根分区，分配剩下的空间）</p></blockquote><p>26.1 配置boot分区</p><img src="https://s2.loli.net/2025/01/17/PMRuzUAT7ZdeB94.png" alt="img" style="zoom:33%;" /><p>26.2 配置swap分区。</p><img src="https://s2.loli.net/2025/01/17/fM8VDFdOwyexHQc.png" alt="img" style="zoom:33%;" /><p>26.3 配置根分区。</p><img src="https://s2.loli.net/2025/01/17/8l47ax6QjTVSEJg.png" alt="img" style="zoom:33%;" /><ol start="27"><li>修改各分区的设备类型和文件系统。</li></ol><p>&#x2F;boot分区：</p><img src="https://s2.loli.net/2025/01/17/Lf8bBRSHhGZ63Uc.png" alt="img" style="zoom: 50%;" /><p>swap分区：</p><img src="https://s2.loli.net/2025/01/17/O5CvxkiGhw8MKIX.png" alt="img" style="zoom:50%;" /><p>&#x2F; 根分区：</p><img src="https://s2.loli.net/2025/01/17/tw3sxCjo1yH4mQD.png" alt="img" style="zoom:50%;" /><p>最后点击Done，点击Accept Changes。</p><img src="https://s2.loli.net/2025/01/17/i5hRYgVxtsfevqW.png" alt="img" style="zoom:50%;" /><ol start="28"><li>禁用KDUMP，这个功能在实际开发，真正跑项目的时候可以开启，学习Linux就不需要开启这个功能了。最后点击Done。</li></ol><img src="https://s2.loli.net/2025/01/17/r2tECfs9AZHIuQT.png" alt="img" style="zoom:33%;" /><img src="https://s2.loli.net/2025/01/17/aYLIqm1JZGykgo9.png" alt="img" style="zoom:50%;" /><ol start="29"><li>打开网络。点击NETWORK&amp;HOST NAME，打开网络，顺便可以更改下主机名。最后点击Done。</li></ol><img src="https://s2.loli.net/2025/01/17/WdCLlRs5NKGfFAX.png" alt="img" style="zoom:33%;" /><img src="https://s2.loli.net/2025/01/17/QbqDWAaNTRc2mIf.png" alt="img" style="zoom:50%;" /><ol start="30"><li>最后的SECURITY POLICY安全策略可关可不关。点击Begin Installation。</li></ol><img src="https://s2.loli.net/2025/01/17/2v1hodKqlCQWRNG.png" alt="img" style="zoom:33%;" /><ol start="31"><li>配置root密码。</li></ol><img src="https://s2.loli.net/2025/01/17/JqQuoNXRBDCrUek.png" alt="img" style="zoom: 33%;" /><img src="https://s2.loli.net/2025/01/17/psufJt1wR59iIk6.png" alt="img" style="zoom:50%;" /><ol start="32"><li>创建一个其他用户。因为在Linux中，不建议使用具有最高权限的root用户。所以需要再创建个没有管理员权限的普通用户来使用。</li></ol><img src="https://s2.loli.net/2025/01/17/ucSA7x4eXHEJV63.png" alt="img" style="zoom:33%;" /><img src="https://s2.loli.net/2025/01/17/2IeSXfQ4dtk7Gvm.png" alt="img" style="zoom:50%;" /><ol start="33"><li>下载完成后，点击Reboot重启。</li></ol><img src="https://s2.loli.net/2025/01/17/5cOJAvNjYlu96wb.png" alt="img" style="zoom:50%;" /><ol start="34"><li>接收其许可证。</li></ol><img src="https://s2.loli.net/2025/01/17/xQMro6q7Ei4bPvT.png" alt="img" style="zoom: 33%;" /><img src="https://s2.loli.net/2025/01/17/9ndkhXSz1E7ZsMP.png" alt="img" style="zoom:33%;" /><ol start="35"><li>点击右下角的FINISH CONFIGURATION完成配置。</li></ol><img src="https://s2.loli.net/2025/01/17/vWt9Ap47DdKI3bQ.png" alt="img" style="zoom:33%;" /><ol start="36"><li><p>登录。如需使用root用户登录，则点击下方的Not listed? 然后输入Username账号：root，密码：自己设置的密码。然后点击Sign in。</p></li><li><p>登录后选择语言，点击Next。</p></li></ol><img src="https://s2.loli.net/2025/01/17/halkW1SIdtiw5Ev.png" alt="img" style="zoom:33%;" /><ol start="38"><li><p>Typing键盘，根据实际情况选择即可。然后点击Next。</p></li><li><p>Privacy隐私，可以选择关闭。然后点击Next。</p></li><li><p>Connect Your Online Accounts连接在线账号，可以直接点击Skip跳过。</p></li><li><p>最后点击Start Using CentOS Linux即可正式使用！</p></li></ol><img src="https://s2.loli.net/2025/01/17/ZuSvj5iUkOhqGoJ.png" alt="img" style="zoom:33%;" />]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习（一）</title>
      <link href="/Ryan/Linux%E5%88%9D%E5%A7%8B%E5%AD%A6%E4%B9%A0/"/>
      <url>/Ryan/Linux%E5%88%9D%E5%A7%8B%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="一、初步进入Linux世界"><a href="#一、初步进入Linux世界" class="headerlink" title="一、初步进入Linux世界"></a>一、初步进入Linux世界</h1><h2 id="系统的认识"><a href="#系统的认识" class="headerlink" title="系统的认识"></a>系统的认识</h2><p>一般我们常见的个人 PC系统是Windows系统，该系统能实现：鼠标能点、键盘能输入内容、阅读、看电影、安装软件等等功能，实现<strong>人机交互</strong>。</p><p>世界上目前流行的电脑系统：</p><ol><li><p>Windows -&gt; 微软</p></li><li><p>Linux</p></li><li><p>Unix</p></li></ol><h2 id="Linux概述"><a href="#Linux概述" class="headerlink" title="Linux概述"></a>Linux概述</h2><p>Linux是一种<strong>自由和开放源码</strong>的<strong>类UNIX操作系统</strong>。Linux内核是由林纳斯·托瓦兹于1991年10月5日首次发布。（起因是林纳斯认对他使用的一个类 UNIX 操作系统 MINIX 十分不满，因为当时 MINIX 仅可用于教育但不允许任何商业用途。于是他在他的大学时期编写并发布了自己的操作系统，也就是后来所谓的 “<strong>Linux 内核</strong>”，成为了如今各类 Linux 发行版的基础。并将源码公布于网络，将Linux <strong>开源</strong>，供大家免费使用。）</p><div class="note info flat"><p>Android系统是基于Linus系统而开发出来的，而Android系统也是开源的，所以各大手机厂商都可以根据Android源码做出更改和扩展，做出属于自己的东西，如小米的MIUI、VIVO的OriginOS、OPPO的ColorOS等。</p></div><p>类似地，基于Linux内核开发出的各种Linux系统，称为<strong>Linux发行版</strong>。如：Debian、Ubuntu、RedHat、fedora、CentOS、ArchLinux等等。</p><h1 id="二、Linux发行版的安装和使用"><a href="#二、Linux发行版的安装和使用" class="headerlink" title="二、Linux发行版的安装和使用"></a>二、Linux发行版的安装和使用</h1><ul><li><p>基本说明：学习Linux需要一个环境，所以我们需要安装Linux系统。有三种方式可以选择</p><ol><li><p>创建虚拟机，在虚拟机上安装Linux系统<a href="https://ryanblog.us.kg/Ryan/VMware%20Workstation%20Pro%E5%AE%89%E8%A3%85CentOS%207%E6%95%99%E7%A8%8B/">(VMware Workstation Pro安装CentOS 7教程)</a></p></li><li><p>购买云服务器并安装Linux系统来进行学习</p></li><li><p>在实体机上安装Linux系统</p></li></ol></li></ul><h2 id="虚拟机网络连接的三种模式"><a href="#虚拟机网络连接的三种模式" class="headerlink" title="虚拟机网络连接的三种模式"></a>虚拟机网络连接的三种模式</h2><p><img src="https://s2.loli.net/2025/01/17/xXcQ14mu3JbKSDO.png" alt="img"></p><ol><li><p><strong>使用桥接模式</strong>：我们创建的虚拟机会实际拥有一个和实体机同一个网段的公网IP地址。这时候虚拟机可以和同一个网段内的实体机进行通信。例如，若实体机公网IP网关为192.168.10.0，主机IP为192.168.10.20，我们所创建的虚拟机也会随机分配一个同网关的IP，如192.168.10.22。</p></li><li><p><strong>使用NAT模式</strong>：VMware的DHCP服务器分配给虚拟机一个内网IP地址（与实体机不是同一个网段），同时也会分配给实体机一个和虚拟机同网段的虚拟IP，用于实体机和虚拟机之间的通信。这时虚拟机可以访问外网，但是外网无法直接访问虚拟机。</p></li><li><p><strong>仅主机模式</strong>：虚拟机只能和实体机通信，无法访问外网。</p></li></ol><div class="note info flat"><h2 id="桥接模式（Bridged）"><a href="#桥接模式（Bridged）" class="headerlink" title="桥接模式（Bridged）"></a><strong>桥接模式（Bridged）</strong></h2><h3 id="🌟-特点"><a href="#🌟-特点" class="headerlink" title="🌟 特点"></a><strong>🌟 特点</strong></h3><ul><li><strong>虚拟机与物理机处于同一网络（局域网）</strong>，相当于直接连接到物理网络。</li><li><strong>虚拟机可以获取与物理机相同网段的 IP 地址</strong>（由路由器或 DHCP 服务器分配）。</li><li><strong>虚拟机与外网、局域网中的其他设备可以互相访问</strong>，与一台真实电脑无异。</li><li><strong>需要物理机的网络正常工作，虚拟机才能联网</strong>。</li></ul><h3 id="📌-适用场景"><a href="#📌-适用场景" class="headerlink" title="📌 适用场景"></a><strong>📌 适用场景</strong></h3><p>✅ 需要让虚拟机像一台<strong>独立的计算机</strong>，可被局域网内其他设备访问，例如：</p><ul><li>在虚拟机上搭建 Web 服务器、数据库服务器等，需要被局域网或互联网访问。</li><li>需要让虚拟机使用与物理机相同的网关和 IP 分配方式（DHCP 或静态 IP）。</li><li>在公司&#x2F;学校的局域网中，希望虚拟机能像普通电脑一样访问内部资源。</li></ul><h2 id="NAT-模式（Network-Address-Translation，网络地址转换）"><a href="#NAT-模式（Network-Address-Translation，网络地址转换）" class="headerlink" title="NAT 模式（Network Address Translation，网络地址转换）"></a><strong>NAT 模式（Network Address Translation，网络地址转换）</strong></h2><h3 id="🌟-特点-1"><a href="#🌟-特点-1" class="headerlink" title="🌟 特点"></a><strong>🌟 特点</strong></h3><ul><li><strong>虚拟机可以访问外网，但外网无法直接访问虚拟机</strong>（VMware 充当 NAT 路由器）。</li><li><strong>虚拟机的 IP 由 VMware 自己的 DHCP 服务器分配</strong>，通常是 <code>192.168.XXX.XXX</code>，<strong>与物理机不同网段</strong>。</li><li><strong>所有虚拟机共享物理机的 IP 地址访问外网</strong>，就像一台设备连接路由器一样。</li></ul><h3 id="📌-适用场景-1"><a href="#📌-适用场景-1" class="headerlink" title="📌 适用场景"></a><strong>📌 适用场景</strong></h3><p>✅ 适用于<strong>只需要访问外网，但不希望虚拟机被外部访问</strong>的情况，例如：</p><ul><li>在虚拟机上安装和测试软件，需要联网但不需要其他设备访问它。</li><li>适用于公司&#x2F;学校等有严格网络限制的环境，防止虚拟机暴露在局域网中。</li></ul><h2 id="仅主机模式（Host-Only）"><a href="#仅主机模式（Host-Only）" class="headerlink" title="仅主机模式（Host-Only）"></a><strong>仅主机模式（Host-Only）</strong></h2><h3 id="🌟-特点-2"><a href="#🌟-特点-2" class="headerlink" title="🌟 特点"></a><strong>🌟 特点</strong></h3><ul><li><strong>虚拟机只能与物理机通信，无法访问外网</strong>。</li><li><strong>虚拟机 IP 由 VMware 的 DHCP 服务器分配</strong>，通常在 <code>192.168.56.XXX</code>（VMnet1）。</li><li><strong>与物理机建立一个“私有局域网”</strong>，其他外部设备无法访问虚拟机。</li><li><strong>适用于封闭式环境</strong>，如软件开发和测试。</li></ul><h3 id="📌-适用场景-2"><a href="#📌-适用场景-2" class="headerlink" title="📌 适用场景"></a><strong>📌 适用场景</strong></h3><p>✅ 适用于<strong>不需要互联网</strong>，只需要与物理机通信的情况，例如：</p><ul><li>测试本地网络服务，如数据库、Web 服务器等。</li><li><strong>多台虚拟机</strong> 之间需要通信，但不希望它们访问互联网。</li><li><strong>搭建离线环境</strong>（如模拟内部企业网络）。</li></ul></div><h2 id="安装vmtools"><a href="#安装vmtools" class="headerlink" title="安装vmtools"></a>安装vmtools</h2><ul><li>介绍</li></ul><ol><li>vmtools可以让我们在windos下更好地管理VMware虚拟机</li><li>可以设置windows和centOS的共享文件夹，即让实体机和虚拟机可以访问相同的文件夹。</li></ol><ul><li>安装步骤</li></ul><div class="note info flat"><p>安装VMware Tools需要有gcc。我们在安装虚拟机时若选择了安装“开发工具”就会有gcc，如果没选择就需要先自行安装gcc。</p></div><ol><li>打开VMware，进入centOS，点击VMware上方菜单栏中的”虚拟机(M)“选项，点击”重新安装VMware Tools“。</li></ol><img src="https://s2.loli.net/2025/01/18/X371gCDTlqPMSAa.png" alt="img" style="zoom:33%;" /><p> 1.1 此处如果”重新安装VMware Tools“按钮是灰色的，无法点击。则先关闭虚拟机，然后点击””编辑虚拟机设置”。</p><img src="https://s2.loli.net/2025/01/18/TWib4xh16CMmwEr.png" alt="img" style="zoom:33%;" /><div class="note info flat"><p>日常不需要使用虚拟机时，可以选择“挂起客户机”，而不用关机，下次开启虚拟机时会和挂起前的虚拟机状态一样</p></div><img src="https://s2.loli.net/2025/01/18/2YPG8QZFv3iEdaw.png" alt="img" style="zoom:33%;" /><p>1.2 在虚拟机设置中选择CD&#x2F;DVD(IDE)选项，然后选择“使用物理驱动器”。重新启动虚拟机,使用root用户进行登录，重新安装VMware Tools。</p><img src="https://s2.loli.net/2025/01/18/Vk6GiHc42PXypKn.png" alt="img" style="zoom:33%;" /><ol start="2"><li>重新安装VMware Tools后，出现下面的光盘。</li></ol><img src="https://s2.loli.net/2025/01/18/v7aRuitzKkGoB1D.png" alt="img" style="zoom:33%;" /><ol start="3"><li>双击打开该光盘后，会得到下面的几个文件。</li></ol><img src="https://s2.loli.net/2025/01/18/atso6VOBiIePKgC.png" alt="img" style="zoom: 50%;" /><ol start="4"><li>将图片中第三个，以.tar.gz结尾的文件右击复制，然后粘贴到桌面。</li></ol><img src="https://s2.loli.net/2025/01/18/YIMl5edLZn63gXO.png" alt="img" style="zoom:33%;" /><ol start="5"><li>在桌面上单击鼠标右键，点击“Open Terminal”，打开一个终端。</li></ol><img src="D:\Typora\图片\image-20250118135512909.png" alt="img" style="zoom:33%;" /><ol start="6"><li>然后依次输入以下命令（没输入一条命令就按一次回车）。我们移动到Desktop文件夹下，可以看到我们刚刚复制到桌面的文件。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@ryan ~]# <span class="built_in">ls</span></span><br><span class="line">anaconda-ks.cfg  Documents  initial-setup-ks.cfg  Pictures  Templates</span><br><span class="line">Desktop          Downloads  Music                 Public    Videos</span><br><span class="line">[root@ryan ~]# <span class="built_in">cd</span> Desktop/</span><br><span class="line">[root@ryan Desktop]# <span class="built_in">ls</span></span><br><span class="line">VMwareTools-10.3.23-16594550.tar.gz</span><br><span class="line">[root@ryan Desktop]#</span><br></pre></td></tr></table></figure><blockquote><p>[root@ryan ~]# 解析：</p><p>root：用户名</p><p>ryan：计算机名</p><p>~：表示当前在home目录下，即该位置放的是目录名</p><p>#：输入命令提示符，即在#号后面，是用户输入的命令行</p><p><strong>Linux 命令行（Command Line Interface，CLI）</strong>是用户与 Linux 操作系统交互的重要方式，主要通过 <strong>终端（Terminal）</strong> 或 <strong>Shell</strong> 运行命令来管理系统、处理文件、执行程序等。</p><p><strong>命令ls</strong>：显示当前目录下有哪些文件夹或文件</p><p><strong>命令cd</strong>：进入到指定的文件夹中</p></blockquote><ol start="7"><li>输入以下命令解压缩该文件。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ryan Desktop]# tar zxvf VMwareTools-10.3.23-16594550.tar.gz </span><br></pre></td></tr></table></figure><blockquote><p>文件名很长，我们可以先输入<code>VM</code>两个字母，然后按tab键，就会自动补全文件名。</p></blockquote><ol start="8"><li>解压缩后输入<code>ls</code>，可以发现多了一个文件夹。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@ryan Desktop]# <span class="built_in">ls</span></span><br><span class="line">VMwareTools-10.3.23-16594550.tar.gz  vmware-tools-distrib</span><br><span class="line">[root@ryan Desktop]# </span><br></pre></td></tr></table></figure><ol start="9"><li>使用cd命令进入该文件夹，文件名补全方式如之前的操作一致。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@ryan Desktop]# <span class="built_in">cd</span> vmware-tools-distrib/</span><br><span class="line">[root@ryan vmware-tools-distrib]# <span class="built_in">ls</span></span><br><span class="line">bin  caf  doc  etc  FILES  INSTALL  installer  lib  vgauth  vmware-install.pl</span><br><span class="line">[root@ryan vmware-tools-distrib]# </span><br></pre></td></tr></table></figure><ol start="10"><li>执行<code> vmware-install.pl</code>这个文件(使用了root用户登录可使用下面的命令进行执行)</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ryan vmware-tools-distrib]# ./vmware-install.pl</span><br></pre></td></tr></table></figure><p>没有使用root用户登录的可使用下面的命令进行执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ryan vmware-tools-distrib]# <span class="built_in">sudo</span> ./vmware-install.pl</span><br></pre></td></tr></table></figure><blockquote><p>使用sudo代表使用管理员权限进行操作，回车后会需要输入密码，直接在键盘上输入密码即可，密码在终端上是不显示的，输入完密码后点击回车即可。</p></blockquote><ol start="11"><li>输入完命令后，下面所有操作都直接回车，直到出现最后一个选项<code>Would you like to recover the wasted disk space by uninstalling VMware Tools at this time? (yes/no) [yes] </code> ，这里要输入NO，然后回车。（下面截取的是执行成功后的一小部分片段）</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">VMware Tools installed on top of open-vm-tools has not added anything of </span><br><span class="line">significance or potential benefit.  VMware Tools is not needed.</span><br><span class="line"></span><br><span class="line">Would you like to recover the wasted disk space by uninstalling VMware Tools at</span><br><span class="line">this <span class="keyword">time</span>? (<span class="built_in">yes</span>/no) [<span class="built_in">yes</span>] no</span><br><span class="line"></span><br><span class="line">INPUT: [no]</span><br><span class="line"></span><br><span class="line">Enjoy,</span><br><span class="line"></span><br><span class="line">--the VMware team</span><br><span class="line"></span><br><span class="line">[root@ryan vmware-tools-distrib]# </span><br></pre></td></tr></table></figure><blockquote><p>出现 <code>--the VMware team</code>，就表示安装成功了</p></blockquote><ol start="12"><li>安装成功后，刚才桌面上的两个文件就可以删掉了。</li></ol><h2 id="设置共享文件夹"><a href="#设置共享文件夹" class="headerlink" title="设置共享文件夹"></a>设置共享文件夹</h2><ol><li><p>先在实体机创建一个文件夹。在该文件夹中随便创建一个文件。</p></li><li><p>回到VMware，鼠标右键虚拟机，点击设置。</p></li></ol><img src="https://s2.loli.net/2025/01/18/pGqlCEsKid7fIrT.png" alt="img" style="zoom:33%;" /><ol start="3"><li>进入设置选项卡后点击上方的“选项”。进入“选项”卡界面，点击“共享文件夹”，选择“总是启用”，然后在下方的“文件夹”选项中点击添加，将刚才在实体机创建的文件夹添加进来，最后点击确定。</li></ol><img src="https://s2.loli.net/2025/01/18/xBYugXOVfT5dZql.png" alt="img" style="zoom: 33%;" /><ol start="4"><li>在虚拟机中查看该文件夹。进入虚拟机，打开文件管理器。点击“Other Locations”后，点击”Computer”。</li></ol><img src="https://s2.loli.net/2025/01/18/Yr4WEU9NfqoHDeO.png" alt="img" style="zoom:33%;" /><ol start="5"><li>进入后，点击”mnt”文件夹，进入后点击”hgfs”文件夹，进入后就能看到我们共享的文件夹了。</li></ol><img src="https://s2.loli.net/2025/01/18/5YXqlipjMU4ScdR.png" alt="img" style="zoom:33%;" /><img src="https://s2.loli.net/2025/01/18/Usvw3ybTIeDa9NS.png" alt="img" style="zoom:33%;" /><img src="https://s2.loli.net/2025/01/18/KNTWyS7oLjAunlp.png" alt="img" style="zoom:33%;" /><blockquote><p>windows和虚拟机centOS可以通过创建共享文件夹来实现文件共享，但是在实际开发中，文件的上传下载是需要使用<strong>远程方式</strong>来实现的。</p></blockquote><h1 id="三、Linux的目录结构"><a href="#三、Linux的目录结构" class="headerlink" title="三、Linux的目录结构"></a>三、Linux的目录结构</h1><ul><li>基本介绍</li></ul><ol><li><p>Linux的文件系统是采用级层式的树状目录结构，在此结构中的最上层是根目录<code>&quot;/&quot;</code>,然后在此目录下再创建其他的目录。</p></li><li><p>Linux中经典的一句话：<strong>在Linux中，一切皆文件</strong>。</p></li><li><p>Linux文件系统层次结构图：</p></li></ol><p><img src="https://images.hanzz.red/hanzz.red_image/image-ad4d67fdf8d14e7f8f64830d11464267.png" alt="img"></p><h2 id="Linux目录结构详解"><a href="#Linux目录结构详解" class="headerlink" title="Linux目录结构详解"></a>Linux目录结构详解</h2><ul><li><strong>&#x2F;bin</strong> (&#x2F;ust&#x2F;bin、&#x2F;usr&#x2F;local&#x2F;bin)：是binary的缩写，这个目录存放着最常用的命令。</li><li><strong>&#x2F;sbin</strong>(&#x2F;usr&#x2F;sbin、&#x2F;usr&#x2F;local&#x2F;sbin)：s就是super user，这个目录存放的是系统管理员使用的系统管理程序。</li><li><strong>&#x2F;home</strong>：存放普通用户的主目录，在Linux中每个用户都有一个自己的目录，一般该目录名是以用户的账号名命名的。如下，进入到home目录下使用<code>ls</code>命令进行查看，其中<code>ryantwo</code>就是我安装centOS时配置的普通用户的用户名。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@ryan home]# <span class="built_in">ls</span></span><br><span class="line">ryantwo</span><br><span class="line">[root@ryan home]# </span><br></pre></td></tr></table></figure><ul><li><p><strong>&#x2F;root</strong>：该目录为系统管理员，也称为超级权限者的用户主目录。</p></li><li><p><strong>&#x2F;lib</strong>：系统开机所需要的最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。</p></li><li><p><strong>&#x2F;lost+found</strong>：（这个在上方的图片中没有，因为这个是一个隐藏文件，在Linux中的根目录下是存在的）这个目录一般情况下是空的，当系统非法关机时，这里就存放了一些文件。</p></li><li><p><strong>&#x2F;etc</strong>：所有的系统管理所需要的配置文件和子目录，比如安装mysql数据库，my.conf会存放在该目录下</p></li><li><p><strong>&#x2F;usr</strong>：这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于Windows下的program files目录。</p></li><li><p><strong>&#x2F;boot</strong>：存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件</p></li><li><p><strong>&#x2F;proc</strong>：这个目录是一个虚拟目录，它是系统内存的映射，访问这个目录来获取系统信息（不要随意尝试更改该目录中的内容）</p></li><li><p><strong>&#x2F;srv</strong>：service缩写，该目录存放一些服务启动后需要提取的数据。（不要随意尝试更改该目录中的内容）</p></li><li><p><strong>&#x2F;sys</strong>：这是Linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统<code>sysfs</code>。（不要随意尝试更改该目录中的内容）</p></li><li><p><strong>&#x2F;tmp</strong>：这个目录用来存放一些临时文件</p></li><li><p><strong>&#x2F;dev</strong>：类似于Windows的设备管理器，把所有的硬件用文件的形式存储</p></li><li><p><strong>&#x2F;media</strong>：Linux系统会自动识别一些设备，例如U盘、光驱等等，当识别到后，Linux会把识别到的设备挂载到该目录下。</p></li></ul><blockquote><p>例如在安装有Windows系统的的电脑上插入一个U盘，我们可以在文件资源管理器中发现多了一个该U盘的盘符，而不是将该U盘放到已有的盘符如C盘、D盘中。</p></blockquote><ul><li><p><strong>&#x2F;mnt</strong>：系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将外部的存储挂载在&#x2F;mnt&#x2F;上，然后进入该目录就可以查看其中的内容了。如之前创建的<strong>共享文件夹</strong>：E:\VM\share。</p></li><li><p><strong>&#x2F;opt</strong>：这是给主机<strong>额外安装软件</strong>所存放的目录。如要安装oracle数据库，可以先把安装包放到该目录下，然后再进行安装操作（这一般是约定俗成的操作）。默认为空。</p></li><li><p><strong>&#x2F;usr&#x2F;local</strong>：这个是另一个给主机额外安装软件时该软件程序文件存放的目录。一般是通过编译源码方式安装的程序。</p></li><li><p><strong>&#x2F;var</strong>：这个目录中存放着再不断扩充着的东西，习惯将经常被修改的目录放在这个目录下。包括各种日志文件。</p></li><li><p><strong>&#x2F;selinux</strong>：security-enhanced linux，（这个目录需要启用才能看到）SELinux是一种安全子系统，它能控制程序只能访问特定文件，有三种工作方式，可以自行设置。</p></li></ul><h1 id="四、Linux命令行概念"><a href="#四、Linux命令行概念" class="headerlink" title="四、Linux命令行概念"></a>四、Linux命令行概念</h1><p>Linux <strong>命令行（Command Line Interface，CLI）</strong> 是一种通过文本输入命令来操作系统的方式。相比图形界面（GUI），命令行提供了更强大的控制能力，适用于 <strong>服务器管理、自动化任务、开发、运维</strong> 等工作。</p><p><a href="https://www.linuxcool.com/">Linux命令大全(手册)</a>：Linux命令是非常多的，我们需要使用时可以进行查询</p><hr><h2 id="终端（Terminal）与-Shell"><a href="#终端（Terminal）与-Shell" class="headerlink" title="终端（Terminal）与 Shell"></a><strong>终端（Terminal）与 Shell</strong></h2><p>在 Linux 中，命令行是通过 <strong>终端（Terminal）</strong> 访问的，而 <strong>Shell</strong> 是解析用户命令的程序，常见的 Shell 包括：</p><ul><li><strong>Bash（默认 Shell）</strong>：大多数 Linux 发行版默认使用的 Shell。</li><li><strong>Zsh</strong>：功能强大的 Shell，支持自动补全、插件等。</li><li><strong>Fish</strong>：更易用的交互式 Shell。</li><li><strong>Sh</strong>：最基本的 Shell，功能较少。</li></ul><p>你可以通过以下命令查看当前使用的 Shell：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$SHELL</span></span><br></pre></td></tr></table></figure><p>如果返回：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash</span><br></pre></td></tr></table></figure><p>说明当前使用的是 <strong>Bash</strong>。</p><div class="note info flat"><p>使用命令行要特别注意各参数之间的<strong>空格</strong></p></div><h1 id="五、远程登录到Linux服务器"><a href="#五、远程登录到Linux服务器" class="headerlink" title="五、远程登录到Linux服务器"></a>五、远程登录到Linux服务器</h1><h2 id="为什么需要远程登录服务器"><a href="#为什么需要远程登录服务器" class="headerlink" title="为什么需要远程登录服务器"></a>为什么需要远程登录服务器</h2><ol><li>在实际开发中，Linux服务器是开发小组共享的</li><li>正式上线的项目是运行在公网的</li><li>因此程序员需要远程登录到Linux进行项目管理和开发</li><li>远程登录客户端有Xshell、Xftp等</li></ol><h2 id="使用Xshell远程连接Linux"><a href="#使用Xshell远程连接Linux" class="headerlink" title="使用Xshell远程连接Linux"></a>使用Xshell远程连接Linux</h2><ol><li>在虚拟机中打开一个终端Terminal，然后输入<code>ifconfig</code>来获取虚拟机的IP地址。</li></ol><img src="https://s2.loli.net/2025/01/18/3miyVFjHkKGvLrC.png" alt="img" style="zoom:33%;" /><ol><li>安装好Xshell并打开。</li><li>点击左上角的”文件“，然后点击”新建“。</li></ol><img src="https://s2.loli.net/2025/01/18/ERnPZGWSbi9k5Ny.png" alt="img" style="zoom: 33%;" /><ol start="3"><li>填写名称，协议选择<code>SSH</code>，主机就填写刚才得到的虚拟机的IP地址，端口号选择<code>22</code>，最后点击连接。</li></ol><img src="https://s2.loli.net/2025/01/18/fQPuFTbBhHoaW5S.png" alt="img" style="zoom:33%;" /><ol start="4"><li>在弹出的SSH安全警告中选择”接受并保存“，接下来就输入登录账户名密码即可。</li></ol><h2 id="远程上传下载文件-Xftp"><a href="#远程上传下载文件-Xftp" class="headerlink" title="远程上传下载文件 - Xftp"></a>远程上传下载文件 - Xftp</h2><ul><li>介绍</li></ul><p>Xftp是一个基于windows平台的功能强大的SFTP、FTP文件传输软件。使用了Xftp以后，Windows用户能安全地在UNIX&#x2F;Linux和Windows之间传输文件。</p><ol><li><p>安装并运行Xftp。</p></li><li><p>点击左上角的”新建”，填写名称，主机填写虚拟机的IP地址，协议选择SFTP，端口号依旧是22，然后点击连接。</p></li></ol><img src="https://s2.loli.net/2025/01/19/QYnUfRKMbNwmh54.png" alt="img" style="zoom:33%;" /><ol start="3"><li>然后输入要登录的用户名和密码即可。</li></ol><img src="https://s2.loli.net/2025/01/19/25CockEta8hSgzi.png" alt="img" style="zoom: 33%;" /><ol start="4"><li>传输文件，右边Linux系统用鼠标点击进入要保存传输文件的目录下，然后在左边Windows中找到要传输的文件，鼠标右键该文件，点击第一个“传输”即可。</li></ol><img src="https://s2.loli.net/2025/01/19/mldBvbkNqQyWzS6.png" alt="img" style="zoom:33%;" /><ul><li>细节讨论：如何处理Xftp中文乱码问题。</li></ul><ol><li>打开Xftp，点击上方菜单栏中的“属性”。</li></ol><img src="https://s2.loli.net/2025/01/19/sKgmX7lc2pJnHq9.png" alt="img" style="zoom:33%;" /><ol start="2"><li>在打开的属性弹窗中点击上方菜单栏的“选项”，将“编码”选项更改为“Unicode(UTF-8)”，最后点击”确定”即可。</li></ol><img src="https://s2.loli.net/2025/01/19/Mvcgk2PR1SDhzsY.png" alt="img" style="zoom: 33%;" /><h1 id="六、-Vim-基本介绍"><a href="#六、-Vim-基本介绍" class="headerlink" title="六、 Vim 基本介绍"></a><strong>六、 Vim 基本介绍</strong></h1><h2 id="🔹-什么是-Vim？"><a href="#🔹-什么是-Vim？" class="headerlink" title="🔹 什么是 Vim？"></a><strong>🔹 什么是 Vim？</strong></h2><p><strong>Vim（Vi IMproved）</strong> 是 <strong>Vi 编辑器的增强版</strong>，（vi是所有Linux发行版默认的文本编辑器）是 <strong>Linux 和 macOS</strong> 上常用的 <strong>文本编辑器</strong>。它功能强大，支持 <strong>语法高亮、查找替换、多级撤销、插件扩展</strong> 等，适用于程序员和系统管理员。</p><hr><h2 id="1️⃣-Vim-的三种模式"><a href="#1️⃣-Vim-的三种模式" class="headerlink" title="1️⃣ Vim 的三种模式"></a><strong>1️⃣ Vim 的三种模式</strong></h2><p>Vim 主要有 <strong>三种模式</strong>：</p><table><thead><tr><th>模式</th><th>作用</th><th>进入方法</th></tr></thead><tbody><tr><td><strong>普通模式（Normal Mode）</strong></td><td>用于 <strong>浏览</strong> 和 <strong>操作文本</strong></td><td>启动 Vim 或按 <code>Esc</code></td></tr><tr><td><strong>插入模式（Insert Mode）</strong></td><td>用于 <strong>输入文本</strong></td><td><code>i</code> &#x2F; <code>a</code> &#x2F; <code>o</code></td></tr><tr><td><strong>命令模式（Command Mode）</strong></td><td>用于 <strong>保存、查找、替换等</strong></td><td>在普通模式下按 <code>:</code></td></tr></tbody></table><hr><h2 id="2️⃣-Vim-的基本操作"><a href="#2️⃣-Vim-的基本操作" class="headerlink" title="2️⃣ Vim 的基本操作"></a><strong>2️⃣ Vim 的基本操作</strong></h2><h3 id="📌-启动-Vim"><a href="#📌-启动-Vim" class="headerlink" title="📌 启动 Vim"></a><strong>📌 启动 Vim</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ryan home]# vim 文件名</span><br></pre></td></tr></table></figure><ul><li><strong>如果文件已存在</strong>，Vim 会打开文件</li><li><strong>如果文件不存在</strong>，Vim 会新建一个文件</li></ul><hr><h3 id="📌-进入插入模式（编辑文本）"><a href="#📌-进入插入模式（编辑文本）" class="headerlink" title="📌 进入插入模式（编辑文本）"></a><strong>📌 进入插入模式（编辑文本）</strong></h3><p>按以下键之一：</p><table><thead><tr><th>按键</th><th>作用</th></tr></thead><tbody><tr><td><code>i</code></td><td>在光标前插入</td></tr><tr><td><code>a</code></td><td>在光标后插入</td></tr><tr><td><code>o</code></td><td>在下一行插入新行</td></tr><tr><td><code>I</code></td><td>在当前行行首插入</td></tr><tr><td><code>A</code></td><td>在当前行行尾插入</td></tr></tbody></table><hr><h3 id="📌-退出-Vim"><a href="#📌-退出-Vim" class="headerlink" title="📌 退出 Vim"></a><strong>📌 退出 Vim</strong></h3><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><code>:q</code></td><td>退出（如果文件未修改）</td></tr><tr><td><code>:q!</code></td><td>强制退出（不保存）</td></tr><tr><td><code>:w</code></td><td>只保存，不退出</td></tr><tr><td><code>:wq</code> 或 <code>ZZ</code></td><td>保存并退出</td></tr><tr><td><code>:x</code></td><td>保存并退出（仅在修改过内容时保存）</td></tr></tbody></table><hr><h3 id="📌-在普通模式下移动光标"><a href="#📌-在普通模式下移动光标" class="headerlink" title="📌 在普通模式下移动光标"></a><strong>📌 在普通模式下移动光标</strong></h3><table><thead><tr><th>按键</th><th>作用</th></tr></thead><tbody><tr><td><code>h</code></td><td>左移</td></tr><tr><td><code>l</code></td><td>右移</td></tr><tr><td><code>j</code></td><td>下移</td></tr><tr><td><code>k</code></td><td>上移</td></tr><tr><td><code>gg</code></td><td>移动到文件首行</td></tr><tr><td><code>G</code></td><td>移动到文件末行</td></tr><tr><td><code>nG</code></td><td>移动到第 <code>n</code> 行</td></tr><tr><td><code>0</code></td><td>移动到行首</td></tr><tr><td><code>^</code></td><td>移动到行首（跳过空格）</td></tr><tr><td><code>$</code></td><td>移动到行尾</td></tr></tbody></table><hr><h3 id="📌-复制、粘贴、删除"><a href="#📌-复制、粘贴、删除" class="headerlink" title="📌 复制、粘贴、删除"></a><strong>📌 复制、粘贴、删除</strong></h3><table><thead><tr><th>按键</th><th>作用</th></tr></thead><tbody><tr><td><code>yy</code></td><td>复制当前行</td></tr><tr><td><code>p</code></td><td>粘贴到光标后</td></tr><tr><td><code>dd</code></td><td>删除当前行</td></tr><tr><td><code>x</code></td><td>删除当前字符</td></tr><tr><td><code>dw</code></td><td>删除一个单词</td></tr><tr><td><code>u</code></td><td>撤销</td></tr><tr><td><code>Ctrl + r</code></td><td>反撤销</td></tr></tbody></table><hr><h3 id="📌-搜索与替换"><a href="#📌-搜索与替换" class="headerlink" title="📌 搜索与替换"></a><strong>📌 搜索与替换</strong></h3><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><code>/关键字</code></td><td>向下搜索</td></tr><tr><td><code>?关键字</code></td><td>向上搜索</td></tr><tr><td><code>n</code></td><td>跳到下一个匹配项</td></tr><tr><td><code>N</code></td><td>跳到上一个匹配项</td></tr><tr><td><code>:%s/旧/新/g</code></td><td>替换文件中所有 <code>旧</code> 为 <code>新</code></td></tr><tr><td><code>:n,m s/旧/新/g</code></td><td>替换 <code>n</code> 到 <code>m</code> 行的 <code>旧</code> 为 <code>新</code></td></tr></tbody></table><hr><h2 id="3️⃣-Vim-配置（举例）"><a href="#3️⃣-Vim-配置（举例）" class="headerlink" title="3️⃣ Vim 配置（举例）"></a><strong>3️⃣ Vim 配置（举例）</strong></h2><p>可以在 <code>~/.vimrc</code> 中添加个性化配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bash复制编辑set number       &quot; 显示行号</span><br><span class="line">set autoindent   &quot; 自动缩进</span><br><span class="line">set tabstop=4    &quot; 设置 Tab 宽度</span><br><span class="line">syntax on        &quot; 语法高亮</span><br></pre></td></tr></table></figure><h1 id="七、Linux开机、重启和用户登录注销"><a href="#七、Linux开机、重启和用户登录注销" class="headerlink" title="七、Linux开机、重启和用户登录注销"></a>七、Linux开机、重启和用户登录注销</h1><h2 id="关机-重启命令"><a href="#关机-重启命令" class="headerlink" title="关机&amp;重启命令"></a>关机&amp;重启命令</h2><table><thead><tr><th>命令</th><th>执行结果</th></tr></thead><tbody><tr><td>shutdown -h now</td><td>立刻进行关机</td></tr><tr><td>shutdown -h 1</td><td>提示1分钟后关机</td></tr><tr><td>shutdown -r now</td><td>立刻重启计算机</td></tr><tr><td>halt</td><td>立刻进行关机</td></tr><tr><td>reboot</td><td>立刻重启计算机</td></tr><tr><td>sync</td><td>把内存的数据同步到磁盘</td></tr></tbody></table><ul><li>注意细节：</li></ul><ol><li>不管是重启系统还是关机，首先要运行sync命令，把内存中的数据写到磁盘中</li><li>目前的shutdown&#x2F;reboot&#x2F;halt等命令均在底层实现在关机前默认执行sync命令。(但小心驶得万年船，最好自己先执行一次)</li></ol><h2 id="用户登录和注销"><a href="#用户登录和注销" class="headerlink" title="用户登录和注销"></a>用户登录和注销</h2><ul><li>基本介绍</li></ul><ol><li>登录时尽量少用root账户进行登录，因为它是系统管理员，拥有最高权限，避免操作失误。可以利用普通用户登录，登录后在用<code>su - 用户名</code>命令来切换成系统管理员身份。</li><li>在终端下输入logout即可注销用户</li></ol><ul><li>使用细节</li></ul><ol><li>logout注销指令在图形运行级别(即安装了图像界面的Linux)无效，在运行级别3(无图形界面)下有效。</li><li>运行级别的概念在之后进行介绍。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[ryantwo@ryan ~]$ su - root // ryantwo普通用户-&gt; 切换到root用户</span><br><span class="line">Password:  // 输入密码是看不见的，密码直接输入，输入完成后按回车</span><br><span class="line">Last login: Sat Jan 18 23:29:16 EST 2025 on pts/1</span><br><span class="line">[root@ryan ~]# <span class="built_in">logout</span>  // 这里用户变成了root，然后使用命令注销root用户</span><br><span class="line">[ryantwo@ryan ~]$   // 回到ryantwo普通用户下</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>这里有个小细节：普通用户输入命令前面的符号是<code>$</code>，root用户输入命令前面的符号是<code>#</code>。</p></blockquote><h1 id="八、用户管理"><a href="#八、用户管理" class="headerlink" title="八、用户管理"></a>八、用户管理</h1><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>Linux系统是一个多用户多任务的操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统</p><h2 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h2><ul><li>基本语法</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd 用户名</span><br></pre></td></tr></table></figure><ul><li>细节说明</li></ul><ol><li>当创建用户成功后，会自动的创建和用户名同名的家目录，默认放在&#x2F;home&#x2F;下。</li><li>也可以通过一下命令，给新创建的用户指定home目录。</li><li>创建用户后，用户的文件都放在其家目录下</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -d 指定目录 新用户名</span><br></pre></td></tr></table></figure> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@ryan home]# <span class="built_in">ls</span></span><br><span class="line">ryantwo</span><br><span class="line">[root@ryan home]# useradd ryanthree</span><br><span class="line">[root@ryan home]# <span class="built_in">ls</span></span><br><span class="line">ryanthree  ryantwo  // 成功创建ryanthree用户</span><br><span class="line">[root@ryan home]# <span class="built_in">cd</span> ryantwo  // 进入到用户ryantwo的家目录中</span><br><span class="line">[root@ryan ryantwo]# <span class="built_in">ls</span>  // 显示用户ryantwo家目录下的文件夹和文件</span><br><span class="line">Desktop  Documents  Downloads  Music  Pictures  Public  Templates  Videos</span><br><span class="line">[root@ryan ryantwo]# <span class="built_in">pwd</span>  // 显示当前目录的绝对路径</span><br><span class="line">/home/ryantwo // 表示当前位于`/`目录下的`home`目录下的`ryantwo`目录中</span><br><span class="line">[root@ryan ryantwo]# </span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>补充一条命令：<strong>pwd</strong>。显示当前目录的<strong>绝对路径</strong>。</p></blockquote><h2 id="指定或修改密码"><a href="#指定或修改密码" class="headerlink" title="指定或修改密码"></a>指定或修改密码</h2><ul><li>基本语法</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd 用户名</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@ryan home]# passwd ryanthree   // 给ryanthree用户指定密码</span><br><span class="line">Changing password <span class="keyword">for</span> user ryanthree.</span><br><span class="line">New password:   // 这里通过键盘输入密码，但是是不显示的</span><br><span class="line">Retype new password:   // 这里重新输入密码，同样不显示 </span><br><span class="line">passwd: all authentication tokens updated successfully.  // 密码指定成功</span><br><span class="line">[root@ryan home]# </span><br></pre></td></tr></table></figure><h2 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h2><ul><li>基本语法(删除用户是需要root权限的)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(1) userdel 用户名   // 表示删除指定的用户，但保留用户的家目录。(虽然保留了家目录，但是该用户已经不能在登录了)</span><br><span class="line">(2) userdel -r 用户名    // 表示删除用户以及用户的家目录</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@ryan home]# <span class="built_in">ls</span></span><br><span class="line">ryanfour  ryanthree  ryantwo</span><br><span class="line">[root@ryan home]# userdel ryanthree // 删除ryanthree，但是保留家目录</span><br><span class="line">[root@ryan home]# <span class="built_in">ls</span></span><br><span class="line">ryanfour  ryanthree  ryantwo</span><br><span class="line">[root@ryan home]# userdel -r ryanfour // 删除ryanfour，并且不保留家目录</span><br><span class="line">[root@ryan home]# <span class="built_in">ls</span></span><br><span class="line">ryanthree  ryantwo</span><br><span class="line">[root@ryan home]# </span><br></pre></td></tr></table></figure><ul><li>细节说明：是否应该保留家目录？</li></ul><p>一般情况下，建议保留。毕竟在不确定该用户的工作内容是否依旧有用的情况下，最好保留下来。</p><h2 id="查询用户信息指令"><a href="#查询用户信息指令" class="headerlink" title="查询用户信息指令"></a>查询用户信息指令</h2><ul><li>基本语法</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">id</span> 用户名</span><br></pre></td></tr></table></figure><p>当用户不存在时，返回无此用户。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@ryan home]# <span class="built_in">id</span> root</span><br><span class="line">uid=0(root) gid=0(root) <span class="built_in">groups</span>=0(root)</span><br><span class="line">[root@ryan home]# <span class="built_in">id</span> ryan100  // ryan100不存在</span><br><span class="line"><span class="built_in">id</span>: ryan100: no such user</span><br><span class="line">[root@ryan home]# </span><br></pre></td></tr></table></figure><blockquote><p><strong>uid</strong>：表示user id，即用户id</p><p><strong>gid</strong>：表示组groups id，即组id</p><p><strong>groups</strong>：表示<strong>组</strong>，用户组</p></blockquote><h2 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h2><ul><li>介绍</li></ul><p>在Linux中，如果当前用户的权限不足，可以通过<code>su - </code>指令，切换到高权限用户，比如root用户。</p><ul><li>基本语法</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su - 所要切换的用户名</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@ryan home]# <span class="built_in">ls</span></span><br><span class="line">ryanthree  ryantwo</span><br><span class="line">[root@ryan home]# su - ryantwo  // root -&gt; 普通用户：不需要密码</span><br><span class="line">Last login: Sun Jan 19 04:35:55 EST 2025 on pts/0</span><br><span class="line">[ryantwo@ryan ~]$ su - ryanthree  // 普通用户 -&gt; 普通用户/权限高的用户：需要密码</span><br><span class="line">Password:  // 输入密码</span><br><span class="line">[ryanthree@ryan ~]$ <span class="built_in">logout</span></span><br><span class="line">[ryantwo@ryan ~]$ <span class="built_in">logout</span></span><br><span class="line">[root@ryan home]#   // 回到root用户</span><br></pre></td></tr></table></figure><ul><li>细节说明</li></ul><ol><li><p>从权限高的用户切换到权限低的用户，不需要输入密码，反之需要</p></li><li><p>当需要返回到原来用户时，使用<code>exit或者logout</code>指令即可。</p></li></ol><h2 id="查看当前用户-登录用户"><a href="#查看当前用户-登录用户" class="headerlink" title="查看当前用户&#x2F;登录用户"></a>查看当前用户&#x2F;登录用户</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(1) <span class="built_in">whoami</span>：显示当前操作的用户名</span><br><span class="line">(2) <span class="built_in">who</span> am i：显示第一次登录时的用户名</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@ryan home]# <span class="built_in">whoami</span></span><br><span class="line">root</span><br><span class="line">[root@ryan home]# <span class="built_in">who</span> am i</span><br><span class="line">root     pts/0        2025-01-19 03:36 (192.168.174.1)</span><br><span class="line">[root@ryan home]# su - ryantwo  // 切换为普通用户</span><br><span class="line">Last login: Sun Jan 19 04:36:36 EST 2025 on pts/0</span><br><span class="line">[ryantwo@ryan ~]$ <span class="built_in">whoami</span>  // 当前操作的用户</span><br><span class="line">ryantwo</span><br><span class="line">[ryantwo@ryan ~]$ <span class="built_in">who</span> am i  // 第一次登录的用户</span><br><span class="line">root     pts/0        2025-01-19 03:36 (192.168.174.1)</span><br><span class="line">[ryantwo@ryan ~]$</span><br></pre></td></tr></table></figure><h1 id="九、用户组"><a href="#九、用户组" class="headerlink" title="九、用户组"></a>九、用户组</h1><ul><li>介绍</li></ul><p>类似于角色，系统可以对有共性的多个用户进行统一的管理。在 Linux 中，<strong>用户组（Group）</strong> 是用于组织和管理用户权限的一个重要机制。每个用户（User）可以属于一个或多个组（Group），用户组用于控制 <strong>文件权限、资源访问和管理多个用户</strong> 的权限。</p><h2 id="新增组-添加组"><a href="#新增组-添加组" class="headerlink" title="新增组&#x2F;添加组"></a>新增组&#x2F;添加组</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupadd 组名</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ryan home]# groupadd group01</span><br></pre></td></tr></table></figure><h2 id="删除组"><a href="#删除组" class="headerlink" title="删除组"></a>删除组</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupdel 组名</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ryan home]# groupdel group01</span><br></pre></td></tr></table></figure><h2 id="增加用户时直接加上组"><a href="#增加用户时直接加上组" class="headerlink" title="增加用户时直接加上组"></a>增加用户时直接加上组</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -g 用户组 用户名</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@ryan home]# groupadd group02</span><br><span class="line">[root@ryan home]# useradd -g group02 ryanfive</span><br><span class="line">[root@ryan home]# <span class="built_in">id</span> ryanfive  // 查询用户信息</span><br><span class="line">uid=1002(ryanfive) gid=1002(group02) <span class="built_in">groups</span>=1002(group02)</span><br><span class="line">[root@ryan home]# </span><br></pre></td></tr></table></figure><blockquote><p>创建新用户时若没有指定用户组，那么系统会自动创建一个和用户名相同的用户组，并将该用户划分到该用户组中。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@ryan home]# useradd ryanfour</span><br><span class="line">[root@ryan home]# <span class="built_in">id</span> ryanfour</span><br><span class="line">uid=1003(ryanfour) gid=1003(ryanfour) <span class="built_in">groups</span>=1003(ryanfour)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="修改用户的组"><a href="#修改用户的组" class="headerlink" title="修改用户的组"></a>修改用户的组</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -g 用户组 用户名</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@ryan home]# groupadd group01</span><br><span class="line">[root@ryan home]# <span class="built_in">id</span> ryanthree</span><br><span class="line">uid=1001(ryan three) gid=1001(ryanthree) <span class="built_in">groups</span>=1001(ryanthree)</span><br><span class="line">[root@ryan home]# usermod -g group01 ryanthree</span><br><span class="line">[root@ryan home]# <span class="built_in">id</span> ryanthree</span><br><span class="line">uid=1001(ryanthree) gid=1002(group01) <span class="built_in">groups</span>=1002(group01)</span><br><span class="line">[root@ryan home]# </span><br></pre></td></tr></table></figure><h2 id="用户和组相关文件"><a href="#用户和组相关文件" class="headerlink" title="用户和组相关文件"></a>用户和组相关文件</h2><div class="note info flat"><p>查看文件内容或编辑文件内容的命令在之后进行学习，目前可以通过图形界面下的Linux中的文件资源管理器进行查看。</p></div><ul><li><strong>&#x2F;etc&#x2F;passwd 文件</strong></li></ul><ol><li><p>用户(user)的配置文件，记录用户的各种信息</p></li><li><p>每行的含义：用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell</p></li></ol><ul><li><strong>&#x2F;etc&#x2F;shadow 文件</strong></li></ul><ol><li><p>口令的配置文件</p></li><li><p>每行的含义：登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志</p></li></ol><ul><li><strong>&#x2F;etc&#x2F;group 文件</strong></li></ul><ol><li>组(group)的配置文件，记录Linux包含的组的信息</li><li>每行的含义：组名:口令:组标识号:组内用户列表</li></ol><h1 id="十、Linux实用指令"><a href="#十、Linux实用指令" class="headerlink" title="十、Linux实用指令"></a>十、Linux实用指令</h1><h2 id="指定运行级别"><a href="#指定运行级别" class="headerlink" title="指定运行级别"></a>指定运行级别</h2><ul><li>基本介绍：<strong>运行级别（Runlevel）</strong> 是 Linux <strong>系统启动后进入的不同模式</strong>，控制系统的 <strong>服务</strong>、<strong>进程</strong> 和 <strong>多用户功能</strong>。不同的运行级别决定了系统是以 <strong>命令行模式</strong>、<strong>图形界面模式</strong> 还是 <strong>维护模式</strong> 启动。</li></ul><table><thead><tr><th>运行级别</th><th>说明</th></tr></thead><tbody><tr><td>0</td><td>关机</td></tr><tr><td>1</td><td>单用户模式【维护模式，可以帮助找回丢失密码，仅 root 可用】</td></tr><tr><td>2</td><td>多用户状态没有网络服务</td></tr><tr><td>3</td><td>命令行模式（CLI），多用户状态有网络服务</td></tr><tr><td>4</td><td>预留，通常未使用</td></tr><tr><td>5</td><td>图形界面模式（GUI）</td></tr><tr><td>6</td><td>系统重启</td></tr></tbody></table><blockquote><p>常用运行级别是3和5，也可以指定默认运行级别</p></blockquote><h2 id="如何查看当前运行级别"><a href="#如何查看当前运行级别" class="headerlink" title="如何查看当前运行级别"></a><strong>如何查看当前运行级别</strong></h2><p>不同的 Linux 发行版使用不同的命令：</p><h3 id="🔹-在-SysVinit（CentOS-6-及更早版本）"><a href="#🔹-在-SysVinit（CentOS-6-及更早版本）" class="headerlink" title="🔹 在 SysVinit（CentOS 6 及更早版本）"></a><strong>🔹 在 SysVinit（CentOS 6 及更早版本）</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ryan home]# runlevel</span><br></pre></td></tr></table></figure><p>示例输出：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">N</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>表示当前运行级别是 <code>3</code>（命令行模式）。</p><hr><h3 id="🔹-在-systemd（CentOS-7-、Ubuntu-16-）"><a href="#🔹-在-systemd（CentOS-7-、Ubuntu-16-）" class="headerlink" title="🔹 在 systemd（CentOS 7+、Ubuntu 16+）"></a><strong>🔹 在 systemd（CentOS 7+、Ubuntu 16+）</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ryan home]# systemctl get-default</span><br></pre></td></tr></table></figure><p>示例输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">multi-user.target</span><br><span class="line">或者</span><br><span class="line">graphical.target</span><br></pre></td></tr></table></figure><blockquote><p>表示当前是 **<code>multi-user.target</code>**（相当于 <code>3</code>）。</p><p>表示当前是 **<code>graphical.target</code>**（相当于 <code>5</code>）。</p></blockquote><hr><h2 id="修改运行级别"><a href="#修改运行级别" class="headerlink" title="修改运行级别"></a><strong>修改运行级别</strong></h2><h3 id="🔹-临时修改运行级别"><a href="#🔹-临时修改运行级别" class="headerlink" title="🔹 临时修改运行级别"></a><strong>🔹 临时修改运行级别</strong></h3><p>（仅对当前会话有效，重启后恢复原状态）</p><h4 id="在-SysVinit-系统"><a href="#在-SysVinit-系统" class="headerlink" title="在 SysVinit 系统"></a><strong>在 SysVinit 系统</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@ryan home]# init 5  <span class="comment"># 切换到图形模式</span></span><br><span class="line">[root@ryan home]# init 3  <span class="comment"># 切换到命令行模式</span></span><br></pre></td></tr></table></figure><h4 id="在-systemd-系统"><a href="#在-systemd-系统" class="headerlink" title="在 systemd 系统"></a><strong>在 systemd 系统</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@ryan home]# systemctl isolate graphical.target  <span class="comment"># 切换到图形界面（GUI）</span></span><br><span class="line">[root@ryan home]# systemctl isolate multi-user.target  <span class="comment"># 切换到命令行模式（CLI）</span></span><br></pre></td></tr></table></figure><hr><h3 id="🔹-永久修改运行级别"><a href="#🔹-永久修改运行级别" class="headerlink" title="🔹 永久修改运行级别"></a><strong>🔹 永久修改运行级别</strong></h3><p>（修改后 <strong>重启生效</strong>）</p><h4 id="在-SysVinit-系统-1"><a href="#在-SysVinit-系统-1" class="headerlink" title="在 SysVinit 系统"></a><strong>在 SysVinit 系统</strong></h4><p>编辑 <code>/etc/inittab</code> 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ryan home]# vim /etc/inittab</span><br></pre></td></tr></table></figure><p>找到类似以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">id</span>:3:initdefault:</span><br></pre></td></tr></table></figure><p>修改 <code>3</code> 为 <code>5</code>（如果要进入 GUI）。</p><p>然后重启：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ryan home]# reboot</span><br></pre></td></tr></table></figure><hr><h4 id="在-systemd-系统-1"><a href="#在-systemd-系统-1" class="headerlink" title="在 systemd 系统"></a><strong>在 systemd 系统</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@ryan home]# systemctl set-default graphical.target  <span class="comment"># 设置默认 GUI 模式</span></span><br><span class="line">[root@ryan home]# systemctl set-default multi-user.target  <span class="comment"># 设置默认 CLI 模式</span></span><br></pre></td></tr></table></figure><p>然后重启：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ryan home]# reboot</span><br></pre></td></tr></table></figure><h1 id="十一、找回root密码"><a href="#十一、找回root密码" class="headerlink" title="十一、找回root密码"></a>十一、找回root密码</h1><ol><li>首先，启动系统，进入到开机界面，在界面中按”e“进入编辑界面。</li></ol><img src="https://s2.loli.net/2025/01/21/96NcWq4pFaVjTDE.png" alt="img" style="zoom: 50%;" /><ol start="2"><li>进入编辑界面，使用键盘上的上下方向键，把光标向下移动，找到以”Linux16”开头内容所在的行，然后按左右方向键，将光标移动到该行的末尾，在该行的最后面输入：<code>init=/bin/sh</code>（init前面要有一个空格）。</li></ol><img src="https://s2.loli.net/2025/01/21/qDrdsbRXlLVfUZi.png" alt="img" style="zoom:50%;" /><ol start="3"><li>输入完成后，按快捷键：<code>Ctrl + x </code>进入单用户模式。</li><li>然后在光标闪烁的位置输入：<code>mount -o remount,rw /</code>（注意单词间的空格），输入后按回车。</li></ol><p><img src="https://s2.loli.net/2025/01/21/4qt7TeV89hPpJNn.png" alt="img"></p><ol start="5"><li>在新的一行最后面输入：<code>passwd</code>，完成后按回车。输入密码，<strong>然后再次确认密码</strong>即可。（密码长度最好在8位以上），密码修改成功后，会显示<code>passwd......successfully</code>的样式，说明密码修改成功。</li></ol><p><img src="https://s2.loli.net/2025/01/21/emBkFYfXwUlhIvN.png" alt="img"></p><ol start="6"><li>接着在光标闪烁位置（最后一行中）输入：<code>touch /.autorelabel</code>（注意touch后面有一个空格），输入后按回车。</li></ol><p><img src="https://s2.loli.net/2025/01/21/4yo1NuBgLWfct5X.png" alt="7"></p><ol start="7"><li>接着在光标闪烁位置，输入：<code>exec /sbin/init</code>（注意：exec后面有一个空格），输入完后按回车，等待系统自动修改密码（该过程时间会比较长，耐心等待即可），完成后系统会自动重启，<strong>新的密码就生效了</strong>。</li></ol><p><img src="https://s2.loli.net/2025/01/21/SmVbtMwqZylfQUC.png" alt="img"></p><ol start="8"><li>重启后就可以使用新的密码进行登录，然后可以用之前学过的命令重新更改成别的密码。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@ryan ~]# passwd root</span><br><span class="line">Changing password <span class="keyword">for</span> user root.</span><br><span class="line">New password: </span><br><span class="line">Retype new password: </span><br><span class="line">passwd: all authentication tokens updated successfully.</span><br><span class="line">[root@ryan ~]# reboot  // 重启后即可生效</span><br></pre></td></tr></table></figure><h1 id="十二、帮助指令"><a href="#十二、帮助指令" class="headerlink" title="十二、帮助指令"></a>十二、帮助指令</h1><h2 id="man-指令"><a href="#man-指令" class="headerlink" title="man 指令"></a><strong>man 指令</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man 命令或配置文件</span><br></pre></td></tr></table></figure><blockquote><p><strong><code>man</code>（manual）命令</strong> 是 <strong>Linux 的帮助文档系统</strong>，用于 <strong>查看 Linux 命令的详细说明</strong>，类似于一本 <strong>电子版手册</strong>。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ryan ~]# man <span class="built_in">ls</span></span><br></pre></td></tr></table></figure><blockquote><p>输入<code>man ls</code>后会进入到帮助文档里，按空格键可以向下翻一页，按<code>q</code>键退出文档。</p><img src="https://s2.loli.net/2025/01/21/AD5FvJNQbUrM43n.png" alt="img" style="zoom: 33%;" /><ul><li><code>man</code> 常见快捷键</li></ul><table><thead><tr><th>按键</th><th>作用</th></tr></thead><tbody><tr><td><code>↑ / ↓</code></td><td>上下滚动</td></tr><tr><td><code>PageUp / PageDown</code></td><td>上下翻页</td></tr><tr><td><code>Home / End</code></td><td>跳到开头&#x2F;结尾</td></tr><tr><td><code>/关键字</code></td><td>向下搜索关键字</td></tr><tr><td><code>?关键字</code></td><td>向上搜索关键字</td></tr><tr><td><code>n</code></td><td>跳到下一个搜索结果</td></tr><tr><td><code>N</code></td><td>跳到上一个搜索结果</td></tr><tr><td><code>q</code></td><td>退出 <code>man</code></td></tr></tbody></table></blockquote><h2 id="help-指令"><a href="#help-指令" class="headerlink" title="help 指令"></a><strong>help 指令</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">help</span> 命令   // 获得shell内置命令的帮助信息</span><br></pre></td></tr></table></figure><blockquote><p><code>help</code> 是 <strong>Bash 内置命令</strong>，用于 <strong>查看 shell 内置命令（Built-in Commands）的帮助信息</strong>。它不像 <code>man</code> 那样适用于所有命令，而是 <strong>专门针对 shell 内置命令</strong>（如 <code>cd</code>、<code>echo</code>、<code>exit</code> 等）。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@ryan ~]# <span class="built_in">help</span> <span class="built_in">cd</span></span><br><span class="line"><span class="built_in">cd</span>: <span class="built_in">cd</span> [-L|[-P [-e]]] [<span class="built_in">dir</span>]</span><br><span class="line">    Change the shell working directory.</span><br><span class="line">...... // 省略</span><br><span class="line">    -P is used; non-zero otherwise.</span><br><span class="line">[root@ryan ~]# </span><br></pre></td></tr></table></figure><ul><li><code>help</code> 和 <code>man</code> 的区别</li></ul><table><thead><tr><th><strong>特性</strong></th><th><strong>help</strong></th><th><strong>man</strong></th></tr></thead><tbody><tr><td><strong>适用范围</strong></td><td><strong>Bash 内置命令</strong></td><td><strong>所有 Linux 命令</strong></td></tr><tr><td><strong>使用方式</strong></td><td><code>help 命令名</code></td><td><code>man 命令名</code></td></tr><tr><td><strong>文档类型</strong></td><td><strong>简要说明</strong></td><td><strong>完整手册</strong></td></tr><tr><td><strong>示例</strong></td><td><code>help exit</code></td><td><code>man ls</code></td></tr></tbody></table><p>🔹 **如果命令是 shell 内置的，就用 <code>help</code>，否则用 <code>man</code>**。</p><p>🔹 <strong>如果不确定命令是否是内置的</strong>，可以用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span> 命令名</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ryan ~]# <span class="built_in">type</span> <span class="built_in">cd</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> is a shell <span class="built_in">builtin</span></span><br></pre></td></tr></table></figure><p>表示 <code>cd</code> 是 shell 内置命令，可以用 <code>help cd</code> 查看帮助。</p><ul><li>也可以使用第四章中提供的Linux命令大全进行查看。</li></ul><h1 id="十三、绝对路径和相对路径"><a href="#十三、绝对路径和相对路径" class="headerlink" title="十三、绝对路径和相对路径"></a>十三、绝对路径和相对路径</h1><p>在 Linux 文件系统中，路径用于指向文件或目录。路径有两种类型：</p><ul><li><strong>绝对路径（Absolute Path）</strong></li><li><strong>相对路径（Relative Path）</strong></li></ul><hr><h2 id="绝对路径（Absolute-Path）"><a href="#绝对路径（Absolute-Path）" class="headerlink" title="绝对路径（Absolute Path）"></a><strong>绝对路径（Absolute Path）</strong></h2><p><strong>概念</strong></p><p>绝对路径是 <strong>从根目录 <code>/</code> 开始</strong> 的完整路径，始终指向同一个文件或目录 <strong>无论当前在哪个位置</strong>。</p><p><strong>特点</strong></p><ul><li><strong>以 <code>/</code> 开头</strong></li><li><strong>不受当前目录影响</strong></li><li><strong>始终指向唯一的文件&#x2F;目录</strong></li></ul><p><strong>示例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@ryan ~]# <span class="built_in">cd</span> /home/ryan/Documents    <span class="comment"># 切换到 /home/ryan/Documents</span></span><br><span class="line">[root@ryan ~]# <span class="built_in">ls</span> /etc/passwd             <span class="comment"># 访问 /etc/passwd 文件</span></span><br></pre></td></tr></table></figure><p>上面 <code>/home/ryan/Documents</code> 和 <code>/etc/passwd</code> 都是绝对路径。</p><hr><h2 id="相对路径（Relative-Path）"><a href="#相对路径（Relative-Path）" class="headerlink" title="相对路径（Relative Path）"></a><strong>相对路径（Relative Path）</strong></h2><p><strong>概念</strong></p><p>相对路径是 <strong>相对于当前目录（<code>pwd</code> 命令显示的目录）</strong> 计算的路径。</p><p><strong>特点</strong></p><ul><li><strong>不以 <code>/</code> 开头</strong></li><li><strong>依赖于当前目录</strong></li><li><strong>更简短，适合在脚本和命令行中使用</strong></li></ul><p><strong>示例</strong></p><p>假设当前目录是 <code>/home/ryan</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@ryan ~]# <span class="built_in">cd</span> Documents       <span class="comment"># 进入 /home/ryan/Documents</span></span><br><span class="line">[root@ryan ~]# <span class="built_in">ls</span> ./test.txt      <span class="comment"># 查看当前目录下的 test.txt 文件</span></span><br><span class="line">[root@ryan ~]# <span class="built_in">cat</span> ../file.txt    <span class="comment"># 访问上一级目录 (/home) 下的 file.txt</span></span><br></pre></td></tr></table></figure><p>相对路径依赖于当前目录示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@ryan ~]# <span class="built_in">ls</span></span><br><span class="line">Documents Pictures  Templates Desktop Downloads  Music   Public    Videos</span><br><span class="line">[root@ryan ~]# <span class="built_in">cd</span> Documents/ // 进入Documents目录</span><br><span class="line">[root@ryan Documents]# <span class="built_in">cd</span> Downloads// 使用相对路径进入root目录下的Downloads目录</span><br><span class="line">-bash: <span class="built_in">cd</span>: Downloads: No such file or directory// 无法进入</span><br><span class="line">[root@ryan Documents]# <span class="built_in">cd</span> /root/Downloads/// 使用绝对路径进入root目录嗲的Downloads目录</span><br><span class="line">[root@ryan Downloads]#  // 成功进入</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><code>Documents</code> 相当于 <code>/home/ryan/Documents</code></li><li><code>./test.txt</code> 表示当前目录中的 <code>test.txt</code></li><li><code>../file.txt</code> 表示上一级目录中的 <code>file.txt</code></li></ul><hr><h2 id="和-目录"><a href="#和-目录" class="headerlink" title=". 和 .. 目录"></a><strong><code>.</code> 和 <code>..</code> 目录</strong></h2><p>在相对路径中，两个特殊符号：</p><ul><li><code>.</code> 代表 <strong>当前目录</strong></li><li><code>..</code> 代表 <strong>上一级目录</strong></li></ul><p><strong>示例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@ryan ~]# <span class="built_in">ls</span> .              <span class="comment"># 列出当前目录内容</span></span><br><span class="line">[root@ryan ~]# <span class="built_in">ls</span> ..             <span class="comment"># 列出上一级目录内容</span></span><br><span class="line">[root@ryan ~]# <span class="built_in">cd</span> ../Downloads   <span class="comment"># 进入上一级目录的 Downloads 目录</span></span><br></pre></td></tr></table></figure><h1 id="十四、文件目录类"><a href="#十四、文件目录类" class="headerlink" title="十四、文件目录类"></a>十四、文件目录类</h1><blockquote><p>接下来使用的都是root用户！</p></blockquote><h2 id="pwd指令"><a href="#pwd指令" class="headerlink" title="pwd指令"></a><strong>pwd指令</strong></h2><ol><li>功能：显示当前工作目录的绝对路径</li><li>语法：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pwd</span></span><br></pre></td></tr></table></figure><ol start="3"><li>应用案例：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@ryan Documents]# <span class="built_in">pwd</span></span><br><span class="line">/root/Documents</span><br><span class="line">[root@ryan Documents]# </span><br></pre></td></tr></table></figure><h2 id="ls指令"><a href="#ls指令" class="headerlink" title="ls指令"></a><strong>ls指令</strong></h2><ol><li>功能：显示当前工作目录中的目录和文件</li><li>语法</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> [选项] [目录或文件]</span><br></pre></td></tr></table></figure><ol start="3"><li>常用选项</li></ol><p>​-a : 显示当前目录所有的文件和目录，包括隐藏的目录和文件</p><p>​-l : 以列表的方式显示详细信息</p><ol start="4"><li>应用实例：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@ryan ~]# <span class="built_in">ls</span></span><br><span class="line">[root@ryan ~]# <span class="built_in">ls</span> -a</span><br><span class="line">[root@ryan ~]# <span class="built_in">ls</span> -l</span><br><span class="line">[root@ryan ~]# <span class="built_in">ls</span> -al(或<span class="built_in">ls</span> -la，顺序是随意的)</span><br><span class="line">[root@ryan ~]# <span class="built_in">ls</span> -al /home</span><br></pre></td></tr></table></figure><blockquote><p>在Linux中，隐藏文件是以 <code>.</code>开头的，选项可以组合使用，如<code>ls -al /root</code>，表示按列详细显示&#x2F;root目录下的文件和文件夹（包括隐藏文件）。</p><p>快捷指令 <code>ll</code>：相当于<code>ls -l</code>，但在Ubuntu中<code>ll</code>：相当于<code>ls -al</code></p></blockquote><h2 id="cd指令"><a href="#cd指令" class="headerlink" title="cd指令"></a><strong>cd指令</strong></h2><ol><li>功能：切换到指定的目录</li><li>语法：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> 绝对路径或相对路径</span><br></pre></td></tr></table></figure><ol start="3"><li>补充：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@ryan ~]# <span class="built_in">cd</span> ~// 切换到当前用户的家目录下</span><br><span class="line">[root@ryan ~]# <span class="built_in">cd</span>// 直接输入<span class="built_in">cd</span>然后回车也是切换到当前用户的家目录</span><br><span class="line">[root@ryan ~]# <span class="built_in">cd</span> ..// 切换到当前目录的上一级目录</span><br><span class="line">[root@ryan ~]# <span class="built_in">cd</span> -// 切换到上一次所在的目录</span><br><span class="line">[root@ryan ~]# <span class="built_in">cd</span> ../.. // 切换到上一级目录的上一级目录</span><br></pre></td></tr></table></figure><ol start="4"><li>应用案例：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@ryan ~]# <span class="built_in">cd</span> /mnt/hgfs/</span><br><span class="line">[root@ryan hgfs]# <span class="built_in">pwd</span></span><br><span class="line">/mnt/hgfs</span><br><span class="line">[root@ryan hgfs]# <span class="built_in">cd</span> ..</span><br><span class="line">[root@ryan mnt]# <span class="built_in">pwd</span></span><br><span class="line">/mnt</span><br><span class="line">[root@ryan mnt]# <span class="built_in">cd</span> ~</span><br><span class="line">[root@ryan ~]# <span class="built_in">pwd</span></span><br><span class="line">/root</span><br><span class="line">[root@ryan ~]#</span><br></pre></td></tr></table></figure><h2 id="mkdir指令"><a href="#mkdir指令" class="headerlink" title="mkdir指令"></a><strong>mkdir指令</strong></h2><ol><li>功能：用于创建目录</li><li>语法</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> [选项] 目录名</span><br></pre></td></tr></table></figure><ol start="3"><li>常用选项</li></ol><p>​-p : 创建多级目录</p><ol start="4"><li>应用案例：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@ryan Documents]# <span class="built_in">ls</span>// 当前目录下没有demo目录</span><br><span class="line">[root@ryan Documents]# <span class="built_in">mkdir</span> demo  // 创建名为demo的目录</span><br><span class="line">[root@ryan Documents]# <span class="built_in">ls</span>  // 创建成功</span><br><span class="line">demo</span><br><span class="line">[root@ryan Documents]# <span class="built_in">mkdir</span> demo01/demo02 // 创建多级目录</span><br><span class="line"><span class="built_in">mkdir</span>: cannot create directory ‘demo01/demo02’: No such file or directory // 创建多级目录失败</span><br><span class="line">[root@ryan Documents]# <span class="built_in">mkdir</span> -p demo01/demo02// 加上`-p`参数创建多级目录</span><br><span class="line">[root@ryan Documents]# <span class="built_in">ls</span> // 创建多级目录成功</span><br><span class="line">demo  demo01</span><br><span class="line">[root@ryan Documents]# <span class="built_in">cd</span> demo01</span><br><span class="line">[root@ryan demo01]# <span class="built_in">ls</span></span><br><span class="line">demo02</span><br><span class="line">[root@ryan demo01]# </span><br></pre></td></tr></table></figure><h2 id="rmdir指令"><a href="#rmdir指令" class="headerlink" title="rmdir指令"></a><strong>rmdir指令</strong></h2><ol><li>功能：删除<strong>空目录</strong></li><li>语法</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rmdir</span> [选项] 要删除的空目录名</span><br></pre></td></tr></table></figure><ol start="3"><li><p>补充：<code>rmdir</code> 删除的是空目录，如果该目录下有内容则无法删除。（那么该如何删除有内容的目录呢？接着往下学……）</p></li><li><p>应用案例：</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@ryan Documents]# <span class="built_in">ls</span></span><br><span class="line">demo  demo01</span><br><span class="line">[root@ryan Documents]# <span class="built_in">rmdir</span> demo  // 删除无内容的目录demo</span><br><span class="line">[root@ryan Documents]# <span class="built_in">ls</span></span><br><span class="line">demo01</span><br><span class="line">[root@ryan Documents]# <span class="built_in">rmdir</span> demo01  // 删除有内容的目录demo01</span><br><span class="line"><span class="built_in">rmdir</span>: failed to remove ‘demo01’: Directory not empty</span><br><span class="line">[root@ryan Documents]# <span class="built_in">ls</span></span><br><span class="line">demo01</span><br><span class="line">[root@ryan Documents]# </span><br></pre></td></tr></table></figure><h2 id="touch指令"><a href="#touch指令" class="headerlink" title="touch指令"></a><strong>touch指令</strong></h2><ol><li>功能：当不存在指定的文件时，创建<strong>空文件</strong>；当存在指定的文件时，<strong>更新该文件的创建或修改时间</strong>。</li><li>语法</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> 文件名// 创建单个文件</span><br><span class="line"><span class="built_in">touch</span> 文件名 文件名 文件名 ...// 创建多个文件时，用空格隔开即可。</span><br></pre></td></tr></table></figure><ol start="3"><li>应用案例：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@ryan Documents]# <span class="built_in">touch</span> hello.txt</span><br><span class="line">[root@ryan Documents]# <span class="built_in">ls</span></span><br><span class="line">demo01  hello.txt</span><br><span class="line">[root@ryan Documents]# <span class="built_in">ls</span> -al</span><br><span class="line">total 12</span><br><span class="line">drwxr-xr-x.  3 root root 4096 Jan 21 03:15 .</span><br><span class="line">dr-xr-x---. 15 root root 4096 Jan 21 03:02 ..</span><br><span class="line">drwxr-xr-x.  3 root root 4096 Jan 21 03:05 demo01</span><br><span class="line">-rw-r--r--.  1 root root    0 Jan 21 03:15 hello.txt  // 这里创建空文件，时间是 03:15</span><br><span class="line">[root@ryan Documents]# <span class="built_in">touch</span> hello.txt</span><br><span class="line">[root@ryan Documents]# <span class="built_in">ls</span> -al</span><br><span class="line">total 12</span><br><span class="line">drwxr-xr-x.  3 root root 4096 Jan 21 03:15 .</span><br><span class="line">dr-xr-x---. 15 root root 4096 Jan 21 03:02 ..</span><br><span class="line">drwxr-xr-x.  3 root root 4096 Jan 21 03:05 demo01</span><br><span class="line">-rw-r--r--.  1 root root    0 Jan 21 03:16 hello.txt  // 这里已存在该文件，则更新该文件的修改时间 03:16</span><br><span class="line">[root@ryan Documents]# <span class="built_in">touch</span> hello01.txt hello02.txt // 创建多个文件</span><br><span class="line">[root@ryan Documents]# <span class="built_in">ls</span></span><br><span class="line">demo01  hello01.txt  hello02.txt  hello.txt</span><br><span class="line">[root@ryan Documents]# </span><br></pre></td></tr></table></figure><h2 id="cp指令"><a href="#cp指令" class="headerlink" title="cp指令"></a><strong>cp指令</strong></h2><ol><li>功能：将指定文件或目录<strong>复制</strong>到指定的目录下</li><li>语法</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> [选项] 源文件 目标目录或目标文件</span><br><span class="line"><span class="built_in">cp</span> [选项] 具体文件 具体文件</span><br><span class="line"><span class="built_in">cp</span> [选项] 具体文件 绝对或相对路径</span><br><span class="line"><span class="built_in">cp</span> [选项] 绝对或相对路径 绝对或相对路径</span><br><span class="line"><span class="built_in">cp</span> [选项] 绝对或相对路径 具体文件</span><br></pre></td></tr></table></figure><blockquote><p>复制源文件到另一个目标文件时，若目标文件存在，则直接将源文件的内容复制到目标文件中，<strong>并且会使用源文件中的内容覆盖掉目标文件中的内容，覆盖后同样会更新文件的修改时间为当前系统时间</strong>；若目标文件不存在，则会默认先创建目标文件，再将源文件的内容复制到目标文件中。</p></blockquote><ol start="3"><li>常用选项</li></ol><p>​-i : 复制或者覆盖目标文件之前先询问用户（因为cp的特殊性，所以<strong>一般强制要求使用<code>-i</code>选项</strong>）</p><p>​-r : 递归复制整个文件夹</p><ol start="4"><li>应用案例：（起初的Downloads文件夹下没有任何文件）</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@ryan Documents]# <span class="built_in">ls</span></span><br><span class="line">demo01  hello01.txt  hello02.txt  hello.txt</span><br><span class="line">[root@ryan Documents]# <span class="built_in">cp</span> hello01.txt /root/Downloads/</span><br><span class="line">[root@ryan Documents]# <span class="built_in">cd</span> /root/Downloads/</span><br><span class="line">[root@ryan Downloads]# <span class="built_in">ls</span></span><br><span class="line">hello01.txt</span><br><span class="line">[root@ryan Documents]# <span class="built_in">cp</span> hello02.txt hello03.txt// hello03.txt原先不存在</span><br><span class="line">[root@ryan Documents]# <span class="built_in">ls</span></span><br><span class="line">demo01  hello01.txt  hello02.txt  hello03.txt  hello.txt// 创建了hello03.txt文件</span><br><span class="line">[root@ryan Documents]# <span class="built_in">cp</span> -i hello01.txt hello03.txt </span><br><span class="line"><span class="built_in">cp</span>: overwrite ‘hello03.txt’? y// y表示确认覆盖，n表示取消覆盖</span><br><span class="line">[root@ryan Documents]# <span class="built_in">cp</span> -r /root/Documents/ /root/Downloads/ // 将Documents文件夹及其里面的内容都复制到/root/Downloads目录中</span><br><span class="line">[root@ryan Documents]# <span class="built_in">cd</span> /root/Downloads/</span><br><span class="line">[root@ryan Downloads]# <span class="built_in">ls</span></span><br><span class="line">Documents  hello01.txt</span><br><span class="line">[root@ryan Downloads]#</span><br></pre></td></tr></table></figure><h2 id="rm指令"><a href="#rm指令" class="headerlink" title="rm指令"></a><strong>rm指令</strong></h2><ol><li>功能：删除指定文件或目录（删除后就无法还原了，Linux不存在回收站的概念）</li><li>语法</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> [选项] 文件或目录</span><br></pre></td></tr></table></figure><ol start="3"><li>常用选项</li></ol><p>​-r : 递归删除整个文件夹</p><p>​-i : 删除文件前先询问用户是否确定删除（因为rm的特殊性，所以<strong>一般强制要求使用<code>-i</code>选项</strong>）</p><p>​-f : 强制删除指定文件或目录，不询问不提示</p><ol start="4"><li>应用案例</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@ryan Downloads]# <span class="built_in">ls</span></span><br><span class="line">Documents  hello01.txt  test.txt</span><br><span class="line">[root@ryan Downloads]# <span class="built_in">rm</span> -i test.txt // 询问用户是否删除</span><br><span class="line"><span class="built_in">rm</span>: remove regular empty file ‘test.txt’? y</span><br><span class="line">[root@ryan Downloads]# <span class="built_in">ls</span></span><br><span class="line">Documents  hello01.txt</span><br><span class="line">[root@ryan Downloads]# <span class="built_in">rm</span> hello01.txt // 直接删除不提示</span><br><span class="line"><span class="built_in">rm</span>: remove regular empty file ‘hello01.txt’? y</span><br><span class="line">[root@ryan Downloads]# <span class="built_in">ls</span></span><br><span class="line">Documents</span><br><span class="line">[root@ryan Downloads]# <span class="built_in">rm</span> -ri Documents/// 遍历删除Documents文件夹下的文件包括Documents文件夹并且每次删除都询问用户是否删除</span><br><span class="line"><span class="built_in">rm</span>: descend into directory ‘Documents/’? y</span><br><span class="line"><span class="built_in">rm</span>: remove regular empty file ‘Documents/hello.txt’? y</span><br><span class="line"><span class="built_in">rm</span>: remove regular empty file ‘Documents/hello01.txt’? y</span><br><span class="line"><span class="built_in">rm</span>: descend into directory ‘Documents/demo01’? y</span><br><span class="line"><span class="built_in">rm</span>: remove directory ‘Documents/demo01/demo02’? y</span><br><span class="line"><span class="built_in">rm</span>: remove directory ‘Documents/demo01’? y</span><br><span class="line"><span class="built_in">rm</span>: remove regular empty file ‘Documents/hello02.txt’? y</span><br><span class="line"><span class="built_in">rm</span>: remove regular empty file ‘Documents/hello03.txt’? y</span><br><span class="line"><span class="built_in">rm</span>: remove directory ‘Documents/’? y</span><br><span class="line">[root@ryan Downloads]# <span class="built_in">ls</span></span><br><span class="line">[root@ryan Downloads]# </span><br></pre></td></tr></table></figure><ol start="5"><li><strong>重要部分</strong></li></ol><p>Linux最危险的指令之一。**sudo rm -rf &#x2F;<em><strong>：是一个</strong>极其危险</em>*的命令，它会 <strong>删除 Linux 系统上的所有文件</strong>，可能导致系统彻底崩溃，无法恢复。</p><h3 id="参数解析"><a href="#参数解析" class="headerlink" title="参数解析"></a><strong>参数解析</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> -rf /*</span><br></pre></td></tr></table></figure><ul><li><code>sudo</code>（superuser do）提升权限，使普通用户可以执行 <strong>管理员权限</strong> 命令。</li><li><code>rm</code>（remove）：用于删除文件或目录。</li><li><code>-r</code>（recursive）：递归删除<strong>目录及其中的所有文件</strong>（即删除整个文件夹）。</li><li><code>-f</code>（force）：强制删除，无需确认（即使文件有<strong>写保护</strong>）。</li><li><code>/*</code><ul><li><code>/</code>：Linux 的<strong>根目录</strong>，所有系统文件都在这个目录下（如 <code>/bin</code>、<code>/etc</code>、<code>/home</code>）。</li><li><code>*</code>：匹配<strong>根目录下的所有文件和文件夹</strong>。</li></ul></li></ul><h3 id="执行效果"><a href="#执行效果" class="headerlink" title="执行效果"></a><strong>执行效果</strong></h3><ol><li><strong>如果以 <code>root</code> 用户执行</strong>：<ul><li><strong>整个系统所有文件都会被删除</strong>（包括 <code>/bin</code>、<code>/etc</code>、<code>/home</code>、<code>usr</code> 等）。</li><li><strong>系统核心文件被删除后，Linux 会彻底崩溃，无法开机</strong>。</li><li><strong>除非有备份，否则无法恢复</strong>，甚至连 <code>rm</code> 命令本身都会被删除。</li></ul></li><li><strong>如果是普通用户执行</strong>：<ul><li>只能删除当前用户有权限删除的文件，系统的核心文件可能无法删除。</li></ul></li></ol><p>🚨 <strong>千万不要随便尝试 <code>sudo rm -rf /*</code>！</strong> 🚨</p><h2 id="mv指令"><a href="#mv指令" class="headerlink" title="mv指令"></a><strong>mv指令</strong></h2><ol><li>功能：移动文件&#x2F;文件夹或者重命名文件&#x2F;文件夹</li><li>语法</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> 旧文件/文件夹名 新文件/文件夹名// 重命名</span><br><span class="line"><span class="built_in">mv</span> 文件/绝对路径 绝对路径// 移动文件或文件夹</span><br></pre></td></tr></table></figure><ol start="3"><li>应用案例</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@ryan <span class="built_in">test</span>]# <span class="built_in">ls</span></span><br><span class="line">ajsldasdfasdf.pdf</span><br><span class="line">[root@ryan <span class="built_in">test</span>]# <span class="built_in">mv</span> ajsldasdfasdf.pdf new.pdf</span><br><span class="line">[root@ryan <span class="built_in">test</span>]# <span class="built_in">ls</span></span><br><span class="line">new.pdf</span><br><span class="line">[root@ryan <span class="built_in">test</span>]# <span class="built_in">mv</span> new.pdf /root/Documents/</span><br><span class="line">[root@ryan <span class="built_in">test</span>]# <span class="built_in">cd</span> /root/Documents/</span><br><span class="line">[root@ryan Documents]# lws</span><br><span class="line">bash: lws: <span class="built_in">command</span> not found...</span><br><span class="line">[root@ryan Documents]# <span class="built_in">ls</span></span><br><span class="line">demo01  hello01.txt  hello02.txt  hello03.txt  hello.txt  new.pdf</span><br><span class="line">[root@ryan Documents]# <span class="built_in">mv</span> /root/test/ /root/Documents/</span><br><span class="line">[root@ryan Documents]# <span class="built_in">ls</span></span><br><span class="line">demo01  hello01.txt  hello02.txt  hello03.txt  hello.txt  new.pdf  <span class="built_in">test</span></span><br><span class="line">[root@ryan Documents]#</span><br></pre></td></tr></table></figure><h2 id="cat指令"><a href="#cat指令" class="headerlink" title="cat指令"></a><strong>cat指令</strong></h2><ol><li>功能：用于 <strong>显示文件内容</strong>，但<strong>无法翻页</strong>，适合查看<strong>短文件</strong>。</li><li>语法</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> [选项] 文件名</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> file1.txt file2.txt ... // 连接并显示多个文件</span><br></pre></td></tr></table></figure><ol start="3"><li>常用选项</li></ol><p>​-n : 显示行号</p><ol start="4"><li>应用案例</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[ryan@ryan Documents]$ <span class="built_in">cat</span> test1.txt </span><br><span class="line">fasf</span><br><span class="line">ads</span><br><span class="line">f</span><br><span class="line">asd</span><br><span class="line">fads</span><br><span class="line">... 剩下的内容省略</span><br><span class="line">[ryan@ryan Documents]$ </span><br></pre></td></tr></table></figure><ol start="5"><li>使用细节：cat只能浏览文件，而不能修改文件，为了浏览方便，一般会带上 <strong>管道命令 | command</strong>。</li></ol><blockquote><h3 id="Linux管道命令"><a href="#Linux管道命令" class="headerlink" title="Linux管道命令 |"></a>Linux管道命令 <code>|</code></h3><p><strong>管道（<code>|</code>）</strong> 是 <strong>Linux Shell</strong> 中的一个强大特性，它用于 <strong>连接多个命令</strong>，让一个命令的输出成为另一个命令的输入。</p><p>基本语法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">command1 | command2 | command3 ...</span><br></pre></td></tr></table></figure><p><strong><code>command1</code></strong> 产生输出</p><p><strong><code>command2</code></strong> 处理 <code>command1</code> 的输出</p><p><strong><code>command3</code></strong> 进一步处理…</p></blockquote><h2 id="more指令"><a href="#more指令" class="headerlink" title="more指令"></a><strong>more指令</strong></h2><ol><li><p>功能： <strong>支持分页查看文件内容</strong>，适用于<strong>大文件</strong>。</p></li><li><p>语法：</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">more file.txt</span><br></pre></td></tr></table></figure><blockquote><p>逐页显示 <code>file.txt</code>，如果文件很长，你可以<strong>滚动</strong>查看</p></blockquote><h3 id="主要操作"><a href="#主要操作" class="headerlink" title="主要操作"></a><strong>主要操作</strong></h3><table><thead><tr><th>按键</th><th>作用</th></tr></thead><tbody><tr><td><code>Space</code>空格键</td><td>翻到<strong>下一页</strong></td></tr><tr><td><code>Enter</code></td><td>向下<strong>滚动一行</strong></td></tr><tr><td><code>b</code></td><td>返回<strong>上一页</strong></td></tr><tr><td>Ctrl + F</td><td>向下滚动一页</td></tr><tr><td><code>q</code></td><td><strong>退出</strong> <code>more</code></td></tr></tbody></table><ol start="3"><li>应用案例：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ryan@ryan Documents]$ more test1.txt </span><br><span class="line">省略...</span><br></pre></td></tr></table></figure><h2 id="less指令"><a href="#less指令" class="headerlink" title="less指令"></a><strong>less指令</strong></h2><ol><li><p>功能：是 <code>more</code> 的增强版，<strong>支持上下滚动</strong>，功能更强大。</p></li><li><p>语法</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">less file.txt</span><br></pre></td></tr></table></figure><h3 id="主要操作-1"><a href="#主要操作-1" class="headerlink" title="主要操作"></a><strong>主要操作</strong></h3><table><thead><tr><th>按键</th><th>作用</th></tr></thead><tbody><tr><td><code>Space</code></td><td><strong>下一页</strong></td></tr><tr><td><code>b</code></td><td><strong>上一页</strong></td></tr><tr><td><code>↑</code> &#x2F; <code>↓</code></td><td><strong>向上&#x2F;向下滚动</strong></td></tr><tr><td><code>/关键字</code></td><td><strong>搜索</strong> 关键字（按 <code>n</code> 跳到下一个匹配项）</td></tr><tr><td><code>q</code></td><td><strong>退出</strong> <code>less</code></td></tr></tbody></table><h2 id="cat-vs-more-vs-less"><a href="#cat-vs-more-vs-less" class="headerlink" title="cat vs more vs less"></a><strong><code>cat</code> vs <code>more</code> vs <code>less</code></strong></h2><table><thead><tr><th>命令</th><th>适用场景</th><th>是否支持翻页</th><th>是否支持回滚</th></tr></thead><tbody><tr><td><code>cat</code></td><td><strong>短文件</strong></td><td>❌ 不能翻页</td><td>❌ 不能回滚</td></tr><tr><td><code>more</code></td><td><strong>中等大小文件</strong></td><td>✅ 能翻页</td><td>❌ 不能回滚</td></tr><tr><td><code>less</code></td><td><strong>大文件</strong></td><td>✅ 能翻页</td><td>✅ 能回滚</td></tr></tbody></table><h2 id="echo指令"><a href="#echo指令" class="headerlink" title="echo指令"></a><strong>echo指令</strong></h2><ol><li><p>功能：用于在终端打印字符串、变量值，或者格式化输出。</p></li><li><p>语法</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> [选项] 输出的内容</span><br></pre></td></tr></table></figure><ol start="3"><li>应用案例：</li></ol><p>（1）输出环境变量。如<code>$PATH</code> <code>$HOSTNAME</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[ryan@ryan Documents]$ <span class="built_in">echo</span> <span class="variable">$PATH</span></span><br><span class="line">/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/ryan/.local/bin:/home/ryan/bin</span><br><span class="line">[ryan@ryan Documents]$ <span class="built_in">echo</span> <span class="variable">$HOSTNAME</span></span><br><span class="line">ryan</span><br><span class="line">[ryan@ryan Documents]$ </span><br></pre></td></tr></table></figure><p>（2）输出指定的内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[ryan@ryan Documents]$ <span class="built_in">echo</span> Hello,world</span><br><span class="line">Hello,world</span><br><span class="line">[ryan@ryan Documents]$ </span><br></pre></td></tr></table></figure><h2 id="head指令"><a href="#head指令" class="headerlink" title="head指令"></a><strong>head指令</strong></h2><ol><li>功能：用于显示文件的开头部分，默认显示前 10 行。</li><li>语法</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">head</span> [选项] 文件名</span><br></pre></td></tr></table></figure><ol start="3"><li>常用选项</li></ol><p>-n &lt;行数&gt; : 指定显示的行数</p><p>-c &lt;字节数&gt; : 指定显示的字节数</p><ol start="4"><li>应用案例</li></ol><p>（1）显示文件的前 10 行（默认行为）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">head</span> filename.txt</span><br></pre></td></tr></table></figure><p>（2）显示文件的前 5 行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">head</span> -n 5 filename.txt</span><br></pre></td></tr></table></figure><p>（3）显示文件的前 100 个字节：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">head</span> -c 100 filename.txt</span><br></pre></td></tr></table></figure><p>（4）结合管道使用，显示命令输出的前 10 行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -l | <span class="built_in">head</span></span><br></pre></td></tr></table></figure><h2 id="tail指令"><a href="#tail指令" class="headerlink" title="tail指令"></a><strong>tail指令</strong></h2><ol><li>功能：用于显示文件的结尾部分，默认显示最后 10 行。</li><li>语法</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tail</span> [选项] 文件名</span><br></pre></td></tr></table></figure><ol start="3"><li>常用选项</li></ol><ul><li><code>-n &lt;行数&gt;</code>：指定显示的行数。</li><li><code>-c &lt;字节数&gt;</code>：指定显示的字节数。</li><li><code>-f</code>：实时跟踪文件内容的变化（常用于查看日志文件）。</li><li><code>-F</code>：与 <code>-f</code> 类似，但会重新打开文件（适合文件被轮转的情况）。</li></ul><ol start="4"><li>应用案例</li></ol><p>（1）显示文件的最后 10 行（默认行为）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tail</span> filename.txt</span><br></pre></td></tr></table></figure><p>（2）显示文件的最后 5 行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tail</span> -n 5 filename.txt</span><br></pre></td></tr></table></figure><p>（3）显示文件的最后 100 个字节：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tail</span> -c 100 filename.txt</span><br></pre></td></tr></table></figure><p>（4）实时跟踪文件内容的变化（常用于查看日志）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tail</span> -f /var/log/syslog</span><br></pre></td></tr></table></figure><p>（5）结合管道使用，显示命令输出的最后 10 行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -l | <span class="built_in">tail</span></span><br></pre></td></tr></table></figure><h2 id="指令-和-指令"><a href="#指令-和-指令" class="headerlink" title="&gt;指令 和 &gt;&gt;指令"></a><strong><code>&gt;</code>指令 和 <code>&gt;&gt;</code>指令</strong></h2><p><code>&gt;</code>：输出重定向。<strong>覆盖文件</strong>（清空原内容后写入）</p><p><code>&gt;&gt;</code>：追加。<strong>追加到文件</strong>（保留原内容，在末尾添加）</p><p>示例：<code>&gt;</code></p><p>（1）写入文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello,world！&quot;</span> &gt; file.txt</span><br></pre></td></tr></table></figure><blockquote><p>原文件file.txt若不存在，则会先创建再重定向。</p></blockquote><p>（2）覆盖原文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;New Content&quot;</span> &gt; file.txt</span><br></pre></td></tr></table></figure><p>（3）将<code>ls</code>输出写入文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> &gt; list.txt</span><br></pre></td></tr></table></figure><p>示例：<code>&gt;&gt;</code></p><p>（1）追加文本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;First Line&quot;</span> &gt; file.txt</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Second Line&quot;</span> &gt;&gt; file.txt</span><br></pre></td></tr></table></figure><p>（2）追加<code>ls</code>命令的输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> &gt;&gt; list.txt</span><br></pre></td></tr></table></figure><h3 id="vs-对比"><a href="#vs-对比" class="headerlink" title="&gt; vs &gt;&gt; 对比"></a><strong><code>&gt;</code> vs <code>&gt;&gt;</code> 对比</strong></h3><table><thead><tr><th>符号</th><th>作用</th><th>是否清空文件</th></tr></thead><tbody><tr><td><code>&gt;</code></td><td><strong>覆盖</strong> 写入文件</td><td>✅ 是，先清空</td></tr><tr><td><code>&gt;&gt;</code></td><td><strong>追加</strong> 到文件</td><td>❌ 否，保留原内容</td></tr></tbody></table><h2 id="ln指令"><a href="#ln指令" class="headerlink" title="ln指令"></a><strong>ln指令</strong></h2><ol><li>功能：<code>ln</code> 命令用于 <strong>创建链接文件</strong>，链接分为：</li></ol><p>（1）<strong>硬链接（Hard Link）</strong></p><p>（2）<strong>符号链接（Symbolic Link，也叫软链接 Soft Link）</strong>，类似于windows里的快捷方式，主要存放了链接其他文件的路径。</p><ol start="2"><li>语法</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s [原文件或目录] [软链接名] （功能描述：给原文件创建一个软链接）</span><br></pre></td></tr></table></figure><ol start="3"><li>应用案例</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[ryan@ryan ~]$ <span class="built_in">ln</span> -s / myroot</span><br><span class="line">[ryan@ryan ~]$ ll</span><br><span class="line">total 32</span><br><span class="line">drwxr-xr-x. 2 ryan ryan 4096 Jan 24 06:04 Desktop</span><br><span class="line">drwxr-xr-x. 2 ryan ryan 4096 Jan 24 06:13 Documents</span><br><span class="line">drwxr-xr-x. 2 ryan ryan 4096 Jan 24 06:04 Downloads</span><br><span class="line">drwxr-xr-x. 2 ryan ryan 4096 Jan 24 06:04 Music</span><br><span class="line">lrwxrwxrwx. 1 ryan ryan    1 Jan 30 23:22 myroot -&gt; /</span><br><span class="line">drwxr-xr-x. 2 ryan ryan 4096 Jan 24 06:04 Pictures</span><br><span class="line">drwxr-xr-x. 2 ryan ryan 4096 Jan 24 06:04 Public</span><br><span class="line">drwxr-xr-x. 2 ryan ryan 4096 Jan 24 06:04 Templates</span><br><span class="line">drwxr-xr-x. 2 ryan ryan 4096 Jan 24 06:04 Videos</span><br><span class="line">[ryan@ryan ~]$ <span class="built_in">cd</span> myroot</span><br><span class="line">[ryan@ryan myroot]$ <span class="built_in">ls</span></span><br><span class="line">bin   dev  home  lib64       media  opt   root  sbin  sys  usr</span><br><span class="line">boot  etc  lib   lost+found  mnt    proc  run   srv   tmp  var</span><br><span class="line">[ryan@ryan myroot]$ </span><br></pre></td></tr></table></figure><blockquote><p>myroot指向根目录<code>/</code>，所以cd myroot，相当于cd &#x2F; ，即进入根目录下。</p></blockquote><p>删除软链接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[ryan@ryan ~]$ <span class="built_in">ls</span></span><br><span class="line">Desktop  Documents  Downloads  Music  myroot  Pictures  Public  Templates  Videos</span><br><span class="line">[ryan@ryan ~]$ <span class="built_in">rm</span> -ri myroot</span><br><span class="line"><span class="built_in">rm</span>: remove symbolic <span class="built_in">link</span> ‘myroot’? y</span><br><span class="line">[ryan@ryan ~]$ <span class="built_in">ls</span></span><br><span class="line">Desktop  Documents  Downloads  Music  Pictures  Public  Templates  Videos</span><br><span class="line">[ryan@ryan ~]$ </span><br></pre></td></tr></table></figure><h2 id="history指令"><a href="#history指令" class="headerlink" title="history指令"></a><strong>history指令</strong></h2><ol><li>功能：查看已经执行过的历史命令，也可以执行历史命令</li><li>语法</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">history</span> （功能描述：查看已经执行过的历史命令）</span><br></pre></td></tr></table></figure><p>3.应用案例</p><p>（1）显示所有的历史命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[ryan@ryan ~]$ <span class="built_in">history</span></span><br><span class="line">    1  ifconfig</span><br><span class="line">    2  reboot</span><br><span class="line">    3  <span class="built_in">ls</span></span><br><span class="line">    4  <span class="built_in">cd</span> /home</span><br><span class="line">    5  <span class="built_in">ls</span></span><br><span class="line">......</span><br><span class="line">[ryan@ryan ~]$ </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（2）显示最近使用过的5个指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[ryan@ryan ~]$ <span class="built_in">history</span> 5</span><br><span class="line">   32  <span class="built_in">rm</span> -ri myroot</span><br><span class="line">   33  <span class="built_in">ls</span></span><br><span class="line">   34  <span class="built_in">history</span> 10</span><br><span class="line">   35  <span class="built_in">history</span></span><br><span class="line">   36  <span class="built_in">history</span> 5</span><br><span class="line">[ryan@ryan ~]$ </span><br></pre></td></tr></table></figure><p>（3）执行历史编号为5的指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[ryan@ryan ~]$ !5</span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line">Desktop  Documents  Downloads  Music  Pictures  Public  Templates  Videos</span><br><span class="line">[ryan@ryan ~]$ </span><br></pre></td></tr></table></figure><h2 id="十五、使用组合命令"><a href="#十五、使用组合命令" class="headerlink" title="十五、使用组合命令"></a>十五、使用组合命令</h2><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">命令1 &amp;&amp; 命令2 &amp;&amp; ......</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ../Documents &amp;&amp; <span class="built_in">ls</span> -al // 进入到上一级目录下的Documents目录中并显示其中的内容</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@ryan Documents]# <span class="built_in">cd</span> /root/Downloads/ &amp;&amp; <span class="built_in">touch</span> test.txt &amp;&amp; <span class="built_in">ls</span> -al</span><br><span class="line">total 12</span><br><span class="line">drwxr-xr-x.  3 root root 4096 Jan 23 05:29 .</span><br><span class="line">dr-xr-x---. 15 root root 4096 Jan 23 03:22 ..</span><br><span class="line">drwxr-xr-x.  3 root root 4096 Jan 23 05:21 Documents</span><br><span class="line">-rw-r--r--.  1 root root    0 Jan 23 04:34 hello01.txt</span><br><span class="line">-rw-r--r--.  1 root root    0 Jan 23 05:29 test.txt</span><br><span class="line">[root@ryan Downloads]# </span><br></pre></td></tr></table></figure><h2 id="十六、通配符"><a href="#十六、通配符" class="headerlink" title="十六、通配符"></a>十六、通配符</h2><p>通配符用于匹配文件名或目录名，通常和 <code>ls</code>、<code>cp</code>、<code>rm</code> 等命令一起使用，能高效地操作多个文件。</p><ol><li><strong><code>\*</code>（匹配任意多个字符）</strong></li></ol><p><code>*</code> 代表 <strong>0 个或多个字符</strong>，可以匹配任意文件名。</p><p><strong>示例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> *.txt</span><br></pre></td></tr></table></figure><p> <strong>匹配当前目录下所有 <code>.txt</code> 文件</strong>（如 <code>file1.txt</code>、<code>test.txt</code>）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> demo*</span><br></pre></td></tr></table></figure><p> <strong>匹配以 <code>demo</code> 开头的所有文件</strong>（如 <code>demo1.txt</code>、<code>demo_test.c</code>）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> *  <span class="comment"># 小心！删除所有文件</span></span><br></pre></td></tr></table></figure><p><strong>2. <code>?</code>（匹配单个字符）</strong></p><p><code>?</code> 只匹配 <strong>任意 1 个字符</strong>。</p><p><strong>示例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> file?.txt</span><br></pre></td></tr></table></figure><p> 匹配 <code>file1.txt</code>、<code>fileA.txt</code>，但不匹配 <code>file12.txt</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> ?.txt</span><br></pre></td></tr></table></figure><p> <strong>匹配单字符文件名（如 <code>a.txt</code>，但不匹配 <code>ab.txt</code>）</strong>。</p><p><strong>3. <code>[]</code>（匹配指定范围的字符）</strong></p><p><code>[]</code> 匹配 <strong>一组字符中的任意一个</strong>。</p><p><strong>示例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> file[123].txt</span><br></pre></td></tr></table></figure><p>匹配 <code>file1.txt</code>、<code>file2.txt</code>、<code>file3.txt</code>，但不匹配 <code>file4.txt</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> file[a-c].txt</span><br></pre></td></tr></table></figure><p> 匹配 <code>filea.txt</code>、<code>fileb.txt</code>、<code>filec.txt</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> file[!2].txt</span><br></pre></td></tr></table></figure><p>匹配 <code>file1.txt</code>、<code>file3.txt</code>，但不匹配 <code>file2.txt</code>（<code>!</code> 取反）。</p><p><strong>4. <code>&#123;&#125;</code>（匹配多个字符串）</strong></p><p><code>&#123;&#125;</code> 用于匹配 <strong>多个特定的文件名模式</strong>，逗号 <code>,</code> 分隔。</p><p><strong>示例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> file&#123;1,3,5&#125;.txt</span><br></pre></td></tr></table></figure><p> 匹配 <code>file1.txt</code>、<code>file3.txt</code>、<code>file5.txt</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> &#123;file1,file2&#125;.txt backup/</span><br></pre></td></tr></table></figure><p> <strong>移动 <code>file1.txt</code> 和 <code>file2.txt</code> 到 <code>backup/</code> 目录</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> &#123;a,b,c&#125;&#123;1,2,3&#125;.txt</span><br></pre></td></tr></table></figure><p> <strong>创建 <code>a1.txt</code>、<code>a2.txt</code>、<code>a3.txt</code>、<code>b1.txt</code>… <code>c3.txt</code>（共 9 个文件）</strong>。</p><p><strong>5. <code>~</code>（用户目录）</strong></p><p><code>~</code> 代表当前用户的 <strong>home 目录</strong>（通常 <code>/home/用户名</code>）。</p><p><strong>示例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br></pre></td></tr></table></figure><p> <strong>回到用户的 home 目录</strong>（等同于 <code>cd /home/yourname</code>）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> ~/Documents</span><br></pre></td></tr></table></figure><p> <strong>列出 <code>Documents</code> 目录下的文件</strong>。</p><p><strong>6. <code>.</code> 和 <code>..</code>（当前目录和上级目录）</strong></p><ul><li><code>.</code> 代表 <strong>当前目录</strong></li><li><code>..</code> 代表 <strong>上一级目录</strong></li></ul><p><strong>示例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> .</span><br></pre></td></tr></table></figure><p> <strong>保持在当前目录</strong>（无变化）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ..</span><br></pre></td></tr></table></figure><p> <strong>进入上一级目录</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> file.txt ../</span><br></pre></td></tr></table></figure><p> <strong>移动 <code>file.txt</code> 到上一级目录</strong>。</p><p><strong>通配符总结</strong></p><table><thead><tr><th>通配符</th><th>作用</th><th>示例</th><th>匹配</th></tr></thead><tbody><tr><td><code>*</code></td><td>0 个或多个字符</td><td><code>ls *.txt</code></td><td>所有 <code>.txt</code> 文件</td></tr><tr><td><code>?</code></td><td>单个字符</td><td><code>ls file?.txt</code></td><td><code>file1.txt</code> 但不匹配 <code>file12.txt</code></td></tr><tr><td><code>[]</code></td><td>指定范围字符</td><td><code>ls file[1-3].txt</code></td><td><code>file1.txt</code>、<code>file2.txt</code></td></tr><tr><td><code>&#123;&#125;</code></td><td>多个匹配模式</td><td><code>ls file&#123;1,3,5&#125;.txt</code></td><td><code>file1.txt</code>、<code>file3.txt</code></td></tr><tr><td><code>~</code></td><td>用户 home 目录</td><td><code>cd ~/Downloads</code></td><td>进入 <code>Downloads</code> 目录</td></tr><tr><td><code>.</code></td><td>当前目录</td><td><code>cd .</code></td><td>仍在当前目录</td></tr><tr><td><code>..</code></td><td>上级目录</td><td><code>cd ..</code></td><td>进入上一级</td></tr></tbody></table><p><strong>实战技巧</strong></p><p><strong>批量删除</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> *.<span class="built_in">log</span></span><br></pre></td></tr></table></figure><p> <strong>删除所有 <code>.log</code> 日志文件</strong>。</p><p><strong>批量移动</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> report[1-3].pdf backup/</span><br></pre></td></tr></table></figure><p> <strong>移动 <code>report1.pdf</code> 到 <code>report3.pdf</code> 进 <code>backup/</code> 目录</strong>。</p><p><strong>查找特定类型文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> *.&#123;jpg,png,gif&#125;</span><br></pre></td></tr></table></figure><p><strong>列出所有图片文件</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
